// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"unidade/ent/unidade"

	"entgo.io/ent/dialect/sql"
)

// Unidade is the model entity for the Unidade schema.
type Unidade struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Descricao holds the value of the "descricao" field.
	Descricao string `json:"descricao,omitempty"`
	// URLAmigavel holds the value of the "url_amigavel" field.
	URLAmigavel string `json:"url_amigavel,omitempty"`
	// EnderecoID holds the value of the "endereco_id" field.
	EnderecoID int64 `json:"endereco_id,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude int `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude int `json:"longitude,omitempty"`
	// Telefone holds the value of the "telefone" field.
	Telefone int64 `json:"telefone,omitempty"`
	// Celular holds the value of the "celular" field.
	Celular int64 `json:"celular,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Facebook holds the value of the "facebook" field.
	Facebook string `json:"facebook,omitempty"`
	// Instagram holds the value of the "instagram" field.
	Instagram string `json:"instagram,omitempty"`
	// Youtube holds the value of the "youtube" field.
	Youtube string `json:"youtube,omitempty"`
	// Ativo holds the value of the "ativo" field.
	Ativo bool `json:"ativo,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Unidade) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case unidade.FieldAtivo:
			values[i] = new(sql.NullBool)
		case unidade.FieldID, unidade.FieldEnderecoID, unidade.FieldLatitude, unidade.FieldLongitude, unidade.FieldTelefone, unidade.FieldCelular:
			values[i] = new(sql.NullInt64)
		case unidade.FieldDescricao, unidade.FieldURLAmigavel, unidade.FieldEmail, unidade.FieldFacebook, unidade.FieldInstagram, unidade.FieldYoutube:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Unidade", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Unidade fields.
func (u *Unidade) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case unidade.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case unidade.FieldDescricao:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field descricao", values[i])
			} else if value.Valid {
				u.Descricao = value.String
			}
		case unidade.FieldURLAmigavel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url_amigavel", values[i])
			} else if value.Valid {
				u.URLAmigavel = value.String
			}
		case unidade.FieldEnderecoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field endereco_id", values[i])
			} else if value.Valid {
				u.EnderecoID = value.Int64
			}
		case unidade.FieldLatitude:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				u.Latitude = int(value.Int64)
			}
		case unidade.FieldLongitude:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				u.Longitude = int(value.Int64)
			}
		case unidade.FieldTelefone:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field telefone", values[i])
			} else if value.Valid {
				u.Telefone = value.Int64
			}
		case unidade.FieldCelular:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field celular", values[i])
			} else if value.Valid {
				u.Celular = value.Int64
			}
		case unidade.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case unidade.FieldFacebook:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field facebook", values[i])
			} else if value.Valid {
				u.Facebook = value.String
			}
		case unidade.FieldInstagram:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instagram", values[i])
			} else if value.Valid {
				u.Instagram = value.String
			}
		case unidade.FieldYoutube:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field youtube", values[i])
			} else if value.Valid {
				u.Youtube = value.String
			}
		case unidade.FieldAtivo:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ativo", values[i])
			} else if value.Valid {
				u.Ativo = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Unidade.
// Note that you need to call Unidade.Unwrap() before calling this method if this Unidade
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Unidade) Update() *UnidadeUpdateOne {
	return (&UnidadeClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the Unidade entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *Unidade) Unwrap() *Unidade {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: Unidade is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Unidade) String() string {
	var builder strings.Builder
	builder.WriteString("Unidade(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", descricao=")
	builder.WriteString(u.Descricao)
	builder.WriteString(", url_amigavel=")
	builder.WriteString(u.URLAmigavel)
	builder.WriteString(", endereco_id=")
	builder.WriteString(fmt.Sprintf("%v", u.EnderecoID))
	builder.WriteString(", latitude=")
	builder.WriteString(fmt.Sprintf("%v", u.Latitude))
	builder.WriteString(", longitude=")
	builder.WriteString(fmt.Sprintf("%v", u.Longitude))
	builder.WriteString(", telefone=")
	builder.WriteString(fmt.Sprintf("%v", u.Telefone))
	builder.WriteString(", celular=")
	builder.WriteString(fmt.Sprintf("%v", u.Celular))
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", facebook=")
	builder.WriteString(u.Facebook)
	builder.WriteString(", instagram=")
	builder.WriteString(u.Instagram)
	builder.WriteString(", youtube=")
	builder.WriteString(u.Youtube)
	builder.WriteString(", ativo=")
	builder.WriteString(fmt.Sprintf("%v", u.Ativo))
	builder.WriteByte(')')
	return builder.String()
}

// Unidades is a parsable slice of Unidade.
type Unidades []*Unidade

func (u Unidades) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
