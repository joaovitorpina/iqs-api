// Code generated by entc, DO NOT EDIT.

package unidade

import (
	"unidade/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Descricao applies equality check predicate on the "descricao" field. It's identical to DescricaoEQ.
func Descricao(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescricao), v))
	})
}

// URLAmigavel applies equality check predicate on the "url_amigavel" field. It's identical to URLAmigavelEQ.
func URLAmigavel(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURLAmigavel), v))
	})
}

// EnderecoID applies equality check predicate on the "endereco_id" field. It's identical to EnderecoIDEQ.
func EnderecoID(v int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnderecoID), v))
	})
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float32) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatitude), v))
	})
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float32) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongitude), v))
	})
}

// Telefone applies equality check predicate on the "telefone" field. It's identical to TelefoneEQ.
func Telefone(v int64) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTelefone), v))
	})
}

// Celular applies equality check predicate on the "celular" field. It's identical to CelularEQ.
func Celular(v int64) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCelular), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// Facebook applies equality check predicate on the "facebook" field. It's identical to FacebookEQ.
func Facebook(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacebook), v))
	})
}

// Instagram applies equality check predicate on the "instagram" field. It's identical to InstagramEQ.
func Instagram(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstagram), v))
	})
}

// Youtube applies equality check predicate on the "youtube" field. It's identical to YoutubeEQ.
func Youtube(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYoutube), v))
	})
}

// Ativo applies equality check predicate on the "ativo" field. It's identical to AtivoEQ.
func Ativo(v bool) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAtivo), v))
	})
}

// DescricaoEQ applies the EQ predicate on the "descricao" field.
func DescricaoEQ(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescricao), v))
	})
}

// DescricaoNEQ applies the NEQ predicate on the "descricao" field.
func DescricaoNEQ(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescricao), v))
	})
}

// DescricaoIn applies the In predicate on the "descricao" field.
func DescricaoIn(vs ...string) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescricao), v...))
	})
}

// DescricaoNotIn applies the NotIn predicate on the "descricao" field.
func DescricaoNotIn(vs ...string) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescricao), v...))
	})
}

// DescricaoGT applies the GT predicate on the "descricao" field.
func DescricaoGT(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescricao), v))
	})
}

// DescricaoGTE applies the GTE predicate on the "descricao" field.
func DescricaoGTE(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescricao), v))
	})
}

// DescricaoLT applies the LT predicate on the "descricao" field.
func DescricaoLT(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescricao), v))
	})
}

// DescricaoLTE applies the LTE predicate on the "descricao" field.
func DescricaoLTE(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescricao), v))
	})
}

// DescricaoContains applies the Contains predicate on the "descricao" field.
func DescricaoContains(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescricao), v))
	})
}

// DescricaoHasPrefix applies the HasPrefix predicate on the "descricao" field.
func DescricaoHasPrefix(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescricao), v))
	})
}

// DescricaoHasSuffix applies the HasSuffix predicate on the "descricao" field.
func DescricaoHasSuffix(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescricao), v))
	})
}

// DescricaoEqualFold applies the EqualFold predicate on the "descricao" field.
func DescricaoEqualFold(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescricao), v))
	})
}

// DescricaoContainsFold applies the ContainsFold predicate on the "descricao" field.
func DescricaoContainsFold(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescricao), v))
	})
}

// URLAmigavelEQ applies the EQ predicate on the "url_amigavel" field.
func URLAmigavelEQ(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelNEQ applies the NEQ predicate on the "url_amigavel" field.
func URLAmigavelNEQ(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelIn applies the In predicate on the "url_amigavel" field.
func URLAmigavelIn(vs ...string) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldURLAmigavel), v...))
	})
}

// URLAmigavelNotIn applies the NotIn predicate on the "url_amigavel" field.
func URLAmigavelNotIn(vs ...string) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldURLAmigavel), v...))
	})
}

// URLAmigavelGT applies the GT predicate on the "url_amigavel" field.
func URLAmigavelGT(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelGTE applies the GTE predicate on the "url_amigavel" field.
func URLAmigavelGTE(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelLT applies the LT predicate on the "url_amigavel" field.
func URLAmigavelLT(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelLTE applies the LTE predicate on the "url_amigavel" field.
func URLAmigavelLTE(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelContains applies the Contains predicate on the "url_amigavel" field.
func URLAmigavelContains(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelHasPrefix applies the HasPrefix predicate on the "url_amigavel" field.
func URLAmigavelHasPrefix(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelHasSuffix applies the HasSuffix predicate on the "url_amigavel" field.
func URLAmigavelHasSuffix(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelEqualFold applies the EqualFold predicate on the "url_amigavel" field.
func URLAmigavelEqualFold(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelContainsFold applies the ContainsFold predicate on the "url_amigavel" field.
func URLAmigavelContainsFold(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURLAmigavel), v))
	})
}

// EnderecoIDEQ applies the EQ predicate on the "endereco_id" field.
func EnderecoIDEQ(v int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnderecoID), v))
	})
}

// EnderecoIDNEQ applies the NEQ predicate on the "endereco_id" field.
func EnderecoIDNEQ(v int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnderecoID), v))
	})
}

// EnderecoIDIn applies the In predicate on the "endereco_id" field.
func EnderecoIDIn(vs ...int) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEnderecoID), v...))
	})
}

// EnderecoIDNotIn applies the NotIn predicate on the "endereco_id" field.
func EnderecoIDNotIn(vs ...int) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEnderecoID), v...))
	})
}

// EnderecoIDGT applies the GT predicate on the "endereco_id" field.
func EnderecoIDGT(v int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnderecoID), v))
	})
}

// EnderecoIDGTE applies the GTE predicate on the "endereco_id" field.
func EnderecoIDGTE(v int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnderecoID), v))
	})
}

// EnderecoIDLT applies the LT predicate on the "endereco_id" field.
func EnderecoIDLT(v int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnderecoID), v))
	})
}

// EnderecoIDLTE applies the LTE predicate on the "endereco_id" field.
func EnderecoIDLTE(v int) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnderecoID), v))
	})
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float32) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatitude), v))
	})
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float32) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLatitude), v))
	})
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float32) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLatitude), v...))
	})
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float32) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLatitude), v...))
	})
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float32) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLatitude), v))
	})
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float32) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLatitude), v))
	})
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float32) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLatitude), v))
	})
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float32) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLatitude), v))
	})
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float32) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongitude), v))
	})
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float32) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLongitude), v))
	})
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float32) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLongitude), v...))
	})
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float32) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLongitude), v...))
	})
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float32) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLongitude), v))
	})
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float32) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLongitude), v))
	})
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float32) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLongitude), v))
	})
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float32) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLongitude), v))
	})
}

// TelefoneEQ applies the EQ predicate on the "telefone" field.
func TelefoneEQ(v int64) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTelefone), v))
	})
}

// TelefoneNEQ applies the NEQ predicate on the "telefone" field.
func TelefoneNEQ(v int64) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTelefone), v))
	})
}

// TelefoneIn applies the In predicate on the "telefone" field.
func TelefoneIn(vs ...int64) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTelefone), v...))
	})
}

// TelefoneNotIn applies the NotIn predicate on the "telefone" field.
func TelefoneNotIn(vs ...int64) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTelefone), v...))
	})
}

// TelefoneGT applies the GT predicate on the "telefone" field.
func TelefoneGT(v int64) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTelefone), v))
	})
}

// TelefoneGTE applies the GTE predicate on the "telefone" field.
func TelefoneGTE(v int64) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTelefone), v))
	})
}

// TelefoneLT applies the LT predicate on the "telefone" field.
func TelefoneLT(v int64) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTelefone), v))
	})
}

// TelefoneLTE applies the LTE predicate on the "telefone" field.
func TelefoneLTE(v int64) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTelefone), v))
	})
}

// TelefoneIsNil applies the IsNil predicate on the "telefone" field.
func TelefoneIsNil() predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTelefone)))
	})
}

// TelefoneNotNil applies the NotNil predicate on the "telefone" field.
func TelefoneNotNil() predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTelefone)))
	})
}

// CelularEQ applies the EQ predicate on the "celular" field.
func CelularEQ(v int64) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCelular), v))
	})
}

// CelularNEQ applies the NEQ predicate on the "celular" field.
func CelularNEQ(v int64) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCelular), v))
	})
}

// CelularIn applies the In predicate on the "celular" field.
func CelularIn(vs ...int64) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCelular), v...))
	})
}

// CelularNotIn applies the NotIn predicate on the "celular" field.
func CelularNotIn(vs ...int64) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCelular), v...))
	})
}

// CelularGT applies the GT predicate on the "celular" field.
func CelularGT(v int64) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCelular), v))
	})
}

// CelularGTE applies the GTE predicate on the "celular" field.
func CelularGTE(v int64) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCelular), v))
	})
}

// CelularLT applies the LT predicate on the "celular" field.
func CelularLT(v int64) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCelular), v))
	})
}

// CelularLTE applies the LTE predicate on the "celular" field.
func CelularLTE(v int64) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCelular), v))
	})
}

// CelularIsNil applies the IsNil predicate on the "celular" field.
func CelularIsNil() predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCelular)))
	})
}

// CelularNotNil applies the NotNil predicate on the "celular" field.
func CelularNotNil() predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCelular)))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// FacebookEQ applies the EQ predicate on the "facebook" field.
func FacebookEQ(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacebook), v))
	})
}

// FacebookNEQ applies the NEQ predicate on the "facebook" field.
func FacebookNEQ(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFacebook), v))
	})
}

// FacebookIn applies the In predicate on the "facebook" field.
func FacebookIn(vs ...string) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFacebook), v...))
	})
}

// FacebookNotIn applies the NotIn predicate on the "facebook" field.
func FacebookNotIn(vs ...string) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFacebook), v...))
	})
}

// FacebookGT applies the GT predicate on the "facebook" field.
func FacebookGT(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFacebook), v))
	})
}

// FacebookGTE applies the GTE predicate on the "facebook" field.
func FacebookGTE(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFacebook), v))
	})
}

// FacebookLT applies the LT predicate on the "facebook" field.
func FacebookLT(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFacebook), v))
	})
}

// FacebookLTE applies the LTE predicate on the "facebook" field.
func FacebookLTE(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFacebook), v))
	})
}

// FacebookContains applies the Contains predicate on the "facebook" field.
func FacebookContains(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFacebook), v))
	})
}

// FacebookHasPrefix applies the HasPrefix predicate on the "facebook" field.
func FacebookHasPrefix(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFacebook), v))
	})
}

// FacebookHasSuffix applies the HasSuffix predicate on the "facebook" field.
func FacebookHasSuffix(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFacebook), v))
	})
}

// FacebookIsNil applies the IsNil predicate on the "facebook" field.
func FacebookIsNil() predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFacebook)))
	})
}

// FacebookNotNil applies the NotNil predicate on the "facebook" field.
func FacebookNotNil() predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFacebook)))
	})
}

// FacebookEqualFold applies the EqualFold predicate on the "facebook" field.
func FacebookEqualFold(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFacebook), v))
	})
}

// FacebookContainsFold applies the ContainsFold predicate on the "facebook" field.
func FacebookContainsFold(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFacebook), v))
	})
}

// InstagramEQ applies the EQ predicate on the "instagram" field.
func InstagramEQ(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstagram), v))
	})
}

// InstagramNEQ applies the NEQ predicate on the "instagram" field.
func InstagramNEQ(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstagram), v))
	})
}

// InstagramIn applies the In predicate on the "instagram" field.
func InstagramIn(vs ...string) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstagram), v...))
	})
}

// InstagramNotIn applies the NotIn predicate on the "instagram" field.
func InstagramNotIn(vs ...string) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstagram), v...))
	})
}

// InstagramGT applies the GT predicate on the "instagram" field.
func InstagramGT(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstagram), v))
	})
}

// InstagramGTE applies the GTE predicate on the "instagram" field.
func InstagramGTE(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstagram), v))
	})
}

// InstagramLT applies the LT predicate on the "instagram" field.
func InstagramLT(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstagram), v))
	})
}

// InstagramLTE applies the LTE predicate on the "instagram" field.
func InstagramLTE(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstagram), v))
	})
}

// InstagramContains applies the Contains predicate on the "instagram" field.
func InstagramContains(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstagram), v))
	})
}

// InstagramHasPrefix applies the HasPrefix predicate on the "instagram" field.
func InstagramHasPrefix(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstagram), v))
	})
}

// InstagramHasSuffix applies the HasSuffix predicate on the "instagram" field.
func InstagramHasSuffix(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstagram), v))
	})
}

// InstagramIsNil applies the IsNil predicate on the "instagram" field.
func InstagramIsNil() predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInstagram)))
	})
}

// InstagramNotNil applies the NotNil predicate on the "instagram" field.
func InstagramNotNil() predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInstagram)))
	})
}

// InstagramEqualFold applies the EqualFold predicate on the "instagram" field.
func InstagramEqualFold(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstagram), v))
	})
}

// InstagramContainsFold applies the ContainsFold predicate on the "instagram" field.
func InstagramContainsFold(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstagram), v))
	})
}

// YoutubeEQ applies the EQ predicate on the "youtube" field.
func YoutubeEQ(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYoutube), v))
	})
}

// YoutubeNEQ applies the NEQ predicate on the "youtube" field.
func YoutubeNEQ(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYoutube), v))
	})
}

// YoutubeIn applies the In predicate on the "youtube" field.
func YoutubeIn(vs ...string) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldYoutube), v...))
	})
}

// YoutubeNotIn applies the NotIn predicate on the "youtube" field.
func YoutubeNotIn(vs ...string) predicate.Unidade {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Unidade(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldYoutube), v...))
	})
}

// YoutubeGT applies the GT predicate on the "youtube" field.
func YoutubeGT(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYoutube), v))
	})
}

// YoutubeGTE applies the GTE predicate on the "youtube" field.
func YoutubeGTE(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYoutube), v))
	})
}

// YoutubeLT applies the LT predicate on the "youtube" field.
func YoutubeLT(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYoutube), v))
	})
}

// YoutubeLTE applies the LTE predicate on the "youtube" field.
func YoutubeLTE(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYoutube), v))
	})
}

// YoutubeContains applies the Contains predicate on the "youtube" field.
func YoutubeContains(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldYoutube), v))
	})
}

// YoutubeHasPrefix applies the HasPrefix predicate on the "youtube" field.
func YoutubeHasPrefix(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldYoutube), v))
	})
}

// YoutubeHasSuffix applies the HasSuffix predicate on the "youtube" field.
func YoutubeHasSuffix(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldYoutube), v))
	})
}

// YoutubeIsNil applies the IsNil predicate on the "youtube" field.
func YoutubeIsNil() predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldYoutube)))
	})
}

// YoutubeNotNil applies the NotNil predicate on the "youtube" field.
func YoutubeNotNil() predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldYoutube)))
	})
}

// YoutubeEqualFold applies the EqualFold predicate on the "youtube" field.
func YoutubeEqualFold(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldYoutube), v))
	})
}

// YoutubeContainsFold applies the ContainsFold predicate on the "youtube" field.
func YoutubeContainsFold(v string) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldYoutube), v))
	})
}

// AtivoEQ applies the EQ predicate on the "ativo" field.
func AtivoEQ(v bool) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAtivo), v))
	})
}

// AtivoNEQ applies the NEQ predicate on the "ativo" field.
func AtivoNEQ(v bool) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAtivo), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Unidade) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Unidade) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Unidade) predicate.Unidade {
	return predicate.Unidade(func(s *sql.Selector) {
		p(s.Not())
	})
}
