// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"unidade/ent/predicate"
	"unidade/ent/unidade"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUnidade = "Unidade"
)

// UnidadeMutation represents an operation that mutates the Unidade nodes in the graph.
type UnidadeMutation struct {
	config
	op             Op
	typ            string
	id             *int
	descricao      *string
	url_amigavel   *string
	endereco_id    *int64
	addendereco_id *int64
	latitude       *int
	addlatitude    *int
	longitude      *int
	addlongitude   *int
	telefone       *int64
	addtelefone    *int64
	celular        *int64
	addcelular     *int64
	email          *string
	facebook       *string
	instagram      *string
	youtube        *string
	ativo          *bool
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Unidade, error)
	predicates     []predicate.Unidade
}

var _ ent.Mutation = (*UnidadeMutation)(nil)

// unidadeOption allows management of the mutation configuration using functional options.
type unidadeOption func(*UnidadeMutation)

// newUnidadeMutation creates new mutation for the Unidade entity.
func newUnidadeMutation(c config, op Op, opts ...unidadeOption) *UnidadeMutation {
	m := &UnidadeMutation{
		config:        c,
		op:            op,
		typ:           TypeUnidade,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUnidadeID sets the ID field of the mutation.
func withUnidadeID(id int) unidadeOption {
	return func(m *UnidadeMutation) {
		var (
			err   error
			once  sync.Once
			value *Unidade
		)
		m.oldValue = func(ctx context.Context) (*Unidade, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Unidade.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUnidade sets the old Unidade of the mutation.
func withUnidade(node *Unidade) unidadeOption {
	return func(m *UnidadeMutation) {
		m.oldValue = func(context.Context) (*Unidade, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UnidadeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UnidadeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UnidadeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UnidadeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Unidade.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDescricao sets the "descricao" field.
func (m *UnidadeMutation) SetDescricao(s string) {
	m.descricao = &s
}

// Descricao returns the value of the "descricao" field in the mutation.
func (m *UnidadeMutation) Descricao() (r string, exists bool) {
	v := m.descricao
	if v == nil {
		return
	}
	return *v, true
}

// OldDescricao returns the old "descricao" field's value of the Unidade entity.
// If the Unidade object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnidadeMutation) OldDescricao(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescricao is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescricao requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescricao: %w", err)
	}
	return oldValue.Descricao, nil
}

// ResetDescricao resets all changes to the "descricao" field.
func (m *UnidadeMutation) ResetDescricao() {
	m.descricao = nil
}

// SetURLAmigavel sets the "url_amigavel" field.
func (m *UnidadeMutation) SetURLAmigavel(s string) {
	m.url_amigavel = &s
}

// URLAmigavel returns the value of the "url_amigavel" field in the mutation.
func (m *UnidadeMutation) URLAmigavel() (r string, exists bool) {
	v := m.url_amigavel
	if v == nil {
		return
	}
	return *v, true
}

// OldURLAmigavel returns the old "url_amigavel" field's value of the Unidade entity.
// If the Unidade object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnidadeMutation) OldURLAmigavel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURLAmigavel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURLAmigavel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURLAmigavel: %w", err)
	}
	return oldValue.URLAmigavel, nil
}

// ResetURLAmigavel resets all changes to the "url_amigavel" field.
func (m *UnidadeMutation) ResetURLAmigavel() {
	m.url_amigavel = nil
}

// SetEnderecoID sets the "endereco_id" field.
func (m *UnidadeMutation) SetEnderecoID(i int64) {
	m.endereco_id = &i
	m.addendereco_id = nil
}

// EnderecoID returns the value of the "endereco_id" field in the mutation.
func (m *UnidadeMutation) EnderecoID() (r int64, exists bool) {
	v := m.endereco_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnderecoID returns the old "endereco_id" field's value of the Unidade entity.
// If the Unidade object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnidadeMutation) OldEnderecoID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnderecoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnderecoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnderecoID: %w", err)
	}
	return oldValue.EnderecoID, nil
}

// AddEnderecoID adds i to the "endereco_id" field.
func (m *UnidadeMutation) AddEnderecoID(i int64) {
	if m.addendereco_id != nil {
		*m.addendereco_id += i
	} else {
		m.addendereco_id = &i
	}
}

// AddedEnderecoID returns the value that was added to the "endereco_id" field in this mutation.
func (m *UnidadeMutation) AddedEnderecoID() (r int64, exists bool) {
	v := m.addendereco_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetEnderecoID resets all changes to the "endereco_id" field.
func (m *UnidadeMutation) ResetEnderecoID() {
	m.endereco_id = nil
	m.addendereco_id = nil
}

// SetLatitude sets the "latitude" field.
func (m *UnidadeMutation) SetLatitude(i int) {
	m.latitude = &i
	m.addlatitude = nil
}

// Latitude returns the value of the "latitude" field in the mutation.
func (m *UnidadeMutation) Latitude() (r int, exists bool) {
	v := m.latitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLatitude returns the old "latitude" field's value of the Unidade entity.
// If the Unidade object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnidadeMutation) OldLatitude(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatitude: %w", err)
	}
	return oldValue.Latitude, nil
}

// AddLatitude adds i to the "latitude" field.
func (m *UnidadeMutation) AddLatitude(i int) {
	if m.addlatitude != nil {
		*m.addlatitude += i
	} else {
		m.addlatitude = &i
	}
}

// AddedLatitude returns the value that was added to the "latitude" field in this mutation.
func (m *UnidadeMutation) AddedLatitude() (r int, exists bool) {
	v := m.addlatitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLatitude resets all changes to the "latitude" field.
func (m *UnidadeMutation) ResetLatitude() {
	m.latitude = nil
	m.addlatitude = nil
}

// SetLongitude sets the "longitude" field.
func (m *UnidadeMutation) SetLongitude(i int) {
	m.longitude = &i
	m.addlongitude = nil
}

// Longitude returns the value of the "longitude" field in the mutation.
func (m *UnidadeMutation) Longitude() (r int, exists bool) {
	v := m.longitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitude returns the old "longitude" field's value of the Unidade entity.
// If the Unidade object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnidadeMutation) OldLongitude(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitude: %w", err)
	}
	return oldValue.Longitude, nil
}

// AddLongitude adds i to the "longitude" field.
func (m *UnidadeMutation) AddLongitude(i int) {
	if m.addlongitude != nil {
		*m.addlongitude += i
	} else {
		m.addlongitude = &i
	}
}

// AddedLongitude returns the value that was added to the "longitude" field in this mutation.
func (m *UnidadeMutation) AddedLongitude() (r int, exists bool) {
	v := m.addlongitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLongitude resets all changes to the "longitude" field.
func (m *UnidadeMutation) ResetLongitude() {
	m.longitude = nil
	m.addlongitude = nil
}

// SetTelefone sets the "telefone" field.
func (m *UnidadeMutation) SetTelefone(i int64) {
	m.telefone = &i
	m.addtelefone = nil
}

// Telefone returns the value of the "telefone" field in the mutation.
func (m *UnidadeMutation) Telefone() (r int64, exists bool) {
	v := m.telefone
	if v == nil {
		return
	}
	return *v, true
}

// OldTelefone returns the old "telefone" field's value of the Unidade entity.
// If the Unidade object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnidadeMutation) OldTelefone(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTelefone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTelefone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTelefone: %w", err)
	}
	return oldValue.Telefone, nil
}

// AddTelefone adds i to the "telefone" field.
func (m *UnidadeMutation) AddTelefone(i int64) {
	if m.addtelefone != nil {
		*m.addtelefone += i
	} else {
		m.addtelefone = &i
	}
}

// AddedTelefone returns the value that was added to the "telefone" field in this mutation.
func (m *UnidadeMutation) AddedTelefone() (r int64, exists bool) {
	v := m.addtelefone
	if v == nil {
		return
	}
	return *v, true
}

// ClearTelefone clears the value of the "telefone" field.
func (m *UnidadeMutation) ClearTelefone() {
	m.telefone = nil
	m.addtelefone = nil
	m.clearedFields[unidade.FieldTelefone] = struct{}{}
}

// TelefoneCleared returns if the "telefone" field was cleared in this mutation.
func (m *UnidadeMutation) TelefoneCleared() bool {
	_, ok := m.clearedFields[unidade.FieldTelefone]
	return ok
}

// ResetTelefone resets all changes to the "telefone" field.
func (m *UnidadeMutation) ResetTelefone() {
	m.telefone = nil
	m.addtelefone = nil
	delete(m.clearedFields, unidade.FieldTelefone)
}

// SetCelular sets the "celular" field.
func (m *UnidadeMutation) SetCelular(i int64) {
	m.celular = &i
	m.addcelular = nil
}

// Celular returns the value of the "celular" field in the mutation.
func (m *UnidadeMutation) Celular() (r int64, exists bool) {
	v := m.celular
	if v == nil {
		return
	}
	return *v, true
}

// OldCelular returns the old "celular" field's value of the Unidade entity.
// If the Unidade object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnidadeMutation) OldCelular(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCelular is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCelular requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCelular: %w", err)
	}
	return oldValue.Celular, nil
}

// AddCelular adds i to the "celular" field.
func (m *UnidadeMutation) AddCelular(i int64) {
	if m.addcelular != nil {
		*m.addcelular += i
	} else {
		m.addcelular = &i
	}
}

// AddedCelular returns the value that was added to the "celular" field in this mutation.
func (m *UnidadeMutation) AddedCelular() (r int64, exists bool) {
	v := m.addcelular
	if v == nil {
		return
	}
	return *v, true
}

// ClearCelular clears the value of the "celular" field.
func (m *UnidadeMutation) ClearCelular() {
	m.celular = nil
	m.addcelular = nil
	m.clearedFields[unidade.FieldCelular] = struct{}{}
}

// CelularCleared returns if the "celular" field was cleared in this mutation.
func (m *UnidadeMutation) CelularCleared() bool {
	_, ok := m.clearedFields[unidade.FieldCelular]
	return ok
}

// ResetCelular resets all changes to the "celular" field.
func (m *UnidadeMutation) ResetCelular() {
	m.celular = nil
	m.addcelular = nil
	delete(m.clearedFields, unidade.FieldCelular)
}

// SetEmail sets the "email" field.
func (m *UnidadeMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UnidadeMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Unidade entity.
// If the Unidade object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnidadeMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UnidadeMutation) ResetEmail() {
	m.email = nil
}

// SetFacebook sets the "facebook" field.
func (m *UnidadeMutation) SetFacebook(s string) {
	m.facebook = &s
}

// Facebook returns the value of the "facebook" field in the mutation.
func (m *UnidadeMutation) Facebook() (r string, exists bool) {
	v := m.facebook
	if v == nil {
		return
	}
	return *v, true
}

// OldFacebook returns the old "facebook" field's value of the Unidade entity.
// If the Unidade object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnidadeMutation) OldFacebook(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFacebook is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFacebook requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFacebook: %w", err)
	}
	return oldValue.Facebook, nil
}

// ClearFacebook clears the value of the "facebook" field.
func (m *UnidadeMutation) ClearFacebook() {
	m.facebook = nil
	m.clearedFields[unidade.FieldFacebook] = struct{}{}
}

// FacebookCleared returns if the "facebook" field was cleared in this mutation.
func (m *UnidadeMutation) FacebookCleared() bool {
	_, ok := m.clearedFields[unidade.FieldFacebook]
	return ok
}

// ResetFacebook resets all changes to the "facebook" field.
func (m *UnidadeMutation) ResetFacebook() {
	m.facebook = nil
	delete(m.clearedFields, unidade.FieldFacebook)
}

// SetInstagram sets the "instagram" field.
func (m *UnidadeMutation) SetInstagram(s string) {
	m.instagram = &s
}

// Instagram returns the value of the "instagram" field in the mutation.
func (m *UnidadeMutation) Instagram() (r string, exists bool) {
	v := m.instagram
	if v == nil {
		return
	}
	return *v, true
}

// OldInstagram returns the old "instagram" field's value of the Unidade entity.
// If the Unidade object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnidadeMutation) OldInstagram(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstagram is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstagram requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstagram: %w", err)
	}
	return oldValue.Instagram, nil
}

// ClearInstagram clears the value of the "instagram" field.
func (m *UnidadeMutation) ClearInstagram() {
	m.instagram = nil
	m.clearedFields[unidade.FieldInstagram] = struct{}{}
}

// InstagramCleared returns if the "instagram" field was cleared in this mutation.
func (m *UnidadeMutation) InstagramCleared() bool {
	_, ok := m.clearedFields[unidade.FieldInstagram]
	return ok
}

// ResetInstagram resets all changes to the "instagram" field.
func (m *UnidadeMutation) ResetInstagram() {
	m.instagram = nil
	delete(m.clearedFields, unidade.FieldInstagram)
}

// SetYoutube sets the "youtube" field.
func (m *UnidadeMutation) SetYoutube(s string) {
	m.youtube = &s
}

// Youtube returns the value of the "youtube" field in the mutation.
func (m *UnidadeMutation) Youtube() (r string, exists bool) {
	v := m.youtube
	if v == nil {
		return
	}
	return *v, true
}

// OldYoutube returns the old "youtube" field's value of the Unidade entity.
// If the Unidade object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnidadeMutation) OldYoutube(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYoutube is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYoutube requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYoutube: %w", err)
	}
	return oldValue.Youtube, nil
}

// ClearYoutube clears the value of the "youtube" field.
func (m *UnidadeMutation) ClearYoutube() {
	m.youtube = nil
	m.clearedFields[unidade.FieldYoutube] = struct{}{}
}

// YoutubeCleared returns if the "youtube" field was cleared in this mutation.
func (m *UnidadeMutation) YoutubeCleared() bool {
	_, ok := m.clearedFields[unidade.FieldYoutube]
	return ok
}

// ResetYoutube resets all changes to the "youtube" field.
func (m *UnidadeMutation) ResetYoutube() {
	m.youtube = nil
	delete(m.clearedFields, unidade.FieldYoutube)
}

// SetAtivo sets the "ativo" field.
func (m *UnidadeMutation) SetAtivo(b bool) {
	m.ativo = &b
}

// Ativo returns the value of the "ativo" field in the mutation.
func (m *UnidadeMutation) Ativo() (r bool, exists bool) {
	v := m.ativo
	if v == nil {
		return
	}
	return *v, true
}

// OldAtivo returns the old "ativo" field's value of the Unidade entity.
// If the Unidade object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UnidadeMutation) OldAtivo(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAtivo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAtivo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAtivo: %w", err)
	}
	return oldValue.Ativo, nil
}

// ResetAtivo resets all changes to the "ativo" field.
func (m *UnidadeMutation) ResetAtivo() {
	m.ativo = nil
}

// Where appends a list predicates to the UnidadeMutation builder.
func (m *UnidadeMutation) Where(ps ...predicate.Unidade) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UnidadeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Unidade).
func (m *UnidadeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UnidadeMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.descricao != nil {
		fields = append(fields, unidade.FieldDescricao)
	}
	if m.url_amigavel != nil {
		fields = append(fields, unidade.FieldURLAmigavel)
	}
	if m.endereco_id != nil {
		fields = append(fields, unidade.FieldEnderecoID)
	}
	if m.latitude != nil {
		fields = append(fields, unidade.FieldLatitude)
	}
	if m.longitude != nil {
		fields = append(fields, unidade.FieldLongitude)
	}
	if m.telefone != nil {
		fields = append(fields, unidade.FieldTelefone)
	}
	if m.celular != nil {
		fields = append(fields, unidade.FieldCelular)
	}
	if m.email != nil {
		fields = append(fields, unidade.FieldEmail)
	}
	if m.facebook != nil {
		fields = append(fields, unidade.FieldFacebook)
	}
	if m.instagram != nil {
		fields = append(fields, unidade.FieldInstagram)
	}
	if m.youtube != nil {
		fields = append(fields, unidade.FieldYoutube)
	}
	if m.ativo != nil {
		fields = append(fields, unidade.FieldAtivo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UnidadeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case unidade.FieldDescricao:
		return m.Descricao()
	case unidade.FieldURLAmigavel:
		return m.URLAmigavel()
	case unidade.FieldEnderecoID:
		return m.EnderecoID()
	case unidade.FieldLatitude:
		return m.Latitude()
	case unidade.FieldLongitude:
		return m.Longitude()
	case unidade.FieldTelefone:
		return m.Telefone()
	case unidade.FieldCelular:
		return m.Celular()
	case unidade.FieldEmail:
		return m.Email()
	case unidade.FieldFacebook:
		return m.Facebook()
	case unidade.FieldInstagram:
		return m.Instagram()
	case unidade.FieldYoutube:
		return m.Youtube()
	case unidade.FieldAtivo:
		return m.Ativo()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UnidadeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case unidade.FieldDescricao:
		return m.OldDescricao(ctx)
	case unidade.FieldURLAmigavel:
		return m.OldURLAmigavel(ctx)
	case unidade.FieldEnderecoID:
		return m.OldEnderecoID(ctx)
	case unidade.FieldLatitude:
		return m.OldLatitude(ctx)
	case unidade.FieldLongitude:
		return m.OldLongitude(ctx)
	case unidade.FieldTelefone:
		return m.OldTelefone(ctx)
	case unidade.FieldCelular:
		return m.OldCelular(ctx)
	case unidade.FieldEmail:
		return m.OldEmail(ctx)
	case unidade.FieldFacebook:
		return m.OldFacebook(ctx)
	case unidade.FieldInstagram:
		return m.OldInstagram(ctx)
	case unidade.FieldYoutube:
		return m.OldYoutube(ctx)
	case unidade.FieldAtivo:
		return m.OldAtivo(ctx)
	}
	return nil, fmt.Errorf("unknown Unidade field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UnidadeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case unidade.FieldDescricao:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescricao(v)
		return nil
	case unidade.FieldURLAmigavel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURLAmigavel(v)
		return nil
	case unidade.FieldEnderecoID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnderecoID(v)
		return nil
	case unidade.FieldLatitude:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatitude(v)
		return nil
	case unidade.FieldLongitude:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitude(v)
		return nil
	case unidade.FieldTelefone:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelefone(v)
		return nil
	case unidade.FieldCelular:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCelular(v)
		return nil
	case unidade.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case unidade.FieldFacebook:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFacebook(v)
		return nil
	case unidade.FieldInstagram:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstagram(v)
		return nil
	case unidade.FieldYoutube:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYoutube(v)
		return nil
	case unidade.FieldAtivo:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAtivo(v)
		return nil
	}
	return fmt.Errorf("unknown Unidade field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UnidadeMutation) AddedFields() []string {
	var fields []string
	if m.addendereco_id != nil {
		fields = append(fields, unidade.FieldEnderecoID)
	}
	if m.addlatitude != nil {
		fields = append(fields, unidade.FieldLatitude)
	}
	if m.addlongitude != nil {
		fields = append(fields, unidade.FieldLongitude)
	}
	if m.addtelefone != nil {
		fields = append(fields, unidade.FieldTelefone)
	}
	if m.addcelular != nil {
		fields = append(fields, unidade.FieldCelular)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UnidadeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case unidade.FieldEnderecoID:
		return m.AddedEnderecoID()
	case unidade.FieldLatitude:
		return m.AddedLatitude()
	case unidade.FieldLongitude:
		return m.AddedLongitude()
	case unidade.FieldTelefone:
		return m.AddedTelefone()
	case unidade.FieldCelular:
		return m.AddedCelular()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UnidadeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case unidade.FieldEnderecoID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEnderecoID(v)
		return nil
	case unidade.FieldLatitude:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatitude(v)
		return nil
	case unidade.FieldLongitude:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongitude(v)
		return nil
	case unidade.FieldTelefone:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTelefone(v)
		return nil
	case unidade.FieldCelular:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCelular(v)
		return nil
	}
	return fmt.Errorf("unknown Unidade numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UnidadeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(unidade.FieldTelefone) {
		fields = append(fields, unidade.FieldTelefone)
	}
	if m.FieldCleared(unidade.FieldCelular) {
		fields = append(fields, unidade.FieldCelular)
	}
	if m.FieldCleared(unidade.FieldFacebook) {
		fields = append(fields, unidade.FieldFacebook)
	}
	if m.FieldCleared(unidade.FieldInstagram) {
		fields = append(fields, unidade.FieldInstagram)
	}
	if m.FieldCleared(unidade.FieldYoutube) {
		fields = append(fields, unidade.FieldYoutube)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UnidadeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UnidadeMutation) ClearField(name string) error {
	switch name {
	case unidade.FieldTelefone:
		m.ClearTelefone()
		return nil
	case unidade.FieldCelular:
		m.ClearCelular()
		return nil
	case unidade.FieldFacebook:
		m.ClearFacebook()
		return nil
	case unidade.FieldInstagram:
		m.ClearInstagram()
		return nil
	case unidade.FieldYoutube:
		m.ClearYoutube()
		return nil
	}
	return fmt.Errorf("unknown Unidade nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UnidadeMutation) ResetField(name string) error {
	switch name {
	case unidade.FieldDescricao:
		m.ResetDescricao()
		return nil
	case unidade.FieldURLAmigavel:
		m.ResetURLAmigavel()
		return nil
	case unidade.FieldEnderecoID:
		m.ResetEnderecoID()
		return nil
	case unidade.FieldLatitude:
		m.ResetLatitude()
		return nil
	case unidade.FieldLongitude:
		m.ResetLongitude()
		return nil
	case unidade.FieldTelefone:
		m.ResetTelefone()
		return nil
	case unidade.FieldCelular:
		m.ResetCelular()
		return nil
	case unidade.FieldEmail:
		m.ResetEmail()
		return nil
	case unidade.FieldFacebook:
		m.ResetFacebook()
		return nil
	case unidade.FieldInstagram:
		m.ResetInstagram()
		return nil
	case unidade.FieldYoutube:
		m.ResetYoutube()
		return nil
	case unidade.FieldAtivo:
		m.ResetAtivo()
		return nil
	}
	return fmt.Errorf("unknown Unidade field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UnidadeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UnidadeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UnidadeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UnidadeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UnidadeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UnidadeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UnidadeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Unidade unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UnidadeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Unidade edge %s", name)
}
