// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"unidade/ent/unidade"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UnidadeCreate is the builder for creating a Unidade entity.
type UnidadeCreate struct {
	config
	mutation *UnidadeMutation
	hooks    []Hook
}

// SetDescricao sets the "descricao" field.
func (uc *UnidadeCreate) SetDescricao(s string) *UnidadeCreate {
	uc.mutation.SetDescricao(s)
	return uc
}

// SetURLAmigavel sets the "url_amigavel" field.
func (uc *UnidadeCreate) SetURLAmigavel(s string) *UnidadeCreate {
	uc.mutation.SetURLAmigavel(s)
	return uc
}

// SetEnderecoID sets the "endereco_id" field.
func (uc *UnidadeCreate) SetEnderecoID(i int) *UnidadeCreate {
	uc.mutation.SetEnderecoID(i)
	return uc
}

// SetLatitude sets the "latitude" field.
func (uc *UnidadeCreate) SetLatitude(f float32) *UnidadeCreate {
	uc.mutation.SetLatitude(f)
	return uc
}

// SetLongitude sets the "longitude" field.
func (uc *UnidadeCreate) SetLongitude(f float32) *UnidadeCreate {
	uc.mutation.SetLongitude(f)
	return uc
}

// SetTelefone sets the "telefone" field.
func (uc *UnidadeCreate) SetTelefone(i int64) *UnidadeCreate {
	uc.mutation.SetTelefone(i)
	return uc
}

// SetNillableTelefone sets the "telefone" field if the given value is not nil.
func (uc *UnidadeCreate) SetNillableTelefone(i *int64) *UnidadeCreate {
	if i != nil {
		uc.SetTelefone(*i)
	}
	return uc
}

// SetCelular sets the "celular" field.
func (uc *UnidadeCreate) SetCelular(i int64) *UnidadeCreate {
	uc.mutation.SetCelular(i)
	return uc
}

// SetNillableCelular sets the "celular" field if the given value is not nil.
func (uc *UnidadeCreate) SetNillableCelular(i *int64) *UnidadeCreate {
	if i != nil {
		uc.SetCelular(*i)
	}
	return uc
}

// SetEmail sets the "email" field.
func (uc *UnidadeCreate) SetEmail(s string) *UnidadeCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetFacebook sets the "facebook" field.
func (uc *UnidadeCreate) SetFacebook(s string) *UnidadeCreate {
	uc.mutation.SetFacebook(s)
	return uc
}

// SetNillableFacebook sets the "facebook" field if the given value is not nil.
func (uc *UnidadeCreate) SetNillableFacebook(s *string) *UnidadeCreate {
	if s != nil {
		uc.SetFacebook(*s)
	}
	return uc
}

// SetInstagram sets the "instagram" field.
func (uc *UnidadeCreate) SetInstagram(s string) *UnidadeCreate {
	uc.mutation.SetInstagram(s)
	return uc
}

// SetNillableInstagram sets the "instagram" field if the given value is not nil.
func (uc *UnidadeCreate) SetNillableInstagram(s *string) *UnidadeCreate {
	if s != nil {
		uc.SetInstagram(*s)
	}
	return uc
}

// SetYoutube sets the "youtube" field.
func (uc *UnidadeCreate) SetYoutube(s string) *UnidadeCreate {
	uc.mutation.SetYoutube(s)
	return uc
}

// SetNillableYoutube sets the "youtube" field if the given value is not nil.
func (uc *UnidadeCreate) SetNillableYoutube(s *string) *UnidadeCreate {
	if s != nil {
		uc.SetYoutube(*s)
	}
	return uc
}

// SetAtivo sets the "ativo" field.
func (uc *UnidadeCreate) SetAtivo(b bool) *UnidadeCreate {
	uc.mutation.SetAtivo(b)
	return uc
}

// Mutation returns the UnidadeMutation object of the builder.
func (uc *UnidadeCreate) Mutation() *UnidadeMutation {
	return uc.mutation
}

// Save creates the Unidade in the database.
func (uc *UnidadeCreate) Save(ctx context.Context) (*Unidade, error) {
	var (
		err  error
		node *Unidade
	)
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnidadeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			if node, err = uc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			if uc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UnidadeCreate) SaveX(ctx context.Context) *Unidade {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UnidadeCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UnidadeCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UnidadeCreate) check() error {
	if _, ok := uc.mutation.Descricao(); !ok {
		return &ValidationError{Name: "descricao", err: errors.New(`ent: missing required field "Unidade.descricao"`)}
	}
	if _, ok := uc.mutation.URLAmigavel(); !ok {
		return &ValidationError{Name: "url_amigavel", err: errors.New(`ent: missing required field "Unidade.url_amigavel"`)}
	}
	if _, ok := uc.mutation.EnderecoID(); !ok {
		return &ValidationError{Name: "endereco_id", err: errors.New(`ent: missing required field "Unidade.endereco_id"`)}
	}
	if _, ok := uc.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "Unidade.latitude"`)}
	}
	if _, ok := uc.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "Unidade.longitude"`)}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Unidade.email"`)}
	}
	if _, ok := uc.mutation.Ativo(); !ok {
		return &ValidationError{Name: "ativo", err: errors.New(`ent: missing required field "Unidade.ativo"`)}
	}
	return nil
}

func (uc *UnidadeCreate) sqlSave(ctx context.Context) (*Unidade, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uc *UnidadeCreate) createSpec() (*Unidade, *sqlgraph.CreateSpec) {
	var (
		_node = &Unidade{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: unidade.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unidade.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.Descricao(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldDescricao,
		})
		_node.Descricao = value
	}
	if value, ok := uc.mutation.URLAmigavel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldURLAmigavel,
		})
		_node.URLAmigavel = value
	}
	if value, ok := uc.mutation.EnderecoID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: unidade.FieldEnderecoID,
		})
		_node.EnderecoID = value
	}
	if value, ok := uc.mutation.Latitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: unidade.FieldLatitude,
		})
		_node.Latitude = value
	}
	if value, ok := uc.mutation.Longitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: unidade.FieldLongitude,
		})
		_node.Longitude = value
	}
	if value, ok := uc.mutation.Telefone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: unidade.FieldTelefone,
		})
		_node.Telefone = value
	}
	if value, ok := uc.mutation.Celular(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: unidade.FieldCelular,
		})
		_node.Celular = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := uc.mutation.Facebook(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldFacebook,
		})
		_node.Facebook = value
	}
	if value, ok := uc.mutation.Instagram(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldInstagram,
		})
		_node.Instagram = value
	}
	if value, ok := uc.mutation.Youtube(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldYoutube,
		})
		_node.Youtube = value
	}
	if value, ok := uc.mutation.Ativo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: unidade.FieldAtivo,
		})
		_node.Ativo = value
	}
	return _node, _spec
}

// UnidadeCreateBulk is the builder for creating many Unidade entities in bulk.
type UnidadeCreateBulk struct {
	config
	builders []*UnidadeCreate
}

// Save creates the Unidade entities in the database.
func (ucb *UnidadeCreateBulk) Save(ctx context.Context) ([]*Unidade, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Unidade, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UnidadeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UnidadeCreateBulk) SaveX(ctx context.Context) []*Unidade {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UnidadeCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UnidadeCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
