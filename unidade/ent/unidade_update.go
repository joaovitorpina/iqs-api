// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"unidade/ent/predicate"
	"unidade/ent/unidade"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UnidadeUpdate is the builder for updating Unidade entities.
type UnidadeUpdate struct {
	config
	hooks    []Hook
	mutation *UnidadeMutation
}

// Where appends a list predicates to the UnidadeUpdate builder.
func (uu *UnidadeUpdate) Where(ps ...predicate.Unidade) *UnidadeUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetDescricao sets the "descricao" field.
func (uu *UnidadeUpdate) SetDescricao(s string) *UnidadeUpdate {
	uu.mutation.SetDescricao(s)
	return uu
}

// SetURLAmigavel sets the "url_amigavel" field.
func (uu *UnidadeUpdate) SetURLAmigavel(s string) *UnidadeUpdate {
	uu.mutation.SetURLAmigavel(s)
	return uu
}

// SetEnderecoID sets the "endereco_id" field.
func (uu *UnidadeUpdate) SetEnderecoID(i int) *UnidadeUpdate {
	uu.mutation.ResetEnderecoID()
	uu.mutation.SetEnderecoID(i)
	return uu
}

// AddEnderecoID adds i to the "endereco_id" field.
func (uu *UnidadeUpdate) AddEnderecoID(i int) *UnidadeUpdate {
	uu.mutation.AddEnderecoID(i)
	return uu
}

// SetLatitude sets the "latitude" field.
func (uu *UnidadeUpdate) SetLatitude(f float32) *UnidadeUpdate {
	uu.mutation.ResetLatitude()
	uu.mutation.SetLatitude(f)
	return uu
}

// AddLatitude adds f to the "latitude" field.
func (uu *UnidadeUpdate) AddLatitude(f float32) *UnidadeUpdate {
	uu.mutation.AddLatitude(f)
	return uu
}

// SetLongitude sets the "longitude" field.
func (uu *UnidadeUpdate) SetLongitude(f float32) *UnidadeUpdate {
	uu.mutation.ResetLongitude()
	uu.mutation.SetLongitude(f)
	return uu
}

// AddLongitude adds f to the "longitude" field.
func (uu *UnidadeUpdate) AddLongitude(f float32) *UnidadeUpdate {
	uu.mutation.AddLongitude(f)
	return uu
}

// SetTelefone sets the "telefone" field.
func (uu *UnidadeUpdate) SetTelefone(i int64) *UnidadeUpdate {
	uu.mutation.ResetTelefone()
	uu.mutation.SetTelefone(i)
	return uu
}

// SetNillableTelefone sets the "telefone" field if the given value is not nil.
func (uu *UnidadeUpdate) SetNillableTelefone(i *int64) *UnidadeUpdate {
	if i != nil {
		uu.SetTelefone(*i)
	}
	return uu
}

// AddTelefone adds i to the "telefone" field.
func (uu *UnidadeUpdate) AddTelefone(i int64) *UnidadeUpdate {
	uu.mutation.AddTelefone(i)
	return uu
}

// ClearTelefone clears the value of the "telefone" field.
func (uu *UnidadeUpdate) ClearTelefone() *UnidadeUpdate {
	uu.mutation.ClearTelefone()
	return uu
}

// SetCelular sets the "celular" field.
func (uu *UnidadeUpdate) SetCelular(i int64) *UnidadeUpdate {
	uu.mutation.ResetCelular()
	uu.mutation.SetCelular(i)
	return uu
}

// SetNillableCelular sets the "celular" field if the given value is not nil.
func (uu *UnidadeUpdate) SetNillableCelular(i *int64) *UnidadeUpdate {
	if i != nil {
		uu.SetCelular(*i)
	}
	return uu
}

// AddCelular adds i to the "celular" field.
func (uu *UnidadeUpdate) AddCelular(i int64) *UnidadeUpdate {
	uu.mutation.AddCelular(i)
	return uu
}

// ClearCelular clears the value of the "celular" field.
func (uu *UnidadeUpdate) ClearCelular() *UnidadeUpdate {
	uu.mutation.ClearCelular()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UnidadeUpdate) SetEmail(s string) *UnidadeUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetFacebook sets the "facebook" field.
func (uu *UnidadeUpdate) SetFacebook(s string) *UnidadeUpdate {
	uu.mutation.SetFacebook(s)
	return uu
}

// SetNillableFacebook sets the "facebook" field if the given value is not nil.
func (uu *UnidadeUpdate) SetNillableFacebook(s *string) *UnidadeUpdate {
	if s != nil {
		uu.SetFacebook(*s)
	}
	return uu
}

// ClearFacebook clears the value of the "facebook" field.
func (uu *UnidadeUpdate) ClearFacebook() *UnidadeUpdate {
	uu.mutation.ClearFacebook()
	return uu
}

// SetInstagram sets the "instagram" field.
func (uu *UnidadeUpdate) SetInstagram(s string) *UnidadeUpdate {
	uu.mutation.SetInstagram(s)
	return uu
}

// SetNillableInstagram sets the "instagram" field if the given value is not nil.
func (uu *UnidadeUpdate) SetNillableInstagram(s *string) *UnidadeUpdate {
	if s != nil {
		uu.SetInstagram(*s)
	}
	return uu
}

// ClearInstagram clears the value of the "instagram" field.
func (uu *UnidadeUpdate) ClearInstagram() *UnidadeUpdate {
	uu.mutation.ClearInstagram()
	return uu
}

// SetYoutube sets the "youtube" field.
func (uu *UnidadeUpdate) SetYoutube(s string) *UnidadeUpdate {
	uu.mutation.SetYoutube(s)
	return uu
}

// SetNillableYoutube sets the "youtube" field if the given value is not nil.
func (uu *UnidadeUpdate) SetNillableYoutube(s *string) *UnidadeUpdate {
	if s != nil {
		uu.SetYoutube(*s)
	}
	return uu
}

// ClearYoutube clears the value of the "youtube" field.
func (uu *UnidadeUpdate) ClearYoutube() *UnidadeUpdate {
	uu.mutation.ClearYoutube()
	return uu
}

// SetAtivo sets the "ativo" field.
func (uu *UnidadeUpdate) SetAtivo(b bool) *UnidadeUpdate {
	uu.mutation.SetAtivo(b)
	return uu
}

// Mutation returns the UnidadeMutation object of the builder.
func (uu *UnidadeUpdate) Mutation() *UnidadeMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UnidadeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnidadeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UnidadeUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UnidadeUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UnidadeUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UnidadeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   unidade.Table,
			Columns: unidade.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unidade.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Descricao(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldDescricao,
		})
	}
	if value, ok := uu.mutation.URLAmigavel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldURLAmigavel,
		})
	}
	if value, ok := uu.mutation.EnderecoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: unidade.FieldEnderecoID,
		})
	}
	if value, ok := uu.mutation.AddedEnderecoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: unidade.FieldEnderecoID,
		})
	}
	if value, ok := uu.mutation.Latitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: unidade.FieldLatitude,
		})
	}
	if value, ok := uu.mutation.AddedLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: unidade.FieldLatitude,
		})
	}
	if value, ok := uu.mutation.Longitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: unidade.FieldLongitude,
		})
	}
	if value, ok := uu.mutation.AddedLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: unidade.FieldLongitude,
		})
	}
	if value, ok := uu.mutation.Telefone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: unidade.FieldTelefone,
		})
	}
	if value, ok := uu.mutation.AddedTelefone(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: unidade.FieldTelefone,
		})
	}
	if uu.mutation.TelefoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: unidade.FieldTelefone,
		})
	}
	if value, ok := uu.mutation.Celular(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: unidade.FieldCelular,
		})
	}
	if value, ok := uu.mutation.AddedCelular(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: unidade.FieldCelular,
		})
	}
	if uu.mutation.CelularCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: unidade.FieldCelular,
		})
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldEmail,
		})
	}
	if value, ok := uu.mutation.Facebook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldFacebook,
		})
	}
	if uu.mutation.FacebookCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: unidade.FieldFacebook,
		})
	}
	if value, ok := uu.mutation.Instagram(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldInstagram,
		})
	}
	if uu.mutation.InstagramCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: unidade.FieldInstagram,
		})
	}
	if value, ok := uu.mutation.Youtube(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldYoutube,
		})
	}
	if uu.mutation.YoutubeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: unidade.FieldYoutube,
		})
	}
	if value, ok := uu.mutation.Ativo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: unidade.FieldAtivo,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unidade.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UnidadeUpdateOne is the builder for updating a single Unidade entity.
type UnidadeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UnidadeMutation
}

// SetDescricao sets the "descricao" field.
func (uuo *UnidadeUpdateOne) SetDescricao(s string) *UnidadeUpdateOne {
	uuo.mutation.SetDescricao(s)
	return uuo
}

// SetURLAmigavel sets the "url_amigavel" field.
func (uuo *UnidadeUpdateOne) SetURLAmigavel(s string) *UnidadeUpdateOne {
	uuo.mutation.SetURLAmigavel(s)
	return uuo
}

// SetEnderecoID sets the "endereco_id" field.
func (uuo *UnidadeUpdateOne) SetEnderecoID(i int) *UnidadeUpdateOne {
	uuo.mutation.ResetEnderecoID()
	uuo.mutation.SetEnderecoID(i)
	return uuo
}

// AddEnderecoID adds i to the "endereco_id" field.
func (uuo *UnidadeUpdateOne) AddEnderecoID(i int) *UnidadeUpdateOne {
	uuo.mutation.AddEnderecoID(i)
	return uuo
}

// SetLatitude sets the "latitude" field.
func (uuo *UnidadeUpdateOne) SetLatitude(f float32) *UnidadeUpdateOne {
	uuo.mutation.ResetLatitude()
	uuo.mutation.SetLatitude(f)
	return uuo
}

// AddLatitude adds f to the "latitude" field.
func (uuo *UnidadeUpdateOne) AddLatitude(f float32) *UnidadeUpdateOne {
	uuo.mutation.AddLatitude(f)
	return uuo
}

// SetLongitude sets the "longitude" field.
func (uuo *UnidadeUpdateOne) SetLongitude(f float32) *UnidadeUpdateOne {
	uuo.mutation.ResetLongitude()
	uuo.mutation.SetLongitude(f)
	return uuo
}

// AddLongitude adds f to the "longitude" field.
func (uuo *UnidadeUpdateOne) AddLongitude(f float32) *UnidadeUpdateOne {
	uuo.mutation.AddLongitude(f)
	return uuo
}

// SetTelefone sets the "telefone" field.
func (uuo *UnidadeUpdateOne) SetTelefone(i int64) *UnidadeUpdateOne {
	uuo.mutation.ResetTelefone()
	uuo.mutation.SetTelefone(i)
	return uuo
}

// SetNillableTelefone sets the "telefone" field if the given value is not nil.
func (uuo *UnidadeUpdateOne) SetNillableTelefone(i *int64) *UnidadeUpdateOne {
	if i != nil {
		uuo.SetTelefone(*i)
	}
	return uuo
}

// AddTelefone adds i to the "telefone" field.
func (uuo *UnidadeUpdateOne) AddTelefone(i int64) *UnidadeUpdateOne {
	uuo.mutation.AddTelefone(i)
	return uuo
}

// ClearTelefone clears the value of the "telefone" field.
func (uuo *UnidadeUpdateOne) ClearTelefone() *UnidadeUpdateOne {
	uuo.mutation.ClearTelefone()
	return uuo
}

// SetCelular sets the "celular" field.
func (uuo *UnidadeUpdateOne) SetCelular(i int64) *UnidadeUpdateOne {
	uuo.mutation.ResetCelular()
	uuo.mutation.SetCelular(i)
	return uuo
}

// SetNillableCelular sets the "celular" field if the given value is not nil.
func (uuo *UnidadeUpdateOne) SetNillableCelular(i *int64) *UnidadeUpdateOne {
	if i != nil {
		uuo.SetCelular(*i)
	}
	return uuo
}

// AddCelular adds i to the "celular" field.
func (uuo *UnidadeUpdateOne) AddCelular(i int64) *UnidadeUpdateOne {
	uuo.mutation.AddCelular(i)
	return uuo
}

// ClearCelular clears the value of the "celular" field.
func (uuo *UnidadeUpdateOne) ClearCelular() *UnidadeUpdateOne {
	uuo.mutation.ClearCelular()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UnidadeUpdateOne) SetEmail(s string) *UnidadeUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetFacebook sets the "facebook" field.
func (uuo *UnidadeUpdateOne) SetFacebook(s string) *UnidadeUpdateOne {
	uuo.mutation.SetFacebook(s)
	return uuo
}

// SetNillableFacebook sets the "facebook" field if the given value is not nil.
func (uuo *UnidadeUpdateOne) SetNillableFacebook(s *string) *UnidadeUpdateOne {
	if s != nil {
		uuo.SetFacebook(*s)
	}
	return uuo
}

// ClearFacebook clears the value of the "facebook" field.
func (uuo *UnidadeUpdateOne) ClearFacebook() *UnidadeUpdateOne {
	uuo.mutation.ClearFacebook()
	return uuo
}

// SetInstagram sets the "instagram" field.
func (uuo *UnidadeUpdateOne) SetInstagram(s string) *UnidadeUpdateOne {
	uuo.mutation.SetInstagram(s)
	return uuo
}

// SetNillableInstagram sets the "instagram" field if the given value is not nil.
func (uuo *UnidadeUpdateOne) SetNillableInstagram(s *string) *UnidadeUpdateOne {
	if s != nil {
		uuo.SetInstagram(*s)
	}
	return uuo
}

// ClearInstagram clears the value of the "instagram" field.
func (uuo *UnidadeUpdateOne) ClearInstagram() *UnidadeUpdateOne {
	uuo.mutation.ClearInstagram()
	return uuo
}

// SetYoutube sets the "youtube" field.
func (uuo *UnidadeUpdateOne) SetYoutube(s string) *UnidadeUpdateOne {
	uuo.mutation.SetYoutube(s)
	return uuo
}

// SetNillableYoutube sets the "youtube" field if the given value is not nil.
func (uuo *UnidadeUpdateOne) SetNillableYoutube(s *string) *UnidadeUpdateOne {
	if s != nil {
		uuo.SetYoutube(*s)
	}
	return uuo
}

// ClearYoutube clears the value of the "youtube" field.
func (uuo *UnidadeUpdateOne) ClearYoutube() *UnidadeUpdateOne {
	uuo.mutation.ClearYoutube()
	return uuo
}

// SetAtivo sets the "ativo" field.
func (uuo *UnidadeUpdateOne) SetAtivo(b bool) *UnidadeUpdateOne {
	uuo.mutation.SetAtivo(b)
	return uuo
}

// Mutation returns the UnidadeMutation object of the builder.
func (uuo *UnidadeUpdateOne) Mutation() *UnidadeMutation {
	return uuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UnidadeUpdateOne) Select(field string, fields ...string) *UnidadeUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Unidade entity.
func (uuo *UnidadeUpdateOne) Save(ctx context.Context) (*Unidade, error) {
	var (
		err  error
		node *Unidade
	)
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnidadeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UnidadeUpdateOne) SaveX(ctx context.Context) *Unidade {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UnidadeUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UnidadeUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UnidadeUpdateOne) sqlSave(ctx context.Context) (_node *Unidade, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   unidade.Table,
			Columns: unidade.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unidade.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Unidade.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, unidade.FieldID)
		for _, f := range fields {
			if !unidade.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != unidade.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Descricao(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldDescricao,
		})
	}
	if value, ok := uuo.mutation.URLAmigavel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldURLAmigavel,
		})
	}
	if value, ok := uuo.mutation.EnderecoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: unidade.FieldEnderecoID,
		})
	}
	if value, ok := uuo.mutation.AddedEnderecoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: unidade.FieldEnderecoID,
		})
	}
	if value, ok := uuo.mutation.Latitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: unidade.FieldLatitude,
		})
	}
	if value, ok := uuo.mutation.AddedLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: unidade.FieldLatitude,
		})
	}
	if value, ok := uuo.mutation.Longitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: unidade.FieldLongitude,
		})
	}
	if value, ok := uuo.mutation.AddedLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: unidade.FieldLongitude,
		})
	}
	if value, ok := uuo.mutation.Telefone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: unidade.FieldTelefone,
		})
	}
	if value, ok := uuo.mutation.AddedTelefone(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: unidade.FieldTelefone,
		})
	}
	if uuo.mutation.TelefoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: unidade.FieldTelefone,
		})
	}
	if value, ok := uuo.mutation.Celular(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: unidade.FieldCelular,
		})
	}
	if value, ok := uuo.mutation.AddedCelular(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: unidade.FieldCelular,
		})
	}
	if uuo.mutation.CelularCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: unidade.FieldCelular,
		})
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldEmail,
		})
	}
	if value, ok := uuo.mutation.Facebook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldFacebook,
		})
	}
	if uuo.mutation.FacebookCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: unidade.FieldFacebook,
		})
	}
	if value, ok := uuo.mutation.Instagram(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldInstagram,
		})
	}
	if uuo.mutation.InstagramCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: unidade.FieldInstagram,
		})
	}
	if value, ok := uuo.mutation.Youtube(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unidade.FieldYoutube,
		})
	}
	if uuo.mutation.YoutubeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: unidade.FieldYoutube,
		})
	}
	if value, ok := uuo.mutation.Ativo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: unidade.FieldAtivo,
		})
	}
	_node = &Unidade{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unidade.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
