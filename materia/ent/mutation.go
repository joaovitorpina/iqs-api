// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"materia/ent/categoria"
	"materia/ent/materia"
	"materia/ent/predicate"
	"materia/ent/profissionalmaterias"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCategoria            = "Categoria"
	TypeMateria              = "Materia"
	TypeProfissionalMaterias = "ProfissionalMaterias"
)

// CategoriaMutation represents an operation that mutates the Categoria nodes in the graph.
type CategoriaMutation struct {
	config
	op              Op
	typ             string
	id              *int
	descricao       *string
	clearedFields   map[string]struct{}
	materias        map[int]struct{}
	removedmaterias map[int]struct{}
	clearedmaterias bool
	done            bool
	oldValue        func(context.Context) (*Categoria, error)
	predicates      []predicate.Categoria
}

var _ ent.Mutation = (*CategoriaMutation)(nil)

// categoriaOption allows management of the mutation configuration using functional options.
type categoriaOption func(*CategoriaMutation)

// newCategoriaMutation creates new mutation for the Categoria entity.
func newCategoriaMutation(c config, op Op, opts ...categoriaOption) *CategoriaMutation {
	m := &CategoriaMutation{
		config:        c,
		op:            op,
		typ:           TypeCategoria,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoriaID sets the ID field of the mutation.
func withCategoriaID(id int) categoriaOption {
	return func(m *CategoriaMutation) {
		var (
			err   error
			once  sync.Once
			value *Categoria
		)
		m.oldValue = func(ctx context.Context) (*Categoria, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Categoria.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategoria sets the old Categoria of the mutation.
func withCategoria(node *Categoria) categoriaOption {
	return func(m *CategoriaMutation) {
		m.oldValue = func(context.Context) (*Categoria, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoriaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoriaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoriaMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategoriaMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Categoria.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDescricao sets the "descricao" field.
func (m *CategoriaMutation) SetDescricao(s string) {
	m.descricao = &s
}

// Descricao returns the value of the "descricao" field in the mutation.
func (m *CategoriaMutation) Descricao() (r string, exists bool) {
	v := m.descricao
	if v == nil {
		return
	}
	return *v, true
}

// OldDescricao returns the old "descricao" field's value of the Categoria entity.
// If the Categoria object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoriaMutation) OldDescricao(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescricao is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescricao requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescricao: %w", err)
	}
	return oldValue.Descricao, nil
}

// ResetDescricao resets all changes to the "descricao" field.
func (m *CategoriaMutation) ResetDescricao() {
	m.descricao = nil
}

// AddMateriaIDs adds the "materias" edge to the Materia entity by ids.
func (m *CategoriaMutation) AddMateriaIDs(ids ...int) {
	if m.materias == nil {
		m.materias = make(map[int]struct{})
	}
	for i := range ids {
		m.materias[ids[i]] = struct{}{}
	}
}

// ClearMaterias clears the "materias" edge to the Materia entity.
func (m *CategoriaMutation) ClearMaterias() {
	m.clearedmaterias = true
}

// MateriasCleared reports if the "materias" edge to the Materia entity was cleared.
func (m *CategoriaMutation) MateriasCleared() bool {
	return m.clearedmaterias
}

// RemoveMateriaIDs removes the "materias" edge to the Materia entity by IDs.
func (m *CategoriaMutation) RemoveMateriaIDs(ids ...int) {
	if m.removedmaterias == nil {
		m.removedmaterias = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.materias, ids[i])
		m.removedmaterias[ids[i]] = struct{}{}
	}
}

// RemovedMaterias returns the removed IDs of the "materias" edge to the Materia entity.
func (m *CategoriaMutation) RemovedMateriasIDs() (ids []int) {
	for id := range m.removedmaterias {
		ids = append(ids, id)
	}
	return
}

// MateriasIDs returns the "materias" edge IDs in the mutation.
func (m *CategoriaMutation) MateriasIDs() (ids []int) {
	for id := range m.materias {
		ids = append(ids, id)
	}
	return
}

// ResetMaterias resets all changes to the "materias" edge.
func (m *CategoriaMutation) ResetMaterias() {
	m.materias = nil
	m.clearedmaterias = false
	m.removedmaterias = nil
}

// Where appends a list predicates to the CategoriaMutation builder.
func (m *CategoriaMutation) Where(ps ...predicate.Categoria) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CategoriaMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Categoria).
func (m *CategoriaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoriaMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.descricao != nil {
		fields = append(fields, categoria.FieldDescricao)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoriaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case categoria.FieldDescricao:
		return m.Descricao()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoriaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case categoria.FieldDescricao:
		return m.OldDescricao(ctx)
	}
	return nil, fmt.Errorf("unknown Categoria field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoriaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case categoria.FieldDescricao:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescricao(v)
		return nil
	}
	return fmt.Errorf("unknown Categoria field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoriaMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoriaMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoriaMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Categoria numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoriaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoriaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoriaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Categoria nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoriaMutation) ResetField(name string) error {
	switch name {
	case categoria.FieldDescricao:
		m.ResetDescricao()
		return nil
	}
	return fmt.Errorf("unknown Categoria field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoriaMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.materias != nil {
		edges = append(edges, categoria.EdgeMaterias)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoriaMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case categoria.EdgeMaterias:
		ids := make([]ent.Value, 0, len(m.materias))
		for id := range m.materias {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoriaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmaterias != nil {
		edges = append(edges, categoria.EdgeMaterias)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoriaMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case categoria.EdgeMaterias:
		ids := make([]ent.Value, 0, len(m.removedmaterias))
		for id := range m.removedmaterias {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoriaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmaterias {
		edges = append(edges, categoria.EdgeMaterias)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoriaMutation) EdgeCleared(name string) bool {
	switch name {
	case categoria.EdgeMaterias:
		return m.clearedmaterias
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoriaMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Categoria unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoriaMutation) ResetEdge(name string) error {
	switch name {
	case categoria.EdgeMaterias:
		m.ResetMaterias()
		return nil
	}
	return fmt.Errorf("unknown Categoria edge %s", name)
}

// MateriaMutation represents an operation that mutates the Materia nodes in the graph.
type MateriaMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	unidade_id                   *int
	addunidade_id                *int
	titulo                       *string
	url_amigavel                 *string
	data_agendamento             *time.Time
	fonte                        *string
	link_fonte                   *string
	texto                        *string
	imagem_url                   *string
	patrocinado                  *bool
	status                       *bool
	clearedFields                map[string]struct{}
	categoria                    *int
	clearedcategoria             bool
	profissional_materias        map[int]struct{}
	removedprofissional_materias map[int]struct{}
	clearedprofissional_materias bool
	done                         bool
	oldValue                     func(context.Context) (*Materia, error)
	predicates                   []predicate.Materia
}

var _ ent.Mutation = (*MateriaMutation)(nil)

// materiaOption allows management of the mutation configuration using functional options.
type materiaOption func(*MateriaMutation)

// newMateriaMutation creates new mutation for the Materia entity.
func newMateriaMutation(c config, op Op, opts ...materiaOption) *MateriaMutation {
	m := &MateriaMutation{
		config:        c,
		op:            op,
		typ:           TypeMateria,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMateriaID sets the ID field of the mutation.
func withMateriaID(id int) materiaOption {
	return func(m *MateriaMutation) {
		var (
			err   error
			once  sync.Once
			value *Materia
		)
		m.oldValue = func(ctx context.Context) (*Materia, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Materia.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMateria sets the old Materia of the mutation.
func withMateria(node *Materia) materiaOption {
	return func(m *MateriaMutation) {
		m.oldValue = func(context.Context) (*Materia, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MateriaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MateriaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MateriaMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MateriaMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Materia.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUnidadeID sets the "unidade_id" field.
func (m *MateriaMutation) SetUnidadeID(i int) {
	m.unidade_id = &i
	m.addunidade_id = nil
}

// UnidadeID returns the value of the "unidade_id" field in the mutation.
func (m *MateriaMutation) UnidadeID() (r int, exists bool) {
	v := m.unidade_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUnidadeID returns the old "unidade_id" field's value of the Materia entity.
// If the Materia object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MateriaMutation) OldUnidadeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnidadeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnidadeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnidadeID: %w", err)
	}
	return oldValue.UnidadeID, nil
}

// AddUnidadeID adds i to the "unidade_id" field.
func (m *MateriaMutation) AddUnidadeID(i int) {
	if m.addunidade_id != nil {
		*m.addunidade_id += i
	} else {
		m.addunidade_id = &i
	}
}

// AddedUnidadeID returns the value that was added to the "unidade_id" field in this mutation.
func (m *MateriaMutation) AddedUnidadeID() (r int, exists bool) {
	v := m.addunidade_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUnidadeID resets all changes to the "unidade_id" field.
func (m *MateriaMutation) ResetUnidadeID() {
	m.unidade_id = nil
	m.addunidade_id = nil
}

// SetTitulo sets the "titulo" field.
func (m *MateriaMutation) SetTitulo(s string) {
	m.titulo = &s
}

// Titulo returns the value of the "titulo" field in the mutation.
func (m *MateriaMutation) Titulo() (r string, exists bool) {
	v := m.titulo
	if v == nil {
		return
	}
	return *v, true
}

// OldTitulo returns the old "titulo" field's value of the Materia entity.
// If the Materia object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MateriaMutation) OldTitulo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitulo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitulo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitulo: %w", err)
	}
	return oldValue.Titulo, nil
}

// ResetTitulo resets all changes to the "titulo" field.
func (m *MateriaMutation) ResetTitulo() {
	m.titulo = nil
}

// SetURLAmigavel sets the "url_amigavel" field.
func (m *MateriaMutation) SetURLAmigavel(s string) {
	m.url_amigavel = &s
}

// URLAmigavel returns the value of the "url_amigavel" field in the mutation.
func (m *MateriaMutation) URLAmigavel() (r string, exists bool) {
	v := m.url_amigavel
	if v == nil {
		return
	}
	return *v, true
}

// OldURLAmigavel returns the old "url_amigavel" field's value of the Materia entity.
// If the Materia object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MateriaMutation) OldURLAmigavel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURLAmigavel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURLAmigavel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURLAmigavel: %w", err)
	}
	return oldValue.URLAmigavel, nil
}

// ResetURLAmigavel resets all changes to the "url_amigavel" field.
func (m *MateriaMutation) ResetURLAmigavel() {
	m.url_amigavel = nil
}

// SetDataAgendamento sets the "data_agendamento" field.
func (m *MateriaMutation) SetDataAgendamento(t time.Time) {
	m.data_agendamento = &t
}

// DataAgendamento returns the value of the "data_agendamento" field in the mutation.
func (m *MateriaMutation) DataAgendamento() (r time.Time, exists bool) {
	v := m.data_agendamento
	if v == nil {
		return
	}
	return *v, true
}

// OldDataAgendamento returns the old "data_agendamento" field's value of the Materia entity.
// If the Materia object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MateriaMutation) OldDataAgendamento(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataAgendamento is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataAgendamento requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataAgendamento: %w", err)
	}
	return oldValue.DataAgendamento, nil
}

// ClearDataAgendamento clears the value of the "data_agendamento" field.
func (m *MateriaMutation) ClearDataAgendamento() {
	m.data_agendamento = nil
	m.clearedFields[materia.FieldDataAgendamento] = struct{}{}
}

// DataAgendamentoCleared returns if the "data_agendamento" field was cleared in this mutation.
func (m *MateriaMutation) DataAgendamentoCleared() bool {
	_, ok := m.clearedFields[materia.FieldDataAgendamento]
	return ok
}

// ResetDataAgendamento resets all changes to the "data_agendamento" field.
func (m *MateriaMutation) ResetDataAgendamento() {
	m.data_agendamento = nil
	delete(m.clearedFields, materia.FieldDataAgendamento)
}

// SetFonte sets the "fonte" field.
func (m *MateriaMutation) SetFonte(s string) {
	m.fonte = &s
}

// Fonte returns the value of the "fonte" field in the mutation.
func (m *MateriaMutation) Fonte() (r string, exists bool) {
	v := m.fonte
	if v == nil {
		return
	}
	return *v, true
}

// OldFonte returns the old "fonte" field's value of the Materia entity.
// If the Materia object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MateriaMutation) OldFonte(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFonte is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFonte requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFonte: %w", err)
	}
	return oldValue.Fonte, nil
}

// ClearFonte clears the value of the "fonte" field.
func (m *MateriaMutation) ClearFonte() {
	m.fonte = nil
	m.clearedFields[materia.FieldFonte] = struct{}{}
}

// FonteCleared returns if the "fonte" field was cleared in this mutation.
func (m *MateriaMutation) FonteCleared() bool {
	_, ok := m.clearedFields[materia.FieldFonte]
	return ok
}

// ResetFonte resets all changes to the "fonte" field.
func (m *MateriaMutation) ResetFonte() {
	m.fonte = nil
	delete(m.clearedFields, materia.FieldFonte)
}

// SetLinkFonte sets the "link_fonte" field.
func (m *MateriaMutation) SetLinkFonte(s string) {
	m.link_fonte = &s
}

// LinkFonte returns the value of the "link_fonte" field in the mutation.
func (m *MateriaMutation) LinkFonte() (r string, exists bool) {
	v := m.link_fonte
	if v == nil {
		return
	}
	return *v, true
}

// OldLinkFonte returns the old "link_fonte" field's value of the Materia entity.
// If the Materia object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MateriaMutation) OldLinkFonte(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLinkFonte is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLinkFonte requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinkFonte: %w", err)
	}
	return oldValue.LinkFonte, nil
}

// ClearLinkFonte clears the value of the "link_fonte" field.
func (m *MateriaMutation) ClearLinkFonte() {
	m.link_fonte = nil
	m.clearedFields[materia.FieldLinkFonte] = struct{}{}
}

// LinkFonteCleared returns if the "link_fonte" field was cleared in this mutation.
func (m *MateriaMutation) LinkFonteCleared() bool {
	_, ok := m.clearedFields[materia.FieldLinkFonte]
	return ok
}

// ResetLinkFonte resets all changes to the "link_fonte" field.
func (m *MateriaMutation) ResetLinkFonte() {
	m.link_fonte = nil
	delete(m.clearedFields, materia.FieldLinkFonte)
}

// SetTexto sets the "texto" field.
func (m *MateriaMutation) SetTexto(s string) {
	m.texto = &s
}

// Texto returns the value of the "texto" field in the mutation.
func (m *MateriaMutation) Texto() (r string, exists bool) {
	v := m.texto
	if v == nil {
		return
	}
	return *v, true
}

// OldTexto returns the old "texto" field's value of the Materia entity.
// If the Materia object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MateriaMutation) OldTexto(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTexto is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTexto requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTexto: %w", err)
	}
	return oldValue.Texto, nil
}

// ResetTexto resets all changes to the "texto" field.
func (m *MateriaMutation) ResetTexto() {
	m.texto = nil
}

// SetImagemURL sets the "imagem_url" field.
func (m *MateriaMutation) SetImagemURL(s string) {
	m.imagem_url = &s
}

// ImagemURL returns the value of the "imagem_url" field in the mutation.
func (m *MateriaMutation) ImagemURL() (r string, exists bool) {
	v := m.imagem_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImagemURL returns the old "imagem_url" field's value of the Materia entity.
// If the Materia object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MateriaMutation) OldImagemURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImagemURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImagemURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImagemURL: %w", err)
	}
	return oldValue.ImagemURL, nil
}

// ClearImagemURL clears the value of the "imagem_url" field.
func (m *MateriaMutation) ClearImagemURL() {
	m.imagem_url = nil
	m.clearedFields[materia.FieldImagemURL] = struct{}{}
}

// ImagemURLCleared returns if the "imagem_url" field was cleared in this mutation.
func (m *MateriaMutation) ImagemURLCleared() bool {
	_, ok := m.clearedFields[materia.FieldImagemURL]
	return ok
}

// ResetImagemURL resets all changes to the "imagem_url" field.
func (m *MateriaMutation) ResetImagemURL() {
	m.imagem_url = nil
	delete(m.clearedFields, materia.FieldImagemURL)
}

// SetPatrocinado sets the "patrocinado" field.
func (m *MateriaMutation) SetPatrocinado(b bool) {
	m.patrocinado = &b
}

// Patrocinado returns the value of the "patrocinado" field in the mutation.
func (m *MateriaMutation) Patrocinado() (r bool, exists bool) {
	v := m.patrocinado
	if v == nil {
		return
	}
	return *v, true
}

// OldPatrocinado returns the old "patrocinado" field's value of the Materia entity.
// If the Materia object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MateriaMutation) OldPatrocinado(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPatrocinado is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPatrocinado requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatrocinado: %w", err)
	}
	return oldValue.Patrocinado, nil
}

// ResetPatrocinado resets all changes to the "patrocinado" field.
func (m *MateriaMutation) ResetPatrocinado() {
	m.patrocinado = nil
}

// SetStatus sets the "status" field.
func (m *MateriaMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *MateriaMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Materia entity.
// If the Materia object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MateriaMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *MateriaMutation) ResetStatus() {
	m.status = nil
}

// SetCategoriaID sets the "categoria" edge to the Categoria entity by id.
func (m *MateriaMutation) SetCategoriaID(id int) {
	m.categoria = &id
}

// ClearCategoria clears the "categoria" edge to the Categoria entity.
func (m *MateriaMutation) ClearCategoria() {
	m.clearedcategoria = true
}

// CategoriaCleared reports if the "categoria" edge to the Categoria entity was cleared.
func (m *MateriaMutation) CategoriaCleared() bool {
	return m.clearedcategoria
}

// CategoriaID returns the "categoria" edge ID in the mutation.
func (m *MateriaMutation) CategoriaID() (id int, exists bool) {
	if m.categoria != nil {
		return *m.categoria, true
	}
	return
}

// CategoriaIDs returns the "categoria" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoriaID instead. It exists only for internal usage by the builders.
func (m *MateriaMutation) CategoriaIDs() (ids []int) {
	if id := m.categoria; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategoria resets all changes to the "categoria" edge.
func (m *MateriaMutation) ResetCategoria() {
	m.categoria = nil
	m.clearedcategoria = false
}

// AddProfissionalMateriaIDs adds the "profissional_materias" edge to the ProfissionalMaterias entity by ids.
func (m *MateriaMutation) AddProfissionalMateriaIDs(ids ...int) {
	if m.profissional_materias == nil {
		m.profissional_materias = make(map[int]struct{})
	}
	for i := range ids {
		m.profissional_materias[ids[i]] = struct{}{}
	}
}

// ClearProfissionalMaterias clears the "profissional_materias" edge to the ProfissionalMaterias entity.
func (m *MateriaMutation) ClearProfissionalMaterias() {
	m.clearedprofissional_materias = true
}

// ProfissionalMateriasCleared reports if the "profissional_materias" edge to the ProfissionalMaterias entity was cleared.
func (m *MateriaMutation) ProfissionalMateriasCleared() bool {
	return m.clearedprofissional_materias
}

// RemoveProfissionalMateriaIDs removes the "profissional_materias" edge to the ProfissionalMaterias entity by IDs.
func (m *MateriaMutation) RemoveProfissionalMateriaIDs(ids ...int) {
	if m.removedprofissional_materias == nil {
		m.removedprofissional_materias = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.profissional_materias, ids[i])
		m.removedprofissional_materias[ids[i]] = struct{}{}
	}
}

// RemovedProfissionalMaterias returns the removed IDs of the "profissional_materias" edge to the ProfissionalMaterias entity.
func (m *MateriaMutation) RemovedProfissionalMateriasIDs() (ids []int) {
	for id := range m.removedprofissional_materias {
		ids = append(ids, id)
	}
	return
}

// ProfissionalMateriasIDs returns the "profissional_materias" edge IDs in the mutation.
func (m *MateriaMutation) ProfissionalMateriasIDs() (ids []int) {
	for id := range m.profissional_materias {
		ids = append(ids, id)
	}
	return
}

// ResetProfissionalMaterias resets all changes to the "profissional_materias" edge.
func (m *MateriaMutation) ResetProfissionalMaterias() {
	m.profissional_materias = nil
	m.clearedprofissional_materias = false
	m.removedprofissional_materias = nil
}

// Where appends a list predicates to the MateriaMutation builder.
func (m *MateriaMutation) Where(ps ...predicate.Materia) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MateriaMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Materia).
func (m *MateriaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MateriaMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.unidade_id != nil {
		fields = append(fields, materia.FieldUnidadeID)
	}
	if m.titulo != nil {
		fields = append(fields, materia.FieldTitulo)
	}
	if m.url_amigavel != nil {
		fields = append(fields, materia.FieldURLAmigavel)
	}
	if m.data_agendamento != nil {
		fields = append(fields, materia.FieldDataAgendamento)
	}
	if m.fonte != nil {
		fields = append(fields, materia.FieldFonte)
	}
	if m.link_fonte != nil {
		fields = append(fields, materia.FieldLinkFonte)
	}
	if m.texto != nil {
		fields = append(fields, materia.FieldTexto)
	}
	if m.imagem_url != nil {
		fields = append(fields, materia.FieldImagemURL)
	}
	if m.patrocinado != nil {
		fields = append(fields, materia.FieldPatrocinado)
	}
	if m.status != nil {
		fields = append(fields, materia.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MateriaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case materia.FieldUnidadeID:
		return m.UnidadeID()
	case materia.FieldTitulo:
		return m.Titulo()
	case materia.FieldURLAmigavel:
		return m.URLAmigavel()
	case materia.FieldDataAgendamento:
		return m.DataAgendamento()
	case materia.FieldFonte:
		return m.Fonte()
	case materia.FieldLinkFonte:
		return m.LinkFonte()
	case materia.FieldTexto:
		return m.Texto()
	case materia.FieldImagemURL:
		return m.ImagemURL()
	case materia.FieldPatrocinado:
		return m.Patrocinado()
	case materia.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MateriaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case materia.FieldUnidadeID:
		return m.OldUnidadeID(ctx)
	case materia.FieldTitulo:
		return m.OldTitulo(ctx)
	case materia.FieldURLAmigavel:
		return m.OldURLAmigavel(ctx)
	case materia.FieldDataAgendamento:
		return m.OldDataAgendamento(ctx)
	case materia.FieldFonte:
		return m.OldFonte(ctx)
	case materia.FieldLinkFonte:
		return m.OldLinkFonte(ctx)
	case materia.FieldTexto:
		return m.OldTexto(ctx)
	case materia.FieldImagemURL:
		return m.OldImagemURL(ctx)
	case materia.FieldPatrocinado:
		return m.OldPatrocinado(ctx)
	case materia.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Materia field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MateriaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case materia.FieldUnidadeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnidadeID(v)
		return nil
	case materia.FieldTitulo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitulo(v)
		return nil
	case materia.FieldURLAmigavel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURLAmigavel(v)
		return nil
	case materia.FieldDataAgendamento:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataAgendamento(v)
		return nil
	case materia.FieldFonte:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFonte(v)
		return nil
	case materia.FieldLinkFonte:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinkFonte(v)
		return nil
	case materia.FieldTexto:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTexto(v)
		return nil
	case materia.FieldImagemURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImagemURL(v)
		return nil
	case materia.FieldPatrocinado:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatrocinado(v)
		return nil
	case materia.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Materia field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MateriaMutation) AddedFields() []string {
	var fields []string
	if m.addunidade_id != nil {
		fields = append(fields, materia.FieldUnidadeID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MateriaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case materia.FieldUnidadeID:
		return m.AddedUnidadeID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MateriaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case materia.FieldUnidadeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnidadeID(v)
		return nil
	}
	return fmt.Errorf("unknown Materia numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MateriaMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(materia.FieldDataAgendamento) {
		fields = append(fields, materia.FieldDataAgendamento)
	}
	if m.FieldCleared(materia.FieldFonte) {
		fields = append(fields, materia.FieldFonte)
	}
	if m.FieldCleared(materia.FieldLinkFonte) {
		fields = append(fields, materia.FieldLinkFonte)
	}
	if m.FieldCleared(materia.FieldImagemURL) {
		fields = append(fields, materia.FieldImagemURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MateriaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MateriaMutation) ClearField(name string) error {
	switch name {
	case materia.FieldDataAgendamento:
		m.ClearDataAgendamento()
		return nil
	case materia.FieldFonte:
		m.ClearFonte()
		return nil
	case materia.FieldLinkFonte:
		m.ClearLinkFonte()
		return nil
	case materia.FieldImagemURL:
		m.ClearImagemURL()
		return nil
	}
	return fmt.Errorf("unknown Materia nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MateriaMutation) ResetField(name string) error {
	switch name {
	case materia.FieldUnidadeID:
		m.ResetUnidadeID()
		return nil
	case materia.FieldTitulo:
		m.ResetTitulo()
		return nil
	case materia.FieldURLAmigavel:
		m.ResetURLAmigavel()
		return nil
	case materia.FieldDataAgendamento:
		m.ResetDataAgendamento()
		return nil
	case materia.FieldFonte:
		m.ResetFonte()
		return nil
	case materia.FieldLinkFonte:
		m.ResetLinkFonte()
		return nil
	case materia.FieldTexto:
		m.ResetTexto()
		return nil
	case materia.FieldImagemURL:
		m.ResetImagemURL()
		return nil
	case materia.FieldPatrocinado:
		m.ResetPatrocinado()
		return nil
	case materia.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Materia field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MateriaMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.categoria != nil {
		edges = append(edges, materia.EdgeCategoria)
	}
	if m.profissional_materias != nil {
		edges = append(edges, materia.EdgeProfissionalMaterias)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MateriaMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case materia.EdgeCategoria:
		if id := m.categoria; id != nil {
			return []ent.Value{*id}
		}
	case materia.EdgeProfissionalMaterias:
		ids := make([]ent.Value, 0, len(m.profissional_materias))
		for id := range m.profissional_materias {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MateriaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedprofissional_materias != nil {
		edges = append(edges, materia.EdgeProfissionalMaterias)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MateriaMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case materia.EdgeProfissionalMaterias:
		ids := make([]ent.Value, 0, len(m.removedprofissional_materias))
		for id := range m.removedprofissional_materias {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MateriaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcategoria {
		edges = append(edges, materia.EdgeCategoria)
	}
	if m.clearedprofissional_materias {
		edges = append(edges, materia.EdgeProfissionalMaterias)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MateriaMutation) EdgeCleared(name string) bool {
	switch name {
	case materia.EdgeCategoria:
		return m.clearedcategoria
	case materia.EdgeProfissionalMaterias:
		return m.clearedprofissional_materias
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MateriaMutation) ClearEdge(name string) error {
	switch name {
	case materia.EdgeCategoria:
		m.ClearCategoria()
		return nil
	}
	return fmt.Errorf("unknown Materia unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MateriaMutation) ResetEdge(name string) error {
	switch name {
	case materia.EdgeCategoria:
		m.ResetCategoria()
		return nil
	case materia.EdgeProfissionalMaterias:
		m.ResetProfissionalMaterias()
		return nil
	}
	return fmt.Errorf("unknown Materia edge %s", name)
}

// ProfissionalMateriasMutation represents an operation that mutates the ProfissionalMaterias nodes in the graph.
type ProfissionalMateriasMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	profissional_id    *int
	addprofissional_id *int
	clearedFields      map[string]struct{}
	materia            *int
	clearedmateria     bool
	done               bool
	oldValue           func(context.Context) (*ProfissionalMaterias, error)
	predicates         []predicate.ProfissionalMaterias
}

var _ ent.Mutation = (*ProfissionalMateriasMutation)(nil)

// profissionalmateriasOption allows management of the mutation configuration using functional options.
type profissionalmateriasOption func(*ProfissionalMateriasMutation)

// newProfissionalMateriasMutation creates new mutation for the ProfissionalMaterias entity.
func newProfissionalMateriasMutation(c config, op Op, opts ...profissionalmateriasOption) *ProfissionalMateriasMutation {
	m := &ProfissionalMateriasMutation{
		config:        c,
		op:            op,
		typ:           TypeProfissionalMaterias,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProfissionalMateriasID sets the ID field of the mutation.
func withProfissionalMateriasID(id int) profissionalmateriasOption {
	return func(m *ProfissionalMateriasMutation) {
		var (
			err   error
			once  sync.Once
			value *ProfissionalMaterias
		)
		m.oldValue = func(ctx context.Context) (*ProfissionalMaterias, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProfissionalMaterias.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProfissionalMaterias sets the old ProfissionalMaterias of the mutation.
func withProfissionalMaterias(node *ProfissionalMaterias) profissionalmateriasOption {
	return func(m *ProfissionalMateriasMutation) {
		m.oldValue = func(context.Context) (*ProfissionalMaterias, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProfissionalMateriasMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProfissionalMateriasMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProfissionalMateriasMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProfissionalMateriasMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProfissionalMaterias.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProfissionalID sets the "profissional_id" field.
func (m *ProfissionalMateriasMutation) SetProfissionalID(i int) {
	m.profissional_id = &i
	m.addprofissional_id = nil
}

// ProfissionalID returns the value of the "profissional_id" field in the mutation.
func (m *ProfissionalMateriasMutation) ProfissionalID() (r int, exists bool) {
	v := m.profissional_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProfissionalID returns the old "profissional_id" field's value of the ProfissionalMaterias entity.
// If the ProfissionalMaterias object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMateriasMutation) OldProfissionalID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfissionalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfissionalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfissionalID: %w", err)
	}
	return oldValue.ProfissionalID, nil
}

// AddProfissionalID adds i to the "profissional_id" field.
func (m *ProfissionalMateriasMutation) AddProfissionalID(i int) {
	if m.addprofissional_id != nil {
		*m.addprofissional_id += i
	} else {
		m.addprofissional_id = &i
	}
}

// AddedProfissionalID returns the value that was added to the "profissional_id" field in this mutation.
func (m *ProfissionalMateriasMutation) AddedProfissionalID() (r int, exists bool) {
	v := m.addprofissional_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProfissionalID resets all changes to the "profissional_id" field.
func (m *ProfissionalMateriasMutation) ResetProfissionalID() {
	m.profissional_id = nil
	m.addprofissional_id = nil
}

// SetMateriaID sets the "materia" edge to the Materia entity by id.
func (m *ProfissionalMateriasMutation) SetMateriaID(id int) {
	m.materia = &id
}

// ClearMateria clears the "materia" edge to the Materia entity.
func (m *ProfissionalMateriasMutation) ClearMateria() {
	m.clearedmateria = true
}

// MateriaCleared reports if the "materia" edge to the Materia entity was cleared.
func (m *ProfissionalMateriasMutation) MateriaCleared() bool {
	return m.clearedmateria
}

// MateriaID returns the "materia" edge ID in the mutation.
func (m *ProfissionalMateriasMutation) MateriaID() (id int, exists bool) {
	if m.materia != nil {
		return *m.materia, true
	}
	return
}

// MateriaIDs returns the "materia" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MateriaID instead. It exists only for internal usage by the builders.
func (m *ProfissionalMateriasMutation) MateriaIDs() (ids []int) {
	if id := m.materia; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMateria resets all changes to the "materia" edge.
func (m *ProfissionalMateriasMutation) ResetMateria() {
	m.materia = nil
	m.clearedmateria = false
}

// Where appends a list predicates to the ProfissionalMateriasMutation builder.
func (m *ProfissionalMateriasMutation) Where(ps ...predicate.ProfissionalMaterias) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProfissionalMateriasMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProfissionalMaterias).
func (m *ProfissionalMateriasMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProfissionalMateriasMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.profissional_id != nil {
		fields = append(fields, profissionalmaterias.FieldProfissionalID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProfissionalMateriasMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case profissionalmaterias.FieldProfissionalID:
		return m.ProfissionalID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProfissionalMateriasMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case profissionalmaterias.FieldProfissionalID:
		return m.OldProfissionalID(ctx)
	}
	return nil, fmt.Errorf("unknown ProfissionalMaterias field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfissionalMateriasMutation) SetField(name string, value ent.Value) error {
	switch name {
	case profissionalmaterias.FieldProfissionalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfissionalID(v)
		return nil
	}
	return fmt.Errorf("unknown ProfissionalMaterias field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProfissionalMateriasMutation) AddedFields() []string {
	var fields []string
	if m.addprofissional_id != nil {
		fields = append(fields, profissionalmaterias.FieldProfissionalID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProfissionalMateriasMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case profissionalmaterias.FieldProfissionalID:
		return m.AddedProfissionalID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfissionalMateriasMutation) AddField(name string, value ent.Value) error {
	switch name {
	case profissionalmaterias.FieldProfissionalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProfissionalID(v)
		return nil
	}
	return fmt.Errorf("unknown ProfissionalMaterias numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProfissionalMateriasMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProfissionalMateriasMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProfissionalMateriasMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProfissionalMaterias nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProfissionalMateriasMutation) ResetField(name string) error {
	switch name {
	case profissionalmaterias.FieldProfissionalID:
		m.ResetProfissionalID()
		return nil
	}
	return fmt.Errorf("unknown ProfissionalMaterias field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProfissionalMateriasMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.materia != nil {
		edges = append(edges, profissionalmaterias.EdgeMateria)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProfissionalMateriasMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case profissionalmaterias.EdgeMateria:
		if id := m.materia; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProfissionalMateriasMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProfissionalMateriasMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProfissionalMateriasMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmateria {
		edges = append(edges, profissionalmaterias.EdgeMateria)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProfissionalMateriasMutation) EdgeCleared(name string) bool {
	switch name {
	case profissionalmaterias.EdgeMateria:
		return m.clearedmateria
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProfissionalMateriasMutation) ClearEdge(name string) error {
	switch name {
	case profissionalmaterias.EdgeMateria:
		m.ClearMateria()
		return nil
	}
	return fmt.Errorf("unknown ProfissionalMaterias unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProfissionalMateriasMutation) ResetEdge(name string) error {
	switch name {
	case profissionalmaterias.EdgeMateria:
		m.ResetMateria()
		return nil
	}
	return fmt.Errorf("unknown ProfissionalMaterias edge %s", name)
}
