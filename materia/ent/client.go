// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"materia/ent/migrate"

	"materia/ent/categoria"
	"materia/ent/materia"
	"materia/ent/profissionalmaterias"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Categoria is the client for interacting with the Categoria builders.
	Categoria *CategoriaClient
	// Materia is the client for interacting with the Materia builders.
	Materia *MateriaClient
	// ProfissionalMaterias is the client for interacting with the ProfissionalMaterias builders.
	ProfissionalMaterias *ProfissionalMateriasClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Categoria = NewCategoriaClient(c.config)
	c.Materia = NewMateriaClient(c.config)
	c.ProfissionalMaterias = NewProfissionalMateriasClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Categoria:            NewCategoriaClient(cfg),
		Materia:              NewMateriaClient(cfg),
		ProfissionalMaterias: NewProfissionalMateriasClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Categoria:            NewCategoriaClient(cfg),
		Materia:              NewMateriaClient(cfg),
		ProfissionalMaterias: NewProfissionalMateriasClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Categoria.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Categoria.Use(hooks...)
	c.Materia.Use(hooks...)
	c.ProfissionalMaterias.Use(hooks...)
}

// CategoriaClient is a client for the Categoria schema.
type CategoriaClient struct {
	config
}

// NewCategoriaClient returns a client for the Categoria from the given config.
func NewCategoriaClient(c config) *CategoriaClient {
	return &CategoriaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `categoria.Hooks(f(g(h())))`.
func (c *CategoriaClient) Use(hooks ...Hook) {
	c.hooks.Categoria = append(c.hooks.Categoria, hooks...)
}

// Create returns a create builder for Categoria.
func (c *CategoriaClient) Create() *CategoriaCreate {
	mutation := newCategoriaMutation(c.config, OpCreate)
	return &CategoriaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Categoria entities.
func (c *CategoriaClient) CreateBulk(builders ...*CategoriaCreate) *CategoriaCreateBulk {
	return &CategoriaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Categoria.
func (c *CategoriaClient) Update() *CategoriaUpdate {
	mutation := newCategoriaMutation(c.config, OpUpdate)
	return &CategoriaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoriaClient) UpdateOne(ca *Categoria) *CategoriaUpdateOne {
	mutation := newCategoriaMutation(c.config, OpUpdateOne, withCategoria(ca))
	return &CategoriaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoriaClient) UpdateOneID(id int) *CategoriaUpdateOne {
	mutation := newCategoriaMutation(c.config, OpUpdateOne, withCategoriaID(id))
	return &CategoriaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Categoria.
func (c *CategoriaClient) Delete() *CategoriaDelete {
	mutation := newCategoriaMutation(c.config, OpDelete)
	return &CategoriaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CategoriaClient) DeleteOne(ca *Categoria) *CategoriaDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CategoriaClient) DeleteOneID(id int) *CategoriaDeleteOne {
	builder := c.Delete().Where(categoria.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoriaDeleteOne{builder}
}

// Query returns a query builder for Categoria.
func (c *CategoriaClient) Query() *CategoriaQuery {
	return &CategoriaQuery{
		config: c.config,
	}
}

// Get returns a Categoria entity by its id.
func (c *CategoriaClient) Get(ctx context.Context, id int) (*Categoria, error) {
	return c.Query().Where(categoria.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoriaClient) GetX(ctx context.Context, id int) *Categoria {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMaterias queries the materias edge of a Categoria.
func (c *CategoriaClient) QueryMaterias(ca *Categoria) *MateriaQuery {
	query := &MateriaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(categoria.Table, categoria.FieldID, id),
			sqlgraph.To(materia.Table, materia.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, categoria.MateriasTable, categoria.MateriasColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoriaClient) Hooks() []Hook {
	return c.hooks.Categoria
}

// MateriaClient is a client for the Materia schema.
type MateriaClient struct {
	config
}

// NewMateriaClient returns a client for the Materia from the given config.
func NewMateriaClient(c config) *MateriaClient {
	return &MateriaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `materia.Hooks(f(g(h())))`.
func (c *MateriaClient) Use(hooks ...Hook) {
	c.hooks.Materia = append(c.hooks.Materia, hooks...)
}

// Create returns a create builder for Materia.
func (c *MateriaClient) Create() *MateriaCreate {
	mutation := newMateriaMutation(c.config, OpCreate)
	return &MateriaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Materia entities.
func (c *MateriaClient) CreateBulk(builders ...*MateriaCreate) *MateriaCreateBulk {
	return &MateriaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Materia.
func (c *MateriaClient) Update() *MateriaUpdate {
	mutation := newMateriaMutation(c.config, OpUpdate)
	return &MateriaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MateriaClient) UpdateOne(m *Materia) *MateriaUpdateOne {
	mutation := newMateriaMutation(c.config, OpUpdateOne, withMateria(m))
	return &MateriaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MateriaClient) UpdateOneID(id int) *MateriaUpdateOne {
	mutation := newMateriaMutation(c.config, OpUpdateOne, withMateriaID(id))
	return &MateriaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Materia.
func (c *MateriaClient) Delete() *MateriaDelete {
	mutation := newMateriaMutation(c.config, OpDelete)
	return &MateriaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MateriaClient) DeleteOne(m *Materia) *MateriaDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MateriaClient) DeleteOneID(id int) *MateriaDeleteOne {
	builder := c.Delete().Where(materia.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MateriaDeleteOne{builder}
}

// Query returns a query builder for Materia.
func (c *MateriaClient) Query() *MateriaQuery {
	return &MateriaQuery{
		config: c.config,
	}
}

// Get returns a Materia entity by its id.
func (c *MateriaClient) Get(ctx context.Context, id int) (*Materia, error) {
	return c.Query().Where(materia.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MateriaClient) GetX(ctx context.Context, id int) *Materia {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategoria queries the categoria edge of a Materia.
func (c *MateriaClient) QueryCategoria(m *Materia) *CategoriaQuery {
	query := &CategoriaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(materia.Table, materia.FieldID, id),
			sqlgraph.To(categoria.Table, categoria.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, materia.CategoriaTable, materia.CategoriaColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProfissionalMaterias queries the profissional_materias edge of a Materia.
func (c *MateriaClient) QueryProfissionalMaterias(m *Materia) *ProfissionalMateriasQuery {
	query := &ProfissionalMateriasQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(materia.Table, materia.FieldID, id),
			sqlgraph.To(profissionalmaterias.Table, profissionalmaterias.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, materia.ProfissionalMateriasTable, materia.ProfissionalMateriasColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MateriaClient) Hooks() []Hook {
	return c.hooks.Materia
}

// ProfissionalMateriasClient is a client for the ProfissionalMaterias schema.
type ProfissionalMateriasClient struct {
	config
}

// NewProfissionalMateriasClient returns a client for the ProfissionalMaterias from the given config.
func NewProfissionalMateriasClient(c config) *ProfissionalMateriasClient {
	return &ProfissionalMateriasClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `profissionalmaterias.Hooks(f(g(h())))`.
func (c *ProfissionalMateriasClient) Use(hooks ...Hook) {
	c.hooks.ProfissionalMaterias = append(c.hooks.ProfissionalMaterias, hooks...)
}

// Create returns a create builder for ProfissionalMaterias.
func (c *ProfissionalMateriasClient) Create() *ProfissionalMateriasCreate {
	mutation := newProfissionalMateriasMutation(c.config, OpCreate)
	return &ProfissionalMateriasCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProfissionalMaterias entities.
func (c *ProfissionalMateriasClient) CreateBulk(builders ...*ProfissionalMateriasCreate) *ProfissionalMateriasCreateBulk {
	return &ProfissionalMateriasCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProfissionalMaterias.
func (c *ProfissionalMateriasClient) Update() *ProfissionalMateriasUpdate {
	mutation := newProfissionalMateriasMutation(c.config, OpUpdate)
	return &ProfissionalMateriasUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProfissionalMateriasClient) UpdateOne(pm *ProfissionalMaterias) *ProfissionalMateriasUpdateOne {
	mutation := newProfissionalMateriasMutation(c.config, OpUpdateOne, withProfissionalMaterias(pm))
	return &ProfissionalMateriasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProfissionalMateriasClient) UpdateOneID(id int) *ProfissionalMateriasUpdateOne {
	mutation := newProfissionalMateriasMutation(c.config, OpUpdateOne, withProfissionalMateriasID(id))
	return &ProfissionalMateriasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProfissionalMaterias.
func (c *ProfissionalMateriasClient) Delete() *ProfissionalMateriasDelete {
	mutation := newProfissionalMateriasMutation(c.config, OpDelete)
	return &ProfissionalMateriasDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProfissionalMateriasClient) DeleteOne(pm *ProfissionalMaterias) *ProfissionalMateriasDeleteOne {
	return c.DeleteOneID(pm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProfissionalMateriasClient) DeleteOneID(id int) *ProfissionalMateriasDeleteOne {
	builder := c.Delete().Where(profissionalmaterias.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProfissionalMateriasDeleteOne{builder}
}

// Query returns a query builder for ProfissionalMaterias.
func (c *ProfissionalMateriasClient) Query() *ProfissionalMateriasQuery {
	return &ProfissionalMateriasQuery{
		config: c.config,
	}
}

// Get returns a ProfissionalMaterias entity by its id.
func (c *ProfissionalMateriasClient) Get(ctx context.Context, id int) (*ProfissionalMaterias, error) {
	return c.Query().Where(profissionalmaterias.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProfissionalMateriasClient) GetX(ctx context.Context, id int) *ProfissionalMaterias {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMateria queries the materia edge of a ProfissionalMaterias.
func (c *ProfissionalMateriasClient) QueryMateria(pm *ProfissionalMaterias) *MateriaQuery {
	query := &MateriaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profissionalmaterias.Table, profissionalmaterias.FieldID, id),
			sqlgraph.To(materia.Table, materia.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, profissionalmaterias.MateriaTable, profissionalmaterias.MateriaColumn),
		)
		fromV = sqlgraph.Neighbors(pm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProfissionalMateriasClient) Hooks() []Hook {
	return c.hooks.ProfissionalMaterias
}
