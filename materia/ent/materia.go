// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"materia/ent/categoria"
	"materia/ent/materia"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Materia is the model entity for the Materia schema.
type Materia struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UnidadeID holds the value of the "unidade_id" field.
	UnidadeID int `json:"unidade_id,omitempty"`
	// Titulo holds the value of the "titulo" field.
	Titulo string `json:"titulo,omitempty"`
	// URLAmigavel holds the value of the "url_amigavel" field.
	URLAmigavel string `json:"url_amigavel,omitempty"`
	// DataAgendamento holds the value of the "data_agendamento" field.
	DataAgendamento time.Time `json:"data_agendamento,omitempty"`
	// Fonte holds the value of the "fonte" field.
	Fonte string `json:"fonte,omitempty"`
	// LinkFonte holds the value of the "link_fonte" field.
	LinkFonte string `json:"link_fonte,omitempty"`
	// Texto holds the value of the "texto" field.
	Texto string `json:"texto,omitempty"`
	// ImagemURL holds the value of the "imagem_url" field.
	ImagemURL string `json:"imagem_url,omitempty"`
	// Patrocinado holds the value of the "patrocinado" field.
	Patrocinado bool `json:"patrocinado,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MateriaQuery when eager-loading is set.
	Edges              MateriaEdges `json:"edges"`
	categoria_materias *int
}

// MateriaEdges holds the relations/edges for other nodes in the graph.
type MateriaEdges struct {
	// Categoria holds the value of the categoria edge.
	Categoria *Categoria `json:"categoria,omitempty"`
	// ProfissionalMaterias holds the value of the profissional_materias edge.
	ProfissionalMaterias []*ProfissionalMaterias `json:"profissional_materias,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CategoriaOrErr returns the Categoria value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MateriaEdges) CategoriaOrErr() (*Categoria, error) {
	if e.loadedTypes[0] {
		if e.Categoria == nil {
			// The edge categoria was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: categoria.Label}
		}
		return e.Categoria, nil
	}
	return nil, &NotLoadedError{edge: "categoria"}
}

// ProfissionalMateriasOrErr returns the ProfissionalMaterias value or an error if the edge
// was not loaded in eager-loading.
func (e MateriaEdges) ProfissionalMateriasOrErr() ([]*ProfissionalMaterias, error) {
	if e.loadedTypes[1] {
		return e.ProfissionalMaterias, nil
	}
	return nil, &NotLoadedError{edge: "profissional_materias"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Materia) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case materia.FieldPatrocinado, materia.FieldStatus:
			values[i] = new(sql.NullBool)
		case materia.FieldID, materia.FieldUnidadeID:
			values[i] = new(sql.NullInt64)
		case materia.FieldTitulo, materia.FieldURLAmigavel, materia.FieldFonte, materia.FieldLinkFonte, materia.FieldTexto, materia.FieldImagemURL:
			values[i] = new(sql.NullString)
		case materia.FieldDataAgendamento:
			values[i] = new(sql.NullTime)
		case materia.ForeignKeys[0]: // categoria_materias
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Materia", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Materia fields.
func (m *Materia) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case materia.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case materia.FieldUnidadeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unidade_id", values[i])
			} else if value.Valid {
				m.UnidadeID = int(value.Int64)
			}
		case materia.FieldTitulo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field titulo", values[i])
			} else if value.Valid {
				m.Titulo = value.String
			}
		case materia.FieldURLAmigavel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url_amigavel", values[i])
			} else if value.Valid {
				m.URLAmigavel = value.String
			}
		case materia.FieldDataAgendamento:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field data_agendamento", values[i])
			} else if value.Valid {
				m.DataAgendamento = value.Time
			}
		case materia.FieldFonte:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fonte", values[i])
			} else if value.Valid {
				m.Fonte = value.String
			}
		case materia.FieldLinkFonte:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link_fonte", values[i])
			} else if value.Valid {
				m.LinkFonte = value.String
			}
		case materia.FieldTexto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field texto", values[i])
			} else if value.Valid {
				m.Texto = value.String
			}
		case materia.FieldImagemURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field imagem_url", values[i])
			} else if value.Valid {
				m.ImagemURL = value.String
			}
		case materia.FieldPatrocinado:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field patrocinado", values[i])
			} else if value.Valid {
				m.Patrocinado = value.Bool
			}
		case materia.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				m.Status = value.Bool
			}
		case materia.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field categoria_materias", value)
			} else if value.Valid {
				m.categoria_materias = new(int)
				*m.categoria_materias = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCategoria queries the "categoria" edge of the Materia entity.
func (m *Materia) QueryCategoria() *CategoriaQuery {
	return (&MateriaClient{config: m.config}).QueryCategoria(m)
}

// QueryProfissionalMaterias queries the "profissional_materias" edge of the Materia entity.
func (m *Materia) QueryProfissionalMaterias() *ProfissionalMateriasQuery {
	return (&MateriaClient{config: m.config}).QueryProfissionalMaterias(m)
}

// Update returns a builder for updating this Materia.
// Note that you need to call Materia.Unwrap() before calling this method if this Materia
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Materia) Update() *MateriaUpdateOne {
	return (&MateriaClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Materia entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Materia) Unwrap() *Materia {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Materia is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Materia) String() string {
	var builder strings.Builder
	builder.WriteString("Materia(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", unidade_id=")
	builder.WriteString(fmt.Sprintf("%v", m.UnidadeID))
	builder.WriteString(", titulo=")
	builder.WriteString(m.Titulo)
	builder.WriteString(", url_amigavel=")
	builder.WriteString(m.URLAmigavel)
	builder.WriteString(", data_agendamento=")
	builder.WriteString(m.DataAgendamento.Format(time.ANSIC))
	builder.WriteString(", fonte=")
	builder.WriteString(m.Fonte)
	builder.WriteString(", link_fonte=")
	builder.WriteString(m.LinkFonte)
	builder.WriteString(", texto=")
	builder.WriteString(m.Texto)
	builder.WriteString(", imagem_url=")
	builder.WriteString(m.ImagemURL)
	builder.WriteString(", patrocinado=")
	builder.WriteString(fmt.Sprintf("%v", m.Patrocinado))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", m.Status))
	builder.WriteByte(')')
	return builder.String()
}

// MateriaSlice is a parsable slice of Materia.
type MateriaSlice []*Materia

func (m MateriaSlice) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
