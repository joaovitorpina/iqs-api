// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"materia/ent/materia"
	"materia/ent/profissionalmaterias"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// ProfissionalMaterias is the model entity for the ProfissionalMaterias schema.
type ProfissionalMaterias struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfissionalMateriasQuery when eager-loading is set.
	Edges                         ProfissionalMateriasEdges `json:"edges"`
	materia_profissional_materias *int
}

// ProfissionalMateriasEdges holds the relations/edges for other nodes in the graph.
type ProfissionalMateriasEdges struct {
	// Materia holds the value of the materia edge.
	Materia *Materia `json:"materia,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MateriaOrErr returns the Materia value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfissionalMateriasEdges) MateriaOrErr() (*Materia, error) {
	if e.loadedTypes[0] {
		if e.Materia == nil {
			// The edge materia was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: materia.Label}
		}
		return e.Materia, nil
	}
	return nil, &NotLoadedError{edge: "materia"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProfissionalMaterias) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case profissionalmaterias.FieldID:
			values[i] = new(sql.NullInt64)
		case profissionalmaterias.ForeignKeys[0]: // materia_profissional_materias
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProfissionalMaterias", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProfissionalMaterias fields.
func (pm *ProfissionalMaterias) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profissionalmaterias.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pm.ID = int(value.Int64)
		case profissionalmaterias.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field materia_profissional_materias", value)
			} else if value.Valid {
				pm.materia_profissional_materias = new(int)
				*pm.materia_profissional_materias = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMateria queries the "materia" edge of the ProfissionalMaterias entity.
func (pm *ProfissionalMaterias) QueryMateria() *MateriaQuery {
	return (&ProfissionalMateriasClient{config: pm.config}).QueryMateria(pm)
}

// Update returns a builder for updating this ProfissionalMaterias.
// Note that you need to call ProfissionalMaterias.Unwrap() before calling this method if this ProfissionalMaterias
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *ProfissionalMaterias) Update() *ProfissionalMateriasUpdateOne {
	return (&ProfissionalMateriasClient{config: pm.config}).UpdateOne(pm)
}

// Unwrap unwraps the ProfissionalMaterias entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *ProfissionalMaterias) Unwrap() *ProfissionalMaterias {
	tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProfissionalMaterias is not a transactional entity")
	}
	pm.config.driver = tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *ProfissionalMaterias) String() string {
	var builder strings.Builder
	builder.WriteString("ProfissionalMaterias(")
	builder.WriteString(fmt.Sprintf("id=%v", pm.ID))
	builder.WriteByte(')')
	return builder.String()
}

// ProfissionalMateriasSlice is a parsable slice of ProfissionalMaterias.
type ProfissionalMateriasSlice []*ProfissionalMaterias

func (pm ProfissionalMateriasSlice) config(cfg config) {
	for _i := range pm {
		pm[_i].config = cfg
	}
}
