// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"materia/ent/categoria"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Categoria is the model entity for the Categoria schema.
type Categoria struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Descricao holds the value of the "descricao" field.
	Descricao string `json:"descricao,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CategoriaQuery when eager-loading is set.
	Edges CategoriaEdges `json:"edges"`
}

// CategoriaEdges holds the relations/edges for other nodes in the graph.
type CategoriaEdges struct {
	// Materias holds the value of the materias edge.
	Materias []*Materia `json:"materias,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MateriasOrErr returns the Materias value or an error if the edge
// was not loaded in eager-loading.
func (e CategoriaEdges) MateriasOrErr() ([]*Materia, error) {
	if e.loadedTypes[0] {
		return e.Materias, nil
	}
	return nil, &NotLoadedError{edge: "materias"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Categoria) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case categoria.FieldID:
			values[i] = new(sql.NullInt64)
		case categoria.FieldDescricao:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Categoria", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Categoria fields.
func (c *Categoria) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case categoria.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case categoria.FieldDescricao:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field descricao", values[i])
			} else if value.Valid {
				c.Descricao = value.String
			}
		}
	}
	return nil
}

// QueryMaterias queries the "materias" edge of the Categoria entity.
func (c *Categoria) QueryMaterias() *MateriaQuery {
	return (&CategoriaClient{config: c.config}).QueryMaterias(c)
}

// Update returns a builder for updating this Categoria.
// Note that you need to call Categoria.Unwrap() before calling this method if this Categoria
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Categoria) Update() *CategoriaUpdateOne {
	return (&CategoriaClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Categoria entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Categoria) Unwrap() *Categoria {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Categoria is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Categoria) String() string {
	var builder strings.Builder
	builder.WriteString("Categoria(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", descricao=")
	builder.WriteString(c.Descricao)
	builder.WriteByte(')')
	return builder.String()
}

// CategoriaSlice is a parsable slice of Categoria.
type CategoriaSlice []*Categoria

func (c CategoriaSlice) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
