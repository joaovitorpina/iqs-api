// Code generated by entc, DO NOT EDIT.

package cep

import (
	"endereco/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Logradouro applies equality check predicate on the "logradouro" field. It's identical to LogradouroEQ.
func Logradouro(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogradouro), v))
	})
}

// Bairro applies equality check predicate on the "bairro" field. It's identical to BairroEQ.
func Bairro(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBairro), v))
	})
}

// LogradouroEQ applies the EQ predicate on the "logradouro" field.
func LogradouroEQ(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogradouro), v))
	})
}

// LogradouroNEQ applies the NEQ predicate on the "logradouro" field.
func LogradouroNEQ(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLogradouro), v))
	})
}

// LogradouroIn applies the In predicate on the "logradouro" field.
func LogradouroIn(vs ...string) predicate.Cep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cep(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLogradouro), v...))
	})
}

// LogradouroNotIn applies the NotIn predicate on the "logradouro" field.
func LogradouroNotIn(vs ...string) predicate.Cep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cep(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLogradouro), v...))
	})
}

// LogradouroGT applies the GT predicate on the "logradouro" field.
func LogradouroGT(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLogradouro), v))
	})
}

// LogradouroGTE applies the GTE predicate on the "logradouro" field.
func LogradouroGTE(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLogradouro), v))
	})
}

// LogradouroLT applies the LT predicate on the "logradouro" field.
func LogradouroLT(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLogradouro), v))
	})
}

// LogradouroLTE applies the LTE predicate on the "logradouro" field.
func LogradouroLTE(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLogradouro), v))
	})
}

// LogradouroContains applies the Contains predicate on the "logradouro" field.
func LogradouroContains(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLogradouro), v))
	})
}

// LogradouroHasPrefix applies the HasPrefix predicate on the "logradouro" field.
func LogradouroHasPrefix(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLogradouro), v))
	})
}

// LogradouroHasSuffix applies the HasSuffix predicate on the "logradouro" field.
func LogradouroHasSuffix(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLogradouro), v))
	})
}

// LogradouroEqualFold applies the EqualFold predicate on the "logradouro" field.
func LogradouroEqualFold(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLogradouro), v))
	})
}

// LogradouroContainsFold applies the ContainsFold predicate on the "logradouro" field.
func LogradouroContainsFold(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLogradouro), v))
	})
}

// BairroEQ applies the EQ predicate on the "bairro" field.
func BairroEQ(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBairro), v))
	})
}

// BairroNEQ applies the NEQ predicate on the "bairro" field.
func BairroNEQ(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBairro), v))
	})
}

// BairroIn applies the In predicate on the "bairro" field.
func BairroIn(vs ...string) predicate.Cep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cep(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBairro), v...))
	})
}

// BairroNotIn applies the NotIn predicate on the "bairro" field.
func BairroNotIn(vs ...string) predicate.Cep {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cep(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBairro), v...))
	})
}

// BairroGT applies the GT predicate on the "bairro" field.
func BairroGT(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBairro), v))
	})
}

// BairroGTE applies the GTE predicate on the "bairro" field.
func BairroGTE(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBairro), v))
	})
}

// BairroLT applies the LT predicate on the "bairro" field.
func BairroLT(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBairro), v))
	})
}

// BairroLTE applies the LTE predicate on the "bairro" field.
func BairroLTE(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBairro), v))
	})
}

// BairroContains applies the Contains predicate on the "bairro" field.
func BairroContains(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBairro), v))
	})
}

// BairroHasPrefix applies the HasPrefix predicate on the "bairro" field.
func BairroHasPrefix(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBairro), v))
	})
}

// BairroHasSuffix applies the HasSuffix predicate on the "bairro" field.
func BairroHasSuffix(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBairro), v))
	})
}

// BairroEqualFold applies the EqualFold predicate on the "bairro" field.
func BairroEqualFold(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBairro), v))
	})
}

// BairroContainsFold applies the ContainsFold predicate on the "bairro" field.
func BairroContainsFold(v string) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBairro), v))
	})
}

// HasCidade applies the HasEdge predicate on the "cidade" edge.
func HasCidade() predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CidadeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CidadeTable, CidadeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCidadeWith applies the HasEdge predicate on the "cidade" edge with a given conditions (other predicates).
func HasCidadeWith(preds ...predicate.Cidade) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CidadeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CidadeTable, CidadeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnderecos applies the HasEdge predicate on the "enderecos" edge.
func HasEnderecos() predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EnderecosTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnderecosTable, EnderecosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnderecosWith applies the HasEdge predicate on the "enderecos" edge with a given conditions (other predicates).
func HasEnderecosWith(preds ...predicate.Endereco) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EnderecosInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EnderecosTable, EnderecosColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cep) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cep) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cep) predicate.Cep {
	return predicate.Cep(func(s *sql.Selector) {
		p(s.Not())
	})
}
