// Code generated by entc, DO NOT EDIT.

package cep

const (
	// Label holds the string label denoting the cep type in the database.
	Label = "cep"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLogradouro holds the string denoting the logradouro field in the database.
	FieldLogradouro = "logradouro"
	// FieldBairro holds the string denoting the bairro field in the database.
	FieldBairro = "bairro"
	// EdgeCidade holds the string denoting the cidade edge name in mutations.
	EdgeCidade = "cidade"
	// EdgeEnderecos holds the string denoting the enderecos edge name in mutations.
	EdgeEnderecos = "enderecos"
	// Table holds the table name of the cep in the database.
	Table = "ceps"
	// CidadeTable is the table that holds the cidade relation/edge.
	CidadeTable = "ceps"
	// CidadeInverseTable is the table name for the Cidade entity.
	// It exists in this package in order to avoid circular dependency with the "cidade" package.
	CidadeInverseTable = "cidades"
	// CidadeColumn is the table column denoting the cidade relation/edge.
	CidadeColumn = "cidade_ceps"
	// EnderecosTable is the table that holds the enderecos relation/edge.
	EnderecosTable = "enderecos"
	// EnderecosInverseTable is the table name for the Endereco entity.
	// It exists in this package in order to avoid circular dependency with the "endereco" package.
	EnderecosInverseTable = "enderecos"
	// EnderecosColumn is the table column denoting the enderecos relation/edge.
	EnderecosColumn = "cep_enderecos"
)

// Columns holds all SQL columns for cep fields.
var Columns = []string{
	FieldID,
	FieldLogradouro,
	FieldBairro,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ceps"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"cidade_ceps",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// LogradouroValidator is a validator for the "logradouro" field. It is called by the builders before save.
	LogradouroValidator func(string) error
	// BairroValidator is a validator for the "bairro" field. It is called by the builders before save.
	BairroValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int32) error
)
