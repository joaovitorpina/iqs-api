// Code generated by entc, DO NOT EDIT.

package ent

import (
	"endereco/ent/cep"
	"endereco/ent/cidade"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Cep is the model entity for the Cep schema.
type Cep struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Logradouro holds the value of the "logradouro" field.
	Logradouro string `json:"logradouro,omitempty"`
	// Bairro holds the value of the "bairro" field.
	Bairro string `json:"bairro,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CepQuery when eager-loading is set.
	Edges       CepEdges `json:"edges"`
	cidade_ceps *int
}

// CepEdges holds the relations/edges for other nodes in the graph.
type CepEdges struct {
	// Cidade holds the value of the cidade edge.
	Cidade *Cidade `json:"cidade,omitempty"`
	// Enderecos holds the value of the enderecos edge.
	Enderecos []*Endereco `json:"enderecos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CidadeOrErr returns the Cidade value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CepEdges) CidadeOrErr() (*Cidade, error) {
	if e.loadedTypes[0] {
		if e.Cidade == nil {
			// The edge cidade was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cidade.Label}
		}
		return e.Cidade, nil
	}
	return nil, &NotLoadedError{edge: "cidade"}
}

// EnderecosOrErr returns the Enderecos value or an error if the edge
// was not loaded in eager-loading.
func (e CepEdges) EnderecosOrErr() ([]*Endereco, error) {
	if e.loadedTypes[1] {
		return e.Enderecos, nil
	}
	return nil, &NotLoadedError{edge: "enderecos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cep) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cep.FieldID:
			values[i] = new(sql.NullInt64)
		case cep.FieldLogradouro, cep.FieldBairro:
			values[i] = new(sql.NullString)
		case cep.ForeignKeys[0]: // cidade_ceps
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Cep", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cep fields.
func (c *Cep) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cep.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int32(value.Int64)
		case cep.FieldLogradouro:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logradouro", values[i])
			} else if value.Valid {
				c.Logradouro = value.String
			}
		case cep.FieldBairro:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bairro", values[i])
			} else if value.Valid {
				c.Bairro = value.String
			}
		case cep.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field cidade_ceps", value)
			} else if value.Valid {
				c.cidade_ceps = new(int)
				*c.cidade_ceps = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCidade queries the "cidade" edge of the Cep entity.
func (c *Cep) QueryCidade() *CidadeQuery {
	return (&CepClient{config: c.config}).QueryCidade(c)
}

// QueryEnderecos queries the "enderecos" edge of the Cep entity.
func (c *Cep) QueryEnderecos() *EnderecoQuery {
	return (&CepClient{config: c.config}).QueryEnderecos(c)
}

// Update returns a builder for updating this Cep.
// Note that you need to call Cep.Unwrap() before calling this method if this Cep
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cep) Update() *CepUpdateOne {
	return (&CepClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Cep entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cep) Unwrap() *Cep {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cep is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cep) String() string {
	var builder strings.Builder
	builder.WriteString("Cep(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", logradouro=")
	builder.WriteString(c.Logradouro)
	builder.WriteString(", bairro=")
	builder.WriteString(c.Bairro)
	builder.WriteByte(')')
	return builder.String()
}

// Ceps is a parsable slice of Cep.
type Ceps []*Cep

func (c Ceps) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
