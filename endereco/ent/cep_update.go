// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"endereco/ent/cep"
	"endereco/ent/cidade"
	"endereco/ent/endereco"
	"endereco/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CepUpdate is the builder for updating Cep entities.
type CepUpdate struct {
	config
	hooks    []Hook
	mutation *CepMutation
}

// Where appends a list predicates to the CepUpdate builder.
func (cu *CepUpdate) Where(ps ...predicate.Cep) *CepUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetLogradouro sets the "logradouro" field.
func (cu *CepUpdate) SetLogradouro(s string) *CepUpdate {
	cu.mutation.SetLogradouro(s)
	return cu
}

// SetBairro sets the "bairro" field.
func (cu *CepUpdate) SetBairro(s string) *CepUpdate {
	cu.mutation.SetBairro(s)
	return cu
}

// SetCidadeID sets the "cidade" edge to the Cidade entity by ID.
func (cu *CepUpdate) SetCidadeID(id int) *CepUpdate {
	cu.mutation.SetCidadeID(id)
	return cu
}

// SetCidade sets the "cidade" edge to the Cidade entity.
func (cu *CepUpdate) SetCidade(c *Cidade) *CepUpdate {
	return cu.SetCidadeID(c.ID)
}

// AddEnderecoIDs adds the "enderecos" edge to the Endereco entity by IDs.
func (cu *CepUpdate) AddEnderecoIDs(ids ...int) *CepUpdate {
	cu.mutation.AddEnderecoIDs(ids...)
	return cu
}

// AddEnderecos adds the "enderecos" edges to the Endereco entity.
func (cu *CepUpdate) AddEnderecos(e ...*Endereco) *CepUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddEnderecoIDs(ids...)
}

// Mutation returns the CepMutation object of the builder.
func (cu *CepUpdate) Mutation() *CepMutation {
	return cu.mutation
}

// ClearCidade clears the "cidade" edge to the Cidade entity.
func (cu *CepUpdate) ClearCidade() *CepUpdate {
	cu.mutation.ClearCidade()
	return cu
}

// ClearEnderecos clears all "enderecos" edges to the Endereco entity.
func (cu *CepUpdate) ClearEnderecos() *CepUpdate {
	cu.mutation.ClearEnderecos()
	return cu
}

// RemoveEnderecoIDs removes the "enderecos" edge to Endereco entities by IDs.
func (cu *CepUpdate) RemoveEnderecoIDs(ids ...int) *CepUpdate {
	cu.mutation.RemoveEnderecoIDs(ids...)
	return cu
}

// RemoveEnderecos removes "enderecos" edges to Endereco entities.
func (cu *CepUpdate) RemoveEnderecos(e ...*Endereco) *CepUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveEnderecoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CepUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CepUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CepUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CepUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CepUpdate) check() error {
	if v, ok := cu.mutation.Logradouro(); ok {
		if err := cep.LogradouroValidator(v); err != nil {
			return &ValidationError{Name: "logradouro", err: fmt.Errorf(`ent: validator failed for field "Cep.logradouro": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Bairro(); ok {
		if err := cep.BairroValidator(v); err != nil {
			return &ValidationError{Name: "bairro", err: fmt.Errorf(`ent: validator failed for field "Cep.bairro": %w`, err)}
		}
	}
	if _, ok := cu.mutation.CidadeID(); cu.mutation.CidadeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Cep.cidade"`)
	}
	return nil
}

func (cu *CepUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cep.Table,
			Columns: cep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: cep.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Logradouro(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cep.FieldLogradouro,
		})
	}
	if value, ok := cu.mutation.Bairro(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cep.FieldBairro,
		})
	}
	if cu.mutation.CidadeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cep.CidadeTable,
			Columns: []string{cep.CidadeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cidade.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CidadeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cep.CidadeTable,
			Columns: []string{cep.CidadeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cidade.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EnderecosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cep.EnderecosTable,
			Columns: []string{cep.EnderecosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endereco.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedEnderecosIDs(); len(nodes) > 0 && !cu.mutation.EnderecosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cep.EnderecosTable,
			Columns: []string{cep.EnderecosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endereco.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EnderecosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cep.EnderecosTable,
			Columns: []string{cep.EnderecosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endereco.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CepUpdateOne is the builder for updating a single Cep entity.
type CepUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CepMutation
}

// SetLogradouro sets the "logradouro" field.
func (cuo *CepUpdateOne) SetLogradouro(s string) *CepUpdateOne {
	cuo.mutation.SetLogradouro(s)
	return cuo
}

// SetBairro sets the "bairro" field.
func (cuo *CepUpdateOne) SetBairro(s string) *CepUpdateOne {
	cuo.mutation.SetBairro(s)
	return cuo
}

// SetCidadeID sets the "cidade" edge to the Cidade entity by ID.
func (cuo *CepUpdateOne) SetCidadeID(id int) *CepUpdateOne {
	cuo.mutation.SetCidadeID(id)
	return cuo
}

// SetCidade sets the "cidade" edge to the Cidade entity.
func (cuo *CepUpdateOne) SetCidade(c *Cidade) *CepUpdateOne {
	return cuo.SetCidadeID(c.ID)
}

// AddEnderecoIDs adds the "enderecos" edge to the Endereco entity by IDs.
func (cuo *CepUpdateOne) AddEnderecoIDs(ids ...int) *CepUpdateOne {
	cuo.mutation.AddEnderecoIDs(ids...)
	return cuo
}

// AddEnderecos adds the "enderecos" edges to the Endereco entity.
func (cuo *CepUpdateOne) AddEnderecos(e ...*Endereco) *CepUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddEnderecoIDs(ids...)
}

// Mutation returns the CepMutation object of the builder.
func (cuo *CepUpdateOne) Mutation() *CepMutation {
	return cuo.mutation
}

// ClearCidade clears the "cidade" edge to the Cidade entity.
func (cuo *CepUpdateOne) ClearCidade() *CepUpdateOne {
	cuo.mutation.ClearCidade()
	return cuo
}

// ClearEnderecos clears all "enderecos" edges to the Endereco entity.
func (cuo *CepUpdateOne) ClearEnderecos() *CepUpdateOne {
	cuo.mutation.ClearEnderecos()
	return cuo
}

// RemoveEnderecoIDs removes the "enderecos" edge to Endereco entities by IDs.
func (cuo *CepUpdateOne) RemoveEnderecoIDs(ids ...int) *CepUpdateOne {
	cuo.mutation.RemoveEnderecoIDs(ids...)
	return cuo
}

// RemoveEnderecos removes "enderecos" edges to Endereco entities.
func (cuo *CepUpdateOne) RemoveEnderecos(e ...*Endereco) *CepUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveEnderecoIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CepUpdateOne) Select(field string, fields ...string) *CepUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cep entity.
func (cuo *CepUpdateOne) Save(ctx context.Context) (*Cep, error) {
	var (
		err  error
		node *Cep
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CepUpdateOne) SaveX(ctx context.Context) *Cep {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CepUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CepUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CepUpdateOne) check() error {
	if v, ok := cuo.mutation.Logradouro(); ok {
		if err := cep.LogradouroValidator(v); err != nil {
			return &ValidationError{Name: "logradouro", err: fmt.Errorf(`ent: validator failed for field "Cep.logradouro": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Bairro(); ok {
		if err := cep.BairroValidator(v); err != nil {
			return &ValidationError{Name: "bairro", err: fmt.Errorf(`ent: validator failed for field "Cep.bairro": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.CidadeID(); cuo.mutation.CidadeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Cep.cidade"`)
	}
	return nil
}

func (cuo *CepUpdateOne) sqlSave(ctx context.Context) (_node *Cep, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cep.Table,
			Columns: cep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: cep.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cep.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cep.FieldID)
		for _, f := range fields {
			if !cep.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Logradouro(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cep.FieldLogradouro,
		})
	}
	if value, ok := cuo.mutation.Bairro(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cep.FieldBairro,
		})
	}
	if cuo.mutation.CidadeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cep.CidadeTable,
			Columns: []string{cep.CidadeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cidade.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CidadeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cep.CidadeTable,
			Columns: []string{cep.CidadeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cidade.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EnderecosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cep.EnderecosTable,
			Columns: []string{cep.EnderecosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endereco.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedEnderecosIDs(); len(nodes) > 0 && !cuo.mutation.EnderecosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cep.EnderecosTable,
			Columns: []string{cep.EnderecosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endereco.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EnderecosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cep.EnderecosTable,
			Columns: []string{cep.EnderecosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endereco.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Cep{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
