// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"endereco/ent/cidade"
	"endereco/ent/estado"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EstadoCreate is the builder for creating a Estado entity.
type EstadoCreate struct {
	config
	mutation *EstadoMutation
	hooks    []Hook
}

// SetNome sets the "nome" field.
func (ec *EstadoCreate) SetNome(s string) *EstadoCreate {
	ec.mutation.SetNome(s)
	return ec
}

// AddCidadeIDs adds the "cidades" edge to the Cidade entity by IDs.
func (ec *EstadoCreate) AddCidadeIDs(ids ...int) *EstadoCreate {
	ec.mutation.AddCidadeIDs(ids...)
	return ec
}

// AddCidades adds the "cidades" edges to the Cidade entity.
func (ec *EstadoCreate) AddCidades(c ...*Cidade) *EstadoCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ec.AddCidadeIDs(ids...)
}

// Mutation returns the EstadoMutation object of the builder.
func (ec *EstadoCreate) Mutation() *EstadoMutation {
	return ec.mutation
}

// Save creates the Estado in the database.
func (ec *EstadoCreate) Save(ctx context.Context) (*Estado, error) {
	var (
		err  error
		node *Estado
	)
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EstadoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EstadoCreate) SaveX(ctx context.Context) *Estado {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EstadoCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EstadoCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EstadoCreate) check() error {
	if _, ok := ec.mutation.Nome(); !ok {
		return &ValidationError{Name: "nome", err: errors.New(`ent: missing required field "Estado.nome"`)}
	}
	if v, ok := ec.mutation.Nome(); ok {
		if err := estado.NomeValidator(v); err != nil {
			return &ValidationError{Name: "nome", err: fmt.Errorf(`ent: validator failed for field "Estado.nome": %w`, err)}
		}
	}
	return nil
}

func (ec *EstadoCreate) sqlSave(ctx context.Context) (*Estado, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ec *EstadoCreate) createSpec() (*Estado, *sqlgraph.CreateSpec) {
	var (
		_node = &Estado{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: estado.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: estado.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.Nome(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: estado.FieldNome,
		})
		_node.Nome = value
	}
	if nodes := ec.mutation.CidadesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   estado.CidadesTable,
			Columns: []string{estado.CidadesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cidade.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EstadoCreateBulk is the builder for creating many Estado entities in bulk.
type EstadoCreateBulk struct {
	config
	builders []*EstadoCreate
}

// Save creates the Estado entities in the database.
func (ecb *EstadoCreateBulk) Save(ctx context.Context) ([]*Estado, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Estado, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EstadoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EstadoCreateBulk) SaveX(ctx context.Context) []*Estado {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EstadoCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EstadoCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
