// Code generated by entc, DO NOT EDIT.

package ent

import (
	"endereco/ent/cep"
	"endereco/ent/endereco"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Endereco is the model entity for the Endereco schema.
type Endereco struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Numero holds the value of the "numero" field.
	Numero string `json:"numero,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnderecoQuery when eager-loading is set.
	Edges         EnderecoEdges `json:"edges"`
	cep_enderecos *int32
}

// EnderecoEdges holds the relations/edges for other nodes in the graph.
type EnderecoEdges struct {
	// Cep holds the value of the cep edge.
	Cep *Cep `json:"cep,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CepOrErr returns the Cep value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnderecoEdges) CepOrErr() (*Cep, error) {
	if e.loadedTypes[0] {
		if e.Cep == nil {
			// The edge cep was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cep.Label}
		}
		return e.Cep, nil
	}
	return nil, &NotLoadedError{edge: "cep"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Endereco) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case endereco.FieldID:
			values[i] = new(sql.NullInt64)
		case endereco.FieldNumero:
			values[i] = new(sql.NullString)
		case endereco.ForeignKeys[0]: // cep_enderecos
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Endereco", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Endereco fields.
func (e *Endereco) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case endereco.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case endereco.FieldNumero:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field numero", values[i])
			} else if value.Valid {
				e.Numero = value.String
			}
		case endereco.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field cep_enderecos", value)
			} else if value.Valid {
				e.cep_enderecos = new(int32)
				*e.cep_enderecos = int32(value.Int64)
			}
		}
	}
	return nil
}

// QueryCep queries the "cep" edge of the Endereco entity.
func (e *Endereco) QueryCep() *CepQuery {
	return (&EnderecoClient{config: e.config}).QueryCep(e)
}

// Update returns a builder for updating this Endereco.
// Note that you need to call Endereco.Unwrap() before calling this method if this Endereco
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Endereco) Update() *EnderecoUpdateOne {
	return (&EnderecoClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Endereco entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Endereco) Unwrap() *Endereco {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Endereco is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Endereco) String() string {
	var builder strings.Builder
	builder.WriteString("Endereco(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", numero=")
	builder.WriteString(e.Numero)
	builder.WriteByte(')')
	return builder.String()
}

// Enderecos is a parsable slice of Endereco.
type Enderecos []*Endereco

func (e Enderecos) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
