// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"endereco/ent/cep"
	"endereco/ent/cidade"
	"endereco/ent/estado"
	"endereco/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CidadeUpdate is the builder for updating Cidade entities.
type CidadeUpdate struct {
	config
	hooks    []Hook
	mutation *CidadeMutation
}

// Where appends a list predicates to the CidadeUpdate builder.
func (cu *CidadeUpdate) Where(ps ...predicate.Cidade) *CidadeUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetNome sets the "nome" field.
func (cu *CidadeUpdate) SetNome(s string) *CidadeUpdate {
	cu.mutation.SetNome(s)
	return cu
}

// SetEstadoID sets the "estado" edge to the Estado entity by ID.
func (cu *CidadeUpdate) SetEstadoID(id int) *CidadeUpdate {
	cu.mutation.SetEstadoID(id)
	return cu
}

// SetEstado sets the "estado" edge to the Estado entity.
func (cu *CidadeUpdate) SetEstado(e *Estado) *CidadeUpdate {
	return cu.SetEstadoID(e.ID)
}

// AddCepIDs adds the "ceps" edge to the Cep entity by IDs.
func (cu *CidadeUpdate) AddCepIDs(ids ...int32) *CidadeUpdate {
	cu.mutation.AddCepIDs(ids...)
	return cu
}

// AddCeps adds the "ceps" edges to the Cep entity.
func (cu *CidadeUpdate) AddCeps(c ...*Cep) *CidadeUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCepIDs(ids...)
}

// Mutation returns the CidadeMutation object of the builder.
func (cu *CidadeUpdate) Mutation() *CidadeMutation {
	return cu.mutation
}

// ClearEstado clears the "estado" edge to the Estado entity.
func (cu *CidadeUpdate) ClearEstado() *CidadeUpdate {
	cu.mutation.ClearEstado()
	return cu
}

// ClearCeps clears all "ceps" edges to the Cep entity.
func (cu *CidadeUpdate) ClearCeps() *CidadeUpdate {
	cu.mutation.ClearCeps()
	return cu
}

// RemoveCepIDs removes the "ceps" edge to Cep entities by IDs.
func (cu *CidadeUpdate) RemoveCepIDs(ids ...int32) *CidadeUpdate {
	cu.mutation.RemoveCepIDs(ids...)
	return cu
}

// RemoveCeps removes "ceps" edges to Cep entities.
func (cu *CidadeUpdate) RemoveCeps(c ...*Cep) *CidadeUpdate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCepIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CidadeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CidadeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CidadeUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CidadeUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CidadeUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CidadeUpdate) check() error {
	if v, ok := cu.mutation.Nome(); ok {
		if err := cidade.NomeValidator(v); err != nil {
			return &ValidationError{Name: "nome", err: fmt.Errorf(`ent: validator failed for field "Cidade.nome": %w`, err)}
		}
	}
	if _, ok := cu.mutation.EstadoID(); cu.mutation.EstadoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Cidade.estado"`)
	}
	return nil
}

func (cu *CidadeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cidade.Table,
			Columns: cidade.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cidade.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Nome(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cidade.FieldNome,
		})
	}
	if cu.mutation.EstadoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cidade.EstadoTable,
			Columns: []string{cidade.EstadoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estado.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EstadoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cidade.EstadoTable,
			Columns: []string{cidade.EstadoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estado.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cidade.CepsTable,
			Columns: []string{cidade.CepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: cep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCepsIDs(); len(nodes) > 0 && !cu.mutation.CepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cidade.CepsTable,
			Columns: []string{cidade.CepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: cep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cidade.CepsTable,
			Columns: []string{cidade.CepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: cep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cidade.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CidadeUpdateOne is the builder for updating a single Cidade entity.
type CidadeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CidadeMutation
}

// SetNome sets the "nome" field.
func (cuo *CidadeUpdateOne) SetNome(s string) *CidadeUpdateOne {
	cuo.mutation.SetNome(s)
	return cuo
}

// SetEstadoID sets the "estado" edge to the Estado entity by ID.
func (cuo *CidadeUpdateOne) SetEstadoID(id int) *CidadeUpdateOne {
	cuo.mutation.SetEstadoID(id)
	return cuo
}

// SetEstado sets the "estado" edge to the Estado entity.
func (cuo *CidadeUpdateOne) SetEstado(e *Estado) *CidadeUpdateOne {
	return cuo.SetEstadoID(e.ID)
}

// AddCepIDs adds the "ceps" edge to the Cep entity by IDs.
func (cuo *CidadeUpdateOne) AddCepIDs(ids ...int32) *CidadeUpdateOne {
	cuo.mutation.AddCepIDs(ids...)
	return cuo
}

// AddCeps adds the "ceps" edges to the Cep entity.
func (cuo *CidadeUpdateOne) AddCeps(c ...*Cep) *CidadeUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCepIDs(ids...)
}

// Mutation returns the CidadeMutation object of the builder.
func (cuo *CidadeUpdateOne) Mutation() *CidadeMutation {
	return cuo.mutation
}

// ClearEstado clears the "estado" edge to the Estado entity.
func (cuo *CidadeUpdateOne) ClearEstado() *CidadeUpdateOne {
	cuo.mutation.ClearEstado()
	return cuo
}

// ClearCeps clears all "ceps" edges to the Cep entity.
func (cuo *CidadeUpdateOne) ClearCeps() *CidadeUpdateOne {
	cuo.mutation.ClearCeps()
	return cuo
}

// RemoveCepIDs removes the "ceps" edge to Cep entities by IDs.
func (cuo *CidadeUpdateOne) RemoveCepIDs(ids ...int32) *CidadeUpdateOne {
	cuo.mutation.RemoveCepIDs(ids...)
	return cuo
}

// RemoveCeps removes "ceps" edges to Cep entities.
func (cuo *CidadeUpdateOne) RemoveCeps(c ...*Cep) *CidadeUpdateOne {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCepIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CidadeUpdateOne) Select(field string, fields ...string) *CidadeUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cidade entity.
func (cuo *CidadeUpdateOne) Save(ctx context.Context) (*Cidade, error) {
	var (
		err  error
		node *Cidade
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CidadeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CidadeUpdateOne) SaveX(ctx context.Context) *Cidade {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CidadeUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CidadeUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CidadeUpdateOne) check() error {
	if v, ok := cuo.mutation.Nome(); ok {
		if err := cidade.NomeValidator(v); err != nil {
			return &ValidationError{Name: "nome", err: fmt.Errorf(`ent: validator failed for field "Cidade.nome": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.EstadoID(); cuo.mutation.EstadoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Cidade.estado"`)
	}
	return nil
}

func (cuo *CidadeUpdateOne) sqlSave(ctx context.Context) (_node *Cidade, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cidade.Table,
			Columns: cidade.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cidade.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cidade.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cidade.FieldID)
		for _, f := range fields {
			if !cidade.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cidade.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Nome(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cidade.FieldNome,
		})
	}
	if cuo.mutation.EstadoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cidade.EstadoTable,
			Columns: []string{cidade.EstadoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estado.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EstadoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cidade.EstadoTable,
			Columns: []string{cidade.EstadoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estado.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cidade.CepsTable,
			Columns: []string{cidade.CepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: cep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCepsIDs(); len(nodes) > 0 && !cuo.mutation.CepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cidade.CepsTable,
			Columns: []string{cidade.CepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: cep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cidade.CepsTable,
			Columns: []string{cidade.CepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: cep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Cidade{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cidade.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
