// Code generated by entc, DO NOT EDIT.

package ent

import (
	"endereco/ent/cidade"
	"endereco/ent/estado"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Cidade is the model entity for the Cidade schema.
type Cidade struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Nome holds the value of the "nome" field.
	Nome string `json:"nome,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CidadeQuery when eager-loading is set.
	Edges          CidadeEdges `json:"edges"`
	estado_cidades *int
}

// CidadeEdges holds the relations/edges for other nodes in the graph.
type CidadeEdges struct {
	// Estado holds the value of the estado edge.
	Estado *Estado `json:"estado,omitempty"`
	// Ceps holds the value of the ceps edge.
	Ceps []*Cep `json:"ceps,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EstadoOrErr returns the Estado value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CidadeEdges) EstadoOrErr() (*Estado, error) {
	if e.loadedTypes[0] {
		if e.Estado == nil {
			// The edge estado was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: estado.Label}
		}
		return e.Estado, nil
	}
	return nil, &NotLoadedError{edge: "estado"}
}

// CepsOrErr returns the Ceps value or an error if the edge
// was not loaded in eager-loading.
func (e CidadeEdges) CepsOrErr() ([]*Cep, error) {
	if e.loadedTypes[1] {
		return e.Ceps, nil
	}
	return nil, &NotLoadedError{edge: "ceps"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cidade) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cidade.FieldID:
			values[i] = new(sql.NullInt64)
		case cidade.FieldNome:
			values[i] = new(sql.NullString)
		case cidade.ForeignKeys[0]: // estado_cidades
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Cidade", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cidade fields.
func (c *Cidade) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cidade.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case cidade.FieldNome:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nome", values[i])
			} else if value.Valid {
				c.Nome = value.String
			}
		case cidade.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field estado_cidades", value)
			} else if value.Valid {
				c.estado_cidades = new(int)
				*c.estado_cidades = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEstado queries the "estado" edge of the Cidade entity.
func (c *Cidade) QueryEstado() *EstadoQuery {
	return (&CidadeClient{config: c.config}).QueryEstado(c)
}

// QueryCeps queries the "ceps" edge of the Cidade entity.
func (c *Cidade) QueryCeps() *CepQuery {
	return (&CidadeClient{config: c.config}).QueryCeps(c)
}

// Update returns a builder for updating this Cidade.
// Note that you need to call Cidade.Unwrap() before calling this method if this Cidade
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cidade) Update() *CidadeUpdateOne {
	return (&CidadeClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Cidade entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cidade) Unwrap() *Cidade {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cidade is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cidade) String() string {
	var builder strings.Builder
	builder.WriteString("Cidade(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", nome=")
	builder.WriteString(c.Nome)
	builder.WriteByte(')')
	return builder.String()
}

// Cidades is a parsable slice of Cidade.
type Cidades []*Cidade

func (c Cidades) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
