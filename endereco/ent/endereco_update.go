// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"endereco/ent/cep"
	"endereco/ent/endereco"
	"endereco/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EnderecoUpdate is the builder for updating Endereco entities.
type EnderecoUpdate struct {
	config
	hooks    []Hook
	mutation *EnderecoMutation
}

// Where appends a list predicates to the EnderecoUpdate builder.
func (eu *EnderecoUpdate) Where(ps ...predicate.Endereco) *EnderecoUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdateTime sets the "update_time" field.
func (eu *EnderecoUpdate) SetUpdateTime(t time.Time) *EnderecoUpdate {
	eu.mutation.SetUpdateTime(t)
	return eu
}

// SetNumero sets the "numero" field.
func (eu *EnderecoUpdate) SetNumero(s string) *EnderecoUpdate {
	eu.mutation.SetNumero(s)
	return eu
}

// SetCepID sets the "cep" edge to the Cep entity by ID.
func (eu *EnderecoUpdate) SetCepID(id int32) *EnderecoUpdate {
	eu.mutation.SetCepID(id)
	return eu
}

// SetCep sets the "cep" edge to the Cep entity.
func (eu *EnderecoUpdate) SetCep(c *Cep) *EnderecoUpdate {
	return eu.SetCepID(c.ID)
}

// Mutation returns the EnderecoMutation object of the builder.
func (eu *EnderecoUpdate) Mutation() *EnderecoMutation {
	return eu.mutation
}

// ClearCep clears the "cep" edge to the Cep entity.
func (eu *EnderecoUpdate) ClearCep() *EnderecoUpdate {
	eu.mutation.ClearCep()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EnderecoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	eu.defaults()
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnderecoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EnderecoUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EnderecoUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EnderecoUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EnderecoUpdate) defaults() {
	if _, ok := eu.mutation.UpdateTime(); !ok {
		v := endereco.UpdateDefaultUpdateTime()
		eu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EnderecoUpdate) check() error {
	if v, ok := eu.mutation.Numero(); ok {
		if err := endereco.NumeroValidator(v); err != nil {
			return &ValidationError{Name: "numero", err: fmt.Errorf(`ent: validator failed for field "Endereco.numero": %w`, err)}
		}
	}
	if _, ok := eu.mutation.CepID(); eu.mutation.CepCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Endereco.cep"`)
	}
	return nil
}

func (eu *EnderecoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   endereco.Table,
			Columns: endereco.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: endereco.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: endereco.FieldUpdateTime,
		})
	}
	if value, ok := eu.mutation.Numero(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: endereco.FieldNumero,
		})
	}
	if eu.mutation.CepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endereco.CepTable,
			Columns: []string{endereco.CepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: cep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endereco.CepTable,
			Columns: []string{endereco.CepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: cep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{endereco.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EnderecoUpdateOne is the builder for updating a single Endereco entity.
type EnderecoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnderecoMutation
}

// SetUpdateTime sets the "update_time" field.
func (euo *EnderecoUpdateOne) SetUpdateTime(t time.Time) *EnderecoUpdateOne {
	euo.mutation.SetUpdateTime(t)
	return euo
}

// SetNumero sets the "numero" field.
func (euo *EnderecoUpdateOne) SetNumero(s string) *EnderecoUpdateOne {
	euo.mutation.SetNumero(s)
	return euo
}

// SetCepID sets the "cep" edge to the Cep entity by ID.
func (euo *EnderecoUpdateOne) SetCepID(id int32) *EnderecoUpdateOne {
	euo.mutation.SetCepID(id)
	return euo
}

// SetCep sets the "cep" edge to the Cep entity.
func (euo *EnderecoUpdateOne) SetCep(c *Cep) *EnderecoUpdateOne {
	return euo.SetCepID(c.ID)
}

// Mutation returns the EnderecoMutation object of the builder.
func (euo *EnderecoUpdateOne) Mutation() *EnderecoMutation {
	return euo.mutation
}

// ClearCep clears the "cep" edge to the Cep entity.
func (euo *EnderecoUpdateOne) ClearCep() *EnderecoUpdateOne {
	euo.mutation.ClearCep()
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EnderecoUpdateOne) Select(field string, fields ...string) *EnderecoUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Endereco entity.
func (euo *EnderecoUpdateOne) Save(ctx context.Context) (*Endereco, error) {
	var (
		err  error
		node *Endereco
	)
	euo.defaults()
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnderecoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EnderecoUpdateOne) SaveX(ctx context.Context) *Endereco {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EnderecoUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EnderecoUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EnderecoUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdateTime(); !ok {
		v := endereco.UpdateDefaultUpdateTime()
		euo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EnderecoUpdateOne) check() error {
	if v, ok := euo.mutation.Numero(); ok {
		if err := endereco.NumeroValidator(v); err != nil {
			return &ValidationError{Name: "numero", err: fmt.Errorf(`ent: validator failed for field "Endereco.numero": %w`, err)}
		}
	}
	if _, ok := euo.mutation.CepID(); euo.mutation.CepCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Endereco.cep"`)
	}
	return nil
}

func (euo *EnderecoUpdateOne) sqlSave(ctx context.Context) (_node *Endereco, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   endereco.Table,
			Columns: endereco.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: endereco.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Endereco.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, endereco.FieldID)
		for _, f := range fields {
			if !endereco.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != endereco.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: endereco.FieldUpdateTime,
		})
	}
	if value, ok := euo.mutation.Numero(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: endereco.FieldNumero,
		})
	}
	if euo.mutation.CepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endereco.CepTable,
			Columns: []string{endereco.CepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: cep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endereco.CepTable,
			Columns: []string{endereco.CepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: cep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Endereco{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{endereco.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
