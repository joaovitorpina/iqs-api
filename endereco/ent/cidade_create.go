// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"endereco/ent/cep"
	"endereco/ent/cidade"
	"endereco/ent/estado"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CidadeCreate is the builder for creating a Cidade entity.
type CidadeCreate struct {
	config
	mutation *CidadeMutation
	hooks    []Hook
}

// SetNome sets the "nome" field.
func (cc *CidadeCreate) SetNome(s string) *CidadeCreate {
	cc.mutation.SetNome(s)
	return cc
}

// SetEstadoID sets the "estado" edge to the Estado entity by ID.
func (cc *CidadeCreate) SetEstadoID(id int) *CidadeCreate {
	cc.mutation.SetEstadoID(id)
	return cc
}

// SetEstado sets the "estado" edge to the Estado entity.
func (cc *CidadeCreate) SetEstado(e *Estado) *CidadeCreate {
	return cc.SetEstadoID(e.ID)
}

// AddCepIDs adds the "ceps" edge to the Cep entity by IDs.
func (cc *CidadeCreate) AddCepIDs(ids ...int32) *CidadeCreate {
	cc.mutation.AddCepIDs(ids...)
	return cc
}

// AddCeps adds the "ceps" edges to the Cep entity.
func (cc *CidadeCreate) AddCeps(c ...*Cep) *CidadeCreate {
	ids := make([]int32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCepIDs(ids...)
}

// Mutation returns the CidadeMutation object of the builder.
func (cc *CidadeCreate) Mutation() *CidadeMutation {
	return cc.mutation
}

// Save creates the Cidade in the database.
func (cc *CidadeCreate) Save(ctx context.Context) (*Cidade, error) {
	var (
		err  error
		node *Cidade
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CidadeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CidadeCreate) SaveX(ctx context.Context) *Cidade {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CidadeCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CidadeCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CidadeCreate) check() error {
	if _, ok := cc.mutation.Nome(); !ok {
		return &ValidationError{Name: "nome", err: errors.New(`ent: missing required field "Cidade.nome"`)}
	}
	if v, ok := cc.mutation.Nome(); ok {
		if err := cidade.NomeValidator(v); err != nil {
			return &ValidationError{Name: "nome", err: fmt.Errorf(`ent: validator failed for field "Cidade.nome": %w`, err)}
		}
	}
	if _, ok := cc.mutation.EstadoID(); !ok {
		return &ValidationError{Name: "estado", err: errors.New(`ent: missing required edge "Cidade.estado"`)}
	}
	return nil
}

func (cc *CidadeCreate) sqlSave(ctx context.Context) (*Cidade, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CidadeCreate) createSpec() (*Cidade, *sqlgraph.CreateSpec) {
	var (
		_node = &Cidade{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cidade.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cidade.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Nome(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cidade.FieldNome,
		})
		_node.Nome = value
	}
	if nodes := cc.mutation.EstadoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cidade.EstadoTable,
			Columns: []string{cidade.EstadoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: estado.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.estado_cidades = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cidade.CepsTable,
			Columns: []string{cidade.CepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: cep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CidadeCreateBulk is the builder for creating many Cidade entities in bulk.
type CidadeCreateBulk struct {
	config
	builders []*CidadeCreate
}

// Save creates the Cidade entities in the database.
func (ccb *CidadeCreateBulk) Save(ctx context.Context) ([]*Cidade, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cidade, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CidadeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CidadeCreateBulk) SaveX(ctx context.Context) []*Cidade {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CidadeCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CidadeCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
