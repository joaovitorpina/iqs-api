// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"profissional/ent/areasaude"
	"profissional/ent/especializacao"
	"profissional/ent/predicate"
	"profissional/ent/profissional"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EspecializacaoUpdate is the builder for updating Especializacao entities.
type EspecializacaoUpdate struct {
	config
	hooks    []Hook
	mutation *EspecializacaoMutation
}

// Where appends a list predicates to the EspecializacaoUpdate builder.
func (eu *EspecializacaoUpdate) Where(ps ...predicate.Especializacao) *EspecializacaoUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetDescricao sets the "descricao" field.
func (eu *EspecializacaoUpdate) SetDescricao(s string) *EspecializacaoUpdate {
	eu.mutation.SetDescricao(s)
	return eu
}

// SetAreasaudeID sets the "areasaude" edge to the AreaSaude entity by ID.
func (eu *EspecializacaoUpdate) SetAreasaudeID(id int) *EspecializacaoUpdate {
	eu.mutation.SetAreasaudeID(id)
	return eu
}

// SetAreasaude sets the "areasaude" edge to the AreaSaude entity.
func (eu *EspecializacaoUpdate) SetAreasaude(a *AreaSaude) *EspecializacaoUpdate {
	return eu.SetAreasaudeID(a.ID)
}

// AddProfissionaiIDs adds the "profissionais" edge to the Profissional entity by IDs.
func (eu *EspecializacaoUpdate) AddProfissionaiIDs(ids ...int) *EspecializacaoUpdate {
	eu.mutation.AddProfissionaiIDs(ids...)
	return eu
}

// AddProfissionais adds the "profissionais" edges to the Profissional entity.
func (eu *EspecializacaoUpdate) AddProfissionais(p ...*Profissional) *EspecializacaoUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddProfissionaiIDs(ids...)
}

// Mutation returns the EspecializacaoMutation object of the builder.
func (eu *EspecializacaoUpdate) Mutation() *EspecializacaoMutation {
	return eu.mutation
}

// ClearAreasaude clears the "areasaude" edge to the AreaSaude entity.
func (eu *EspecializacaoUpdate) ClearAreasaude() *EspecializacaoUpdate {
	eu.mutation.ClearAreasaude()
	return eu
}

// ClearProfissionais clears all "profissionais" edges to the Profissional entity.
func (eu *EspecializacaoUpdate) ClearProfissionais() *EspecializacaoUpdate {
	eu.mutation.ClearProfissionais()
	return eu
}

// RemoveProfissionaiIDs removes the "profissionais" edge to Profissional entities by IDs.
func (eu *EspecializacaoUpdate) RemoveProfissionaiIDs(ids ...int) *EspecializacaoUpdate {
	eu.mutation.RemoveProfissionaiIDs(ids...)
	return eu
}

// RemoveProfissionais removes "profissionais" edges to Profissional entities.
func (eu *EspecializacaoUpdate) RemoveProfissionais(p ...*Profissional) *EspecializacaoUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveProfissionaiIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EspecializacaoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EspecializacaoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EspecializacaoUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EspecializacaoUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EspecializacaoUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EspecializacaoUpdate) check() error {
	if _, ok := eu.mutation.AreasaudeID(); eu.mutation.AreasaudeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Especializacao.areasaude"`)
	}
	return nil
}

func (eu *EspecializacaoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   especializacao.Table,
			Columns: especializacao.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: especializacao.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Descricao(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: especializacao.FieldDescricao,
		})
	}
	if eu.mutation.AreasaudeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   especializacao.AreasaudeTable,
			Columns: []string{especializacao.AreasaudeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: areasaude.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AreasaudeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   especializacao.AreasaudeTable,
			Columns: []string{especializacao.AreasaudeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: areasaude.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ProfissionaisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   especializacao.ProfissionaisTable,
			Columns: especializacao.ProfissionaisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profissional.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedProfissionaisIDs(); len(nodes) > 0 && !eu.mutation.ProfissionaisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   especializacao.ProfissionaisTable,
			Columns: especializacao.ProfissionaisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profissional.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ProfissionaisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   especializacao.ProfissionaisTable,
			Columns: especializacao.ProfissionaisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profissional.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{especializacao.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EspecializacaoUpdateOne is the builder for updating a single Especializacao entity.
type EspecializacaoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EspecializacaoMutation
}

// SetDescricao sets the "descricao" field.
func (euo *EspecializacaoUpdateOne) SetDescricao(s string) *EspecializacaoUpdateOne {
	euo.mutation.SetDescricao(s)
	return euo
}

// SetAreasaudeID sets the "areasaude" edge to the AreaSaude entity by ID.
func (euo *EspecializacaoUpdateOne) SetAreasaudeID(id int) *EspecializacaoUpdateOne {
	euo.mutation.SetAreasaudeID(id)
	return euo
}

// SetAreasaude sets the "areasaude" edge to the AreaSaude entity.
func (euo *EspecializacaoUpdateOne) SetAreasaude(a *AreaSaude) *EspecializacaoUpdateOne {
	return euo.SetAreasaudeID(a.ID)
}

// AddProfissionaiIDs adds the "profissionais" edge to the Profissional entity by IDs.
func (euo *EspecializacaoUpdateOne) AddProfissionaiIDs(ids ...int) *EspecializacaoUpdateOne {
	euo.mutation.AddProfissionaiIDs(ids...)
	return euo
}

// AddProfissionais adds the "profissionais" edges to the Profissional entity.
func (euo *EspecializacaoUpdateOne) AddProfissionais(p ...*Profissional) *EspecializacaoUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddProfissionaiIDs(ids...)
}

// Mutation returns the EspecializacaoMutation object of the builder.
func (euo *EspecializacaoUpdateOne) Mutation() *EspecializacaoMutation {
	return euo.mutation
}

// ClearAreasaude clears the "areasaude" edge to the AreaSaude entity.
func (euo *EspecializacaoUpdateOne) ClearAreasaude() *EspecializacaoUpdateOne {
	euo.mutation.ClearAreasaude()
	return euo
}

// ClearProfissionais clears all "profissionais" edges to the Profissional entity.
func (euo *EspecializacaoUpdateOne) ClearProfissionais() *EspecializacaoUpdateOne {
	euo.mutation.ClearProfissionais()
	return euo
}

// RemoveProfissionaiIDs removes the "profissionais" edge to Profissional entities by IDs.
func (euo *EspecializacaoUpdateOne) RemoveProfissionaiIDs(ids ...int) *EspecializacaoUpdateOne {
	euo.mutation.RemoveProfissionaiIDs(ids...)
	return euo
}

// RemoveProfissionais removes "profissionais" edges to Profissional entities.
func (euo *EspecializacaoUpdateOne) RemoveProfissionais(p ...*Profissional) *EspecializacaoUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveProfissionaiIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EspecializacaoUpdateOne) Select(field string, fields ...string) *EspecializacaoUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Especializacao entity.
func (euo *EspecializacaoUpdateOne) Save(ctx context.Context) (*Especializacao, error) {
	var (
		err  error
		node *Especializacao
	)
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EspecializacaoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EspecializacaoUpdateOne) SaveX(ctx context.Context) *Especializacao {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EspecializacaoUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EspecializacaoUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EspecializacaoUpdateOne) check() error {
	if _, ok := euo.mutation.AreasaudeID(); euo.mutation.AreasaudeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Especializacao.areasaude"`)
	}
	return nil
}

func (euo *EspecializacaoUpdateOne) sqlSave(ctx context.Context) (_node *Especializacao, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   especializacao.Table,
			Columns: especializacao.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: especializacao.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Especializacao.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, especializacao.FieldID)
		for _, f := range fields {
			if !especializacao.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != especializacao.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Descricao(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: especializacao.FieldDescricao,
		})
	}
	if euo.mutation.AreasaudeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   especializacao.AreasaudeTable,
			Columns: []string{especializacao.AreasaudeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: areasaude.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AreasaudeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   especializacao.AreasaudeTable,
			Columns: []string{especializacao.AreasaudeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: areasaude.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ProfissionaisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   especializacao.ProfissionaisTable,
			Columns: especializacao.ProfissionaisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profissional.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedProfissionaisIDs(); len(nodes) > 0 && !euo.mutation.ProfissionaisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   especializacao.ProfissionaisTable,
			Columns: especializacao.ProfissionaisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profissional.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ProfissionaisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   especializacao.ProfissionaisTable,
			Columns: especializacao.ProfissionaisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profissional.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Especializacao{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{especializacao.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
