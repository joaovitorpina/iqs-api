// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"profissional/ent/migrate"

	"profissional/ent/areasaude"
	"profissional/ent/convenio"
	"profissional/ent/especializacao"
	"profissional/ent/foto"
	"profissional/ent/podcast"
	"profissional/ent/profissional"
	"profissional/ent/tratamento"
	"profissional/ent/video"
	"profissional/ent/whatsapp"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AreaSaude is the client for interacting with the AreaSaude builders.
	AreaSaude *AreaSaudeClient
	// Convenio is the client for interacting with the Convenio builders.
	Convenio *ConvenioClient
	// Especializacao is the client for interacting with the Especializacao builders.
	Especializacao *EspecializacaoClient
	// Foto is the client for interacting with the Foto builders.
	Foto *FotoClient
	// Podcast is the client for interacting with the Podcast builders.
	Podcast *PodcastClient
	// Profissional is the client for interacting with the Profissional builders.
	Profissional *ProfissionalClient
	// Tratamento is the client for interacting with the Tratamento builders.
	Tratamento *TratamentoClient
	// Video is the client for interacting with the Video builders.
	Video *VideoClient
	// WhatsApp is the client for interacting with the WhatsApp builders.
	WhatsApp *WhatsAppClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AreaSaude = NewAreaSaudeClient(c.config)
	c.Convenio = NewConvenioClient(c.config)
	c.Especializacao = NewEspecializacaoClient(c.config)
	c.Foto = NewFotoClient(c.config)
	c.Podcast = NewPodcastClient(c.config)
	c.Profissional = NewProfissionalClient(c.config)
	c.Tratamento = NewTratamentoClient(c.config)
	c.Video = NewVideoClient(c.config)
	c.WhatsApp = NewWhatsAppClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		AreaSaude:      NewAreaSaudeClient(cfg),
		Convenio:       NewConvenioClient(cfg),
		Especializacao: NewEspecializacaoClient(cfg),
		Foto:           NewFotoClient(cfg),
		Podcast:        NewPodcastClient(cfg),
		Profissional:   NewProfissionalClient(cfg),
		Tratamento:     NewTratamentoClient(cfg),
		Video:          NewVideoClient(cfg),
		WhatsApp:       NewWhatsAppClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:         cfg,
		AreaSaude:      NewAreaSaudeClient(cfg),
		Convenio:       NewConvenioClient(cfg),
		Especializacao: NewEspecializacaoClient(cfg),
		Foto:           NewFotoClient(cfg),
		Podcast:        NewPodcastClient(cfg),
		Profissional:   NewProfissionalClient(cfg),
		Tratamento:     NewTratamentoClient(cfg),
		Video:          NewVideoClient(cfg),
		WhatsApp:       NewWhatsAppClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AreaSaude.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AreaSaude.Use(hooks...)
	c.Convenio.Use(hooks...)
	c.Especializacao.Use(hooks...)
	c.Foto.Use(hooks...)
	c.Podcast.Use(hooks...)
	c.Profissional.Use(hooks...)
	c.Tratamento.Use(hooks...)
	c.Video.Use(hooks...)
	c.WhatsApp.Use(hooks...)
}

// AreaSaudeClient is a client for the AreaSaude schema.
type AreaSaudeClient struct {
	config
}

// NewAreaSaudeClient returns a client for the AreaSaude from the given config.
func NewAreaSaudeClient(c config) *AreaSaudeClient {
	return &AreaSaudeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `areasaude.Hooks(f(g(h())))`.
func (c *AreaSaudeClient) Use(hooks ...Hook) {
	c.hooks.AreaSaude = append(c.hooks.AreaSaude, hooks...)
}

// Create returns a create builder for AreaSaude.
func (c *AreaSaudeClient) Create() *AreaSaudeCreate {
	mutation := newAreaSaudeMutation(c.config, OpCreate)
	return &AreaSaudeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AreaSaude entities.
func (c *AreaSaudeClient) CreateBulk(builders ...*AreaSaudeCreate) *AreaSaudeCreateBulk {
	return &AreaSaudeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AreaSaude.
func (c *AreaSaudeClient) Update() *AreaSaudeUpdate {
	mutation := newAreaSaudeMutation(c.config, OpUpdate)
	return &AreaSaudeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AreaSaudeClient) UpdateOne(as *AreaSaude) *AreaSaudeUpdateOne {
	mutation := newAreaSaudeMutation(c.config, OpUpdateOne, withAreaSaude(as))
	return &AreaSaudeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AreaSaudeClient) UpdateOneID(id int) *AreaSaudeUpdateOne {
	mutation := newAreaSaudeMutation(c.config, OpUpdateOne, withAreaSaudeID(id))
	return &AreaSaudeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AreaSaude.
func (c *AreaSaudeClient) Delete() *AreaSaudeDelete {
	mutation := newAreaSaudeMutation(c.config, OpDelete)
	return &AreaSaudeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AreaSaudeClient) DeleteOne(as *AreaSaude) *AreaSaudeDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AreaSaudeClient) DeleteOneID(id int) *AreaSaudeDeleteOne {
	builder := c.Delete().Where(areasaude.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AreaSaudeDeleteOne{builder}
}

// Query returns a query builder for AreaSaude.
func (c *AreaSaudeClient) Query() *AreaSaudeQuery {
	return &AreaSaudeQuery{
		config: c.config,
	}
}

// Get returns a AreaSaude entity by its id.
func (c *AreaSaudeClient) Get(ctx context.Context, id int) (*AreaSaude, error) {
	return c.Query().Where(areasaude.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AreaSaudeClient) GetX(ctx context.Context, id int) *AreaSaude {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEspecializacoes queries the especializacoes edge of a AreaSaude.
func (c *AreaSaudeClient) QueryEspecializacoes(as *AreaSaude) *EspecializacaoQuery {
	query := &EspecializacaoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(areasaude.Table, areasaude.FieldID, id),
			sqlgraph.To(especializacao.Table, especializacao.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, areasaude.EspecializacoesTable, areasaude.EspecializacoesColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AreaSaudeClient) Hooks() []Hook {
	return c.hooks.AreaSaude
}

// ConvenioClient is a client for the Convenio schema.
type ConvenioClient struct {
	config
}

// NewConvenioClient returns a client for the Convenio from the given config.
func NewConvenioClient(c config) *ConvenioClient {
	return &ConvenioClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `convenio.Hooks(f(g(h())))`.
func (c *ConvenioClient) Use(hooks ...Hook) {
	c.hooks.Convenio = append(c.hooks.Convenio, hooks...)
}

// Create returns a create builder for Convenio.
func (c *ConvenioClient) Create() *ConvenioCreate {
	mutation := newConvenioMutation(c.config, OpCreate)
	return &ConvenioCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Convenio entities.
func (c *ConvenioClient) CreateBulk(builders ...*ConvenioCreate) *ConvenioCreateBulk {
	return &ConvenioCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Convenio.
func (c *ConvenioClient) Update() *ConvenioUpdate {
	mutation := newConvenioMutation(c.config, OpUpdate)
	return &ConvenioUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConvenioClient) UpdateOne(co *Convenio) *ConvenioUpdateOne {
	mutation := newConvenioMutation(c.config, OpUpdateOne, withConvenio(co))
	return &ConvenioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConvenioClient) UpdateOneID(id int) *ConvenioUpdateOne {
	mutation := newConvenioMutation(c.config, OpUpdateOne, withConvenioID(id))
	return &ConvenioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Convenio.
func (c *ConvenioClient) Delete() *ConvenioDelete {
	mutation := newConvenioMutation(c.config, OpDelete)
	return &ConvenioDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ConvenioClient) DeleteOne(co *Convenio) *ConvenioDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ConvenioClient) DeleteOneID(id int) *ConvenioDeleteOne {
	builder := c.Delete().Where(convenio.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConvenioDeleteOne{builder}
}

// Query returns a query builder for Convenio.
func (c *ConvenioClient) Query() *ConvenioQuery {
	return &ConvenioQuery{
		config: c.config,
	}
}

// Get returns a Convenio entity by its id.
func (c *ConvenioClient) Get(ctx context.Context, id int) (*Convenio, error) {
	return c.Query().Where(convenio.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConvenioClient) GetX(ctx context.Context, id int) *Convenio {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfissional queries the profissional edge of a Convenio.
func (c *ConvenioClient) QueryProfissional(co *Convenio) *ProfissionalQuery {
	query := &ProfissionalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(convenio.Table, convenio.FieldID, id),
			sqlgraph.To(profissional.Table, profissional.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, convenio.ProfissionalTable, convenio.ProfissionalColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConvenioClient) Hooks() []Hook {
	return c.hooks.Convenio
}

// EspecializacaoClient is a client for the Especializacao schema.
type EspecializacaoClient struct {
	config
}

// NewEspecializacaoClient returns a client for the Especializacao from the given config.
func NewEspecializacaoClient(c config) *EspecializacaoClient {
	return &EspecializacaoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `especializacao.Hooks(f(g(h())))`.
func (c *EspecializacaoClient) Use(hooks ...Hook) {
	c.hooks.Especializacao = append(c.hooks.Especializacao, hooks...)
}

// Create returns a create builder for Especializacao.
func (c *EspecializacaoClient) Create() *EspecializacaoCreate {
	mutation := newEspecializacaoMutation(c.config, OpCreate)
	return &EspecializacaoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Especializacao entities.
func (c *EspecializacaoClient) CreateBulk(builders ...*EspecializacaoCreate) *EspecializacaoCreateBulk {
	return &EspecializacaoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Especializacao.
func (c *EspecializacaoClient) Update() *EspecializacaoUpdate {
	mutation := newEspecializacaoMutation(c.config, OpUpdate)
	return &EspecializacaoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EspecializacaoClient) UpdateOne(e *Especializacao) *EspecializacaoUpdateOne {
	mutation := newEspecializacaoMutation(c.config, OpUpdateOne, withEspecializacao(e))
	return &EspecializacaoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EspecializacaoClient) UpdateOneID(id int) *EspecializacaoUpdateOne {
	mutation := newEspecializacaoMutation(c.config, OpUpdateOne, withEspecializacaoID(id))
	return &EspecializacaoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Especializacao.
func (c *EspecializacaoClient) Delete() *EspecializacaoDelete {
	mutation := newEspecializacaoMutation(c.config, OpDelete)
	return &EspecializacaoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EspecializacaoClient) DeleteOne(e *Especializacao) *EspecializacaoDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EspecializacaoClient) DeleteOneID(id int) *EspecializacaoDeleteOne {
	builder := c.Delete().Where(especializacao.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EspecializacaoDeleteOne{builder}
}

// Query returns a query builder for Especializacao.
func (c *EspecializacaoClient) Query() *EspecializacaoQuery {
	return &EspecializacaoQuery{
		config: c.config,
	}
}

// Get returns a Especializacao entity by its id.
func (c *EspecializacaoClient) Get(ctx context.Context, id int) (*Especializacao, error) {
	return c.Query().Where(especializacao.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EspecializacaoClient) GetX(ctx context.Context, id int) *Especializacao {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAreasaude queries the areasaude edge of a Especializacao.
func (c *EspecializacaoClient) QueryAreasaude(e *Especializacao) *AreaSaudeQuery {
	query := &AreaSaudeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(especializacao.Table, especializacao.FieldID, id),
			sqlgraph.To(areasaude.Table, areasaude.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, especializacao.AreasaudeTable, especializacao.AreasaudeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProfissionais queries the profissionais edge of a Especializacao.
func (c *EspecializacaoClient) QueryProfissionais(e *Especializacao) *ProfissionalQuery {
	query := &ProfissionalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(especializacao.Table, especializacao.FieldID, id),
			sqlgraph.To(profissional.Table, profissional.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, especializacao.ProfissionaisTable, especializacao.ProfissionaisPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EspecializacaoClient) Hooks() []Hook {
	return c.hooks.Especializacao
}

// FotoClient is a client for the Foto schema.
type FotoClient struct {
	config
}

// NewFotoClient returns a client for the Foto from the given config.
func NewFotoClient(c config) *FotoClient {
	return &FotoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `foto.Hooks(f(g(h())))`.
func (c *FotoClient) Use(hooks ...Hook) {
	c.hooks.Foto = append(c.hooks.Foto, hooks...)
}

// Create returns a create builder for Foto.
func (c *FotoClient) Create() *FotoCreate {
	mutation := newFotoMutation(c.config, OpCreate)
	return &FotoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Foto entities.
func (c *FotoClient) CreateBulk(builders ...*FotoCreate) *FotoCreateBulk {
	return &FotoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Foto.
func (c *FotoClient) Update() *FotoUpdate {
	mutation := newFotoMutation(c.config, OpUpdate)
	return &FotoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FotoClient) UpdateOne(f *Foto) *FotoUpdateOne {
	mutation := newFotoMutation(c.config, OpUpdateOne, withFoto(f))
	return &FotoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FotoClient) UpdateOneID(id int) *FotoUpdateOne {
	mutation := newFotoMutation(c.config, OpUpdateOne, withFotoID(id))
	return &FotoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Foto.
func (c *FotoClient) Delete() *FotoDelete {
	mutation := newFotoMutation(c.config, OpDelete)
	return &FotoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FotoClient) DeleteOne(f *Foto) *FotoDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FotoClient) DeleteOneID(id int) *FotoDeleteOne {
	builder := c.Delete().Where(foto.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FotoDeleteOne{builder}
}

// Query returns a query builder for Foto.
func (c *FotoClient) Query() *FotoQuery {
	return &FotoQuery{
		config: c.config,
	}
}

// Get returns a Foto entity by its id.
func (c *FotoClient) Get(ctx context.Context, id int) (*Foto, error) {
	return c.Query().Where(foto.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FotoClient) GetX(ctx context.Context, id int) *Foto {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfissional queries the profissional edge of a Foto.
func (c *FotoClient) QueryProfissional(f *Foto) *ProfissionalQuery {
	query := &ProfissionalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(foto.Table, foto.FieldID, id),
			sqlgraph.To(profissional.Table, profissional.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, foto.ProfissionalTable, foto.ProfissionalColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FotoClient) Hooks() []Hook {
	return c.hooks.Foto
}

// PodcastClient is a client for the Podcast schema.
type PodcastClient struct {
	config
}

// NewPodcastClient returns a client for the Podcast from the given config.
func NewPodcastClient(c config) *PodcastClient {
	return &PodcastClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `podcast.Hooks(f(g(h())))`.
func (c *PodcastClient) Use(hooks ...Hook) {
	c.hooks.Podcast = append(c.hooks.Podcast, hooks...)
}

// Create returns a create builder for Podcast.
func (c *PodcastClient) Create() *PodcastCreate {
	mutation := newPodcastMutation(c.config, OpCreate)
	return &PodcastCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Podcast entities.
func (c *PodcastClient) CreateBulk(builders ...*PodcastCreate) *PodcastCreateBulk {
	return &PodcastCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Podcast.
func (c *PodcastClient) Update() *PodcastUpdate {
	mutation := newPodcastMutation(c.config, OpUpdate)
	return &PodcastUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PodcastClient) UpdateOne(po *Podcast) *PodcastUpdateOne {
	mutation := newPodcastMutation(c.config, OpUpdateOne, withPodcast(po))
	return &PodcastUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PodcastClient) UpdateOneID(id int) *PodcastUpdateOne {
	mutation := newPodcastMutation(c.config, OpUpdateOne, withPodcastID(id))
	return &PodcastUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Podcast.
func (c *PodcastClient) Delete() *PodcastDelete {
	mutation := newPodcastMutation(c.config, OpDelete)
	return &PodcastDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PodcastClient) DeleteOne(po *Podcast) *PodcastDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PodcastClient) DeleteOneID(id int) *PodcastDeleteOne {
	builder := c.Delete().Where(podcast.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PodcastDeleteOne{builder}
}

// Query returns a query builder for Podcast.
func (c *PodcastClient) Query() *PodcastQuery {
	return &PodcastQuery{
		config: c.config,
	}
}

// Get returns a Podcast entity by its id.
func (c *PodcastClient) Get(ctx context.Context, id int) (*Podcast, error) {
	return c.Query().Where(podcast.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PodcastClient) GetX(ctx context.Context, id int) *Podcast {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfissional queries the profissional edge of a Podcast.
func (c *PodcastClient) QueryProfissional(po *Podcast) *ProfissionalQuery {
	query := &ProfissionalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(podcast.Table, podcast.FieldID, id),
			sqlgraph.To(profissional.Table, profissional.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, podcast.ProfissionalTable, podcast.ProfissionalColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PodcastClient) Hooks() []Hook {
	return c.hooks.Podcast
}

// ProfissionalClient is a client for the Profissional schema.
type ProfissionalClient struct {
	config
}

// NewProfissionalClient returns a client for the Profissional from the given config.
func NewProfissionalClient(c config) *ProfissionalClient {
	return &ProfissionalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `profissional.Hooks(f(g(h())))`.
func (c *ProfissionalClient) Use(hooks ...Hook) {
	c.hooks.Profissional = append(c.hooks.Profissional, hooks...)
}

// Create returns a create builder for Profissional.
func (c *ProfissionalClient) Create() *ProfissionalCreate {
	mutation := newProfissionalMutation(c.config, OpCreate)
	return &ProfissionalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Profissional entities.
func (c *ProfissionalClient) CreateBulk(builders ...*ProfissionalCreate) *ProfissionalCreateBulk {
	return &ProfissionalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Profissional.
func (c *ProfissionalClient) Update() *ProfissionalUpdate {
	mutation := newProfissionalMutation(c.config, OpUpdate)
	return &ProfissionalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProfissionalClient) UpdateOne(pr *Profissional) *ProfissionalUpdateOne {
	mutation := newProfissionalMutation(c.config, OpUpdateOne, withProfissional(pr))
	return &ProfissionalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProfissionalClient) UpdateOneID(id int) *ProfissionalUpdateOne {
	mutation := newProfissionalMutation(c.config, OpUpdateOne, withProfissionalID(id))
	return &ProfissionalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Profissional.
func (c *ProfissionalClient) Delete() *ProfissionalDelete {
	mutation := newProfissionalMutation(c.config, OpDelete)
	return &ProfissionalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProfissionalClient) DeleteOne(pr *Profissional) *ProfissionalDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProfissionalClient) DeleteOneID(id int) *ProfissionalDeleteOne {
	builder := c.Delete().Where(profissional.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProfissionalDeleteOne{builder}
}

// Query returns a query builder for Profissional.
func (c *ProfissionalClient) Query() *ProfissionalQuery {
	return &ProfissionalQuery{
		config: c.config,
	}
}

// Get returns a Profissional entity by its id.
func (c *ProfissionalClient) Get(ctx context.Context, id int) (*Profissional, error) {
	return c.Query().Where(profissional.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProfissionalClient) GetX(ctx context.Context, id int) *Profissional {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWhatsapps queries the whatsapps edge of a Profissional.
func (c *ProfissionalClient) QueryWhatsapps(pr *Profissional) *WhatsAppQuery {
	query := &WhatsAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profissional.Table, profissional.FieldID, id),
			sqlgraph.To(whatsapp.Table, whatsapp.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, profissional.WhatsappsTable, profissional.WhatsappsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideos queries the videos edge of a Profissional.
func (c *ProfissionalClient) QueryVideos(pr *Profissional) *VideoQuery {
	query := &VideoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profissional.Table, profissional.FieldID, id),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, profissional.VideosTable, profissional.VideosColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTratamentos queries the tratamentos edge of a Profissional.
func (c *ProfissionalClient) QueryTratamentos(pr *Profissional) *TratamentoQuery {
	query := &TratamentoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profissional.Table, profissional.FieldID, id),
			sqlgraph.To(tratamento.Table, tratamento.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, profissional.TratamentosTable, profissional.TratamentosColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPodcasts queries the podcasts edge of a Profissional.
func (c *ProfissionalClient) QueryPodcasts(pr *Profissional) *PodcastQuery {
	query := &PodcastQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profissional.Table, profissional.FieldID, id),
			sqlgraph.To(podcast.Table, podcast.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, profissional.PodcastsTable, profissional.PodcastsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFotos queries the fotos edge of a Profissional.
func (c *ProfissionalClient) QueryFotos(pr *Profissional) *FotoQuery {
	query := &FotoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profissional.Table, profissional.FieldID, id),
			sqlgraph.To(foto.Table, foto.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, profissional.FotosTable, profissional.FotosColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConvenios queries the convenios edge of a Profissional.
func (c *ProfissionalClient) QueryConvenios(pr *Profissional) *ConvenioQuery {
	query := &ConvenioQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profissional.Table, profissional.FieldID, id),
			sqlgraph.To(convenio.Table, convenio.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, profissional.ConveniosTable, profissional.ConveniosColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEspecializacoes queries the especializacoes edge of a Profissional.
func (c *ProfissionalClient) QueryEspecializacoes(pr *Profissional) *EspecializacaoQuery {
	query := &EspecializacaoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profissional.Table, profissional.FieldID, id),
			sqlgraph.To(especializacao.Table, especializacao.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, profissional.EspecializacoesTable, profissional.EspecializacoesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProfissionalClient) Hooks() []Hook {
	return c.hooks.Profissional
}

// TratamentoClient is a client for the Tratamento schema.
type TratamentoClient struct {
	config
}

// NewTratamentoClient returns a client for the Tratamento from the given config.
func NewTratamentoClient(c config) *TratamentoClient {
	return &TratamentoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tratamento.Hooks(f(g(h())))`.
func (c *TratamentoClient) Use(hooks ...Hook) {
	c.hooks.Tratamento = append(c.hooks.Tratamento, hooks...)
}

// Create returns a create builder for Tratamento.
func (c *TratamentoClient) Create() *TratamentoCreate {
	mutation := newTratamentoMutation(c.config, OpCreate)
	return &TratamentoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tratamento entities.
func (c *TratamentoClient) CreateBulk(builders ...*TratamentoCreate) *TratamentoCreateBulk {
	return &TratamentoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tratamento.
func (c *TratamentoClient) Update() *TratamentoUpdate {
	mutation := newTratamentoMutation(c.config, OpUpdate)
	return &TratamentoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TratamentoClient) UpdateOne(t *Tratamento) *TratamentoUpdateOne {
	mutation := newTratamentoMutation(c.config, OpUpdateOne, withTratamento(t))
	return &TratamentoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TratamentoClient) UpdateOneID(id int) *TratamentoUpdateOne {
	mutation := newTratamentoMutation(c.config, OpUpdateOne, withTratamentoID(id))
	return &TratamentoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tratamento.
func (c *TratamentoClient) Delete() *TratamentoDelete {
	mutation := newTratamentoMutation(c.config, OpDelete)
	return &TratamentoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TratamentoClient) DeleteOne(t *Tratamento) *TratamentoDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TratamentoClient) DeleteOneID(id int) *TratamentoDeleteOne {
	builder := c.Delete().Where(tratamento.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TratamentoDeleteOne{builder}
}

// Query returns a query builder for Tratamento.
func (c *TratamentoClient) Query() *TratamentoQuery {
	return &TratamentoQuery{
		config: c.config,
	}
}

// Get returns a Tratamento entity by its id.
func (c *TratamentoClient) Get(ctx context.Context, id int) (*Tratamento, error) {
	return c.Query().Where(tratamento.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TratamentoClient) GetX(ctx context.Context, id int) *Tratamento {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfissional queries the profissional edge of a Tratamento.
func (c *TratamentoClient) QueryProfissional(t *Tratamento) *ProfissionalQuery {
	query := &ProfissionalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tratamento.Table, tratamento.FieldID, id),
			sqlgraph.To(profissional.Table, profissional.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tratamento.ProfissionalTable, tratamento.ProfissionalColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TratamentoClient) Hooks() []Hook {
	return c.hooks.Tratamento
}

// VideoClient is a client for the Video schema.
type VideoClient struct {
	config
}

// NewVideoClient returns a client for the Video from the given config.
func NewVideoClient(c config) *VideoClient {
	return &VideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `video.Hooks(f(g(h())))`.
func (c *VideoClient) Use(hooks ...Hook) {
	c.hooks.Video = append(c.hooks.Video, hooks...)
}

// Create returns a create builder for Video.
func (c *VideoClient) Create() *VideoCreate {
	mutation := newVideoMutation(c.config, OpCreate)
	return &VideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Video entities.
func (c *VideoClient) CreateBulk(builders ...*VideoCreate) *VideoCreateBulk {
	return &VideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Video.
func (c *VideoClient) Update() *VideoUpdate {
	mutation := newVideoMutation(c.config, OpUpdate)
	return &VideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VideoClient) UpdateOne(v *Video) *VideoUpdateOne {
	mutation := newVideoMutation(c.config, OpUpdateOne, withVideo(v))
	return &VideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VideoClient) UpdateOneID(id int) *VideoUpdateOne {
	mutation := newVideoMutation(c.config, OpUpdateOne, withVideoID(id))
	return &VideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Video.
func (c *VideoClient) Delete() *VideoDelete {
	mutation := newVideoMutation(c.config, OpDelete)
	return &VideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VideoClient) DeleteOne(v *Video) *VideoDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VideoClient) DeleteOneID(id int) *VideoDeleteOne {
	builder := c.Delete().Where(video.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VideoDeleteOne{builder}
}

// Query returns a query builder for Video.
func (c *VideoClient) Query() *VideoQuery {
	return &VideoQuery{
		config: c.config,
	}
}

// Get returns a Video entity by its id.
func (c *VideoClient) Get(ctx context.Context, id int) (*Video, error) {
	return c.Query().Where(video.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VideoClient) GetX(ctx context.Context, id int) *Video {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfissional queries the profissional edge of a Video.
func (c *VideoClient) QueryProfissional(v *Video) *ProfissionalQuery {
	query := &ProfissionalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video.Table, video.FieldID, id),
			sqlgraph.To(profissional.Table, profissional.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, video.ProfissionalTable, video.ProfissionalColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VideoClient) Hooks() []Hook {
	return c.hooks.Video
}

// WhatsAppClient is a client for the WhatsApp schema.
type WhatsAppClient struct {
	config
}

// NewWhatsAppClient returns a client for the WhatsApp from the given config.
func NewWhatsAppClient(c config) *WhatsAppClient {
	return &WhatsAppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `whatsapp.Hooks(f(g(h())))`.
func (c *WhatsAppClient) Use(hooks ...Hook) {
	c.hooks.WhatsApp = append(c.hooks.WhatsApp, hooks...)
}

// Create returns a create builder for WhatsApp.
func (c *WhatsAppClient) Create() *WhatsAppCreate {
	mutation := newWhatsAppMutation(c.config, OpCreate)
	return &WhatsAppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WhatsApp entities.
func (c *WhatsAppClient) CreateBulk(builders ...*WhatsAppCreate) *WhatsAppCreateBulk {
	return &WhatsAppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WhatsApp.
func (c *WhatsAppClient) Update() *WhatsAppUpdate {
	mutation := newWhatsAppMutation(c.config, OpUpdate)
	return &WhatsAppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WhatsAppClient) UpdateOne(wa *WhatsApp) *WhatsAppUpdateOne {
	mutation := newWhatsAppMutation(c.config, OpUpdateOne, withWhatsApp(wa))
	return &WhatsAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WhatsAppClient) UpdateOneID(id int) *WhatsAppUpdateOne {
	mutation := newWhatsAppMutation(c.config, OpUpdateOne, withWhatsAppID(id))
	return &WhatsAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WhatsApp.
func (c *WhatsAppClient) Delete() *WhatsAppDelete {
	mutation := newWhatsAppMutation(c.config, OpDelete)
	return &WhatsAppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WhatsAppClient) DeleteOne(wa *WhatsApp) *WhatsAppDeleteOne {
	return c.DeleteOneID(wa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WhatsAppClient) DeleteOneID(id int) *WhatsAppDeleteOne {
	builder := c.Delete().Where(whatsapp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WhatsAppDeleteOne{builder}
}

// Query returns a query builder for WhatsApp.
func (c *WhatsAppClient) Query() *WhatsAppQuery {
	return &WhatsAppQuery{
		config: c.config,
	}
}

// Get returns a WhatsApp entity by its id.
func (c *WhatsAppClient) Get(ctx context.Context, id int) (*WhatsApp, error) {
	return c.Query().Where(whatsapp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WhatsAppClient) GetX(ctx context.Context, id int) *WhatsApp {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfissional queries the profissional edge of a WhatsApp.
func (c *WhatsAppClient) QueryProfissional(wa *WhatsApp) *ProfissionalQuery {
	query := &ProfissionalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(whatsapp.Table, whatsapp.FieldID, id),
			sqlgraph.To(profissional.Table, profissional.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, whatsapp.ProfissionalTable, whatsapp.ProfissionalColumn),
		)
		fromV = sqlgraph.Neighbors(wa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WhatsAppClient) Hooks() []Hook {
	return c.hooks.WhatsApp
}
