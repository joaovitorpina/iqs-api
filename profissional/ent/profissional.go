// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"profissional/ent/profissional"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Profissional is the model entity for the Profissional schema.
type Profissional struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Nome holds the value of the "nome" field.
	Nome string `json:"nome,omitempty"`
	// URLAmigavel holds the value of the "url_amigavel" field.
	URLAmigavel string `json:"url_amigavel,omitempty"`
	// Recomendado holds the value of the "recomendado" field.
	Recomendado bool `json:"recomendado,omitempty"`
	// Ativo holds the value of the "ativo" field.
	Ativo bool `json:"ativo,omitempty"`
	// Sobre holds the value of the "sobre" field.
	Sobre string `json:"sobre,omitempty"`
	// Conselho holds the value of the "conselho" field.
	Conselho string `json:"conselho,omitempty"`
	// NumeroIdentificacao holds the value of the "numero_identificacao" field.
	NumeroIdentificacao string `json:"numero_identificacao,omitempty"`
	// Telefone holds the value of the "telefone" field.
	Telefone int32 `json:"telefone,omitempty"`
	// Celular holds the value of the "celular" field.
	Celular int32 `json:"celular,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Site holds the value of the "site" field.
	Site string `json:"site,omitempty"`
	// Facebook holds the value of the "facebook" field.
	Facebook string `json:"facebook,omitempty"`
	// Instagram holds the value of the "instagram" field.
	Instagram string `json:"instagram,omitempty"`
	// Youtube holds the value of the "youtube" field.
	Youtube string `json:"youtube,omitempty"`
	// Linkedin holds the value of the "linkedin" field.
	Linkedin string `json:"linkedin,omitempty"`
	// UnidadeID holds the value of the "unidade_id" field.
	UnidadeID int `json:"unidade_id,omitempty"`
	// EnderecoID holds the value of the "endereco_id" field.
	EnderecoID int `json:"endereco_id,omitempty"`
	// ImagemPerfilURL holds the value of the "imagem_perfil_url" field.
	ImagemPerfilURL string `json:"imagem_perfil_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfissionalQuery when eager-loading is set.
	Edges ProfissionalEdges `json:"edges"`
}

// ProfissionalEdges holds the relations/edges for other nodes in the graph.
type ProfissionalEdges struct {
	// Whatsapps holds the value of the whatsapps edge.
	Whatsapps []*WhatsApp `json:"whatsapps,omitempty"`
	// Videos holds the value of the videos edge.
	Videos []*Video `json:"videos,omitempty"`
	// Tratamentos holds the value of the tratamentos edge.
	Tratamentos []*Tratamento `json:"tratamentos,omitempty"`
	// Podcasts holds the value of the podcasts edge.
	Podcasts []*Podcast `json:"podcasts,omitempty"`
	// Fotos holds the value of the fotos edge.
	Fotos []*Foto `json:"fotos,omitempty"`
	// Convenios holds the value of the convenios edge.
	Convenios []*Convenio `json:"convenios,omitempty"`
	// Especializacoes holds the value of the especializacoes edge.
	Especializacoes []*Especializacao `json:"especializacoes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// WhatsappsOrErr returns the Whatsapps value or an error if the edge
// was not loaded in eager-loading.
func (e ProfissionalEdges) WhatsappsOrErr() ([]*WhatsApp, error) {
	if e.loadedTypes[0] {
		return e.Whatsapps, nil
	}
	return nil, &NotLoadedError{edge: "whatsapps"}
}

// VideosOrErr returns the Videos value or an error if the edge
// was not loaded in eager-loading.
func (e ProfissionalEdges) VideosOrErr() ([]*Video, error) {
	if e.loadedTypes[1] {
		return e.Videos, nil
	}
	return nil, &NotLoadedError{edge: "videos"}
}

// TratamentosOrErr returns the Tratamentos value or an error if the edge
// was not loaded in eager-loading.
func (e ProfissionalEdges) TratamentosOrErr() ([]*Tratamento, error) {
	if e.loadedTypes[2] {
		return e.Tratamentos, nil
	}
	return nil, &NotLoadedError{edge: "tratamentos"}
}

// PodcastsOrErr returns the Podcasts value or an error if the edge
// was not loaded in eager-loading.
func (e ProfissionalEdges) PodcastsOrErr() ([]*Podcast, error) {
	if e.loadedTypes[3] {
		return e.Podcasts, nil
	}
	return nil, &NotLoadedError{edge: "podcasts"}
}

// FotosOrErr returns the Fotos value or an error if the edge
// was not loaded in eager-loading.
func (e ProfissionalEdges) FotosOrErr() ([]*Foto, error) {
	if e.loadedTypes[4] {
		return e.Fotos, nil
	}
	return nil, &NotLoadedError{edge: "fotos"}
}

// ConveniosOrErr returns the Convenios value or an error if the edge
// was not loaded in eager-loading.
func (e ProfissionalEdges) ConveniosOrErr() ([]*Convenio, error) {
	if e.loadedTypes[5] {
		return e.Convenios, nil
	}
	return nil, &NotLoadedError{edge: "convenios"}
}

// EspecializacoesOrErr returns the Especializacoes value or an error if the edge
// was not loaded in eager-loading.
func (e ProfissionalEdges) EspecializacoesOrErr() ([]*Especializacao, error) {
	if e.loadedTypes[6] {
		return e.Especializacoes, nil
	}
	return nil, &NotLoadedError{edge: "especializacoes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Profissional) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case profissional.FieldRecomendado, profissional.FieldAtivo:
			values[i] = new(sql.NullBool)
		case profissional.FieldID, profissional.FieldTelefone, profissional.FieldCelular, profissional.FieldUnidadeID, profissional.FieldEnderecoID:
			values[i] = new(sql.NullInt64)
		case profissional.FieldNome, profissional.FieldURLAmigavel, profissional.FieldSobre, profissional.FieldConselho, profissional.FieldNumeroIdentificacao, profissional.FieldEmail, profissional.FieldSite, profissional.FieldFacebook, profissional.FieldInstagram, profissional.FieldYoutube, profissional.FieldLinkedin, profissional.FieldImagemPerfilURL:
			values[i] = new(sql.NullString)
		case profissional.FieldCreateTime, profissional.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Profissional", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Profissional fields.
func (pr *Profissional) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profissional.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case profissional.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pr.CreateTime = value.Time
			}
		case profissional.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pr.UpdateTime = value.Time
			}
		case profissional.FieldNome:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nome", values[i])
			} else if value.Valid {
				pr.Nome = value.String
			}
		case profissional.FieldURLAmigavel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url_amigavel", values[i])
			} else if value.Valid {
				pr.URLAmigavel = value.String
			}
		case profissional.FieldRecomendado:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field recomendado", values[i])
			} else if value.Valid {
				pr.Recomendado = value.Bool
			}
		case profissional.FieldAtivo:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ativo", values[i])
			} else if value.Valid {
				pr.Ativo = value.Bool
			}
		case profissional.FieldSobre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sobre", values[i])
			} else if value.Valid {
				pr.Sobre = value.String
			}
		case profissional.FieldConselho:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field conselho", values[i])
			} else if value.Valid {
				pr.Conselho = value.String
			}
		case profissional.FieldNumeroIdentificacao:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field numero_identificacao", values[i])
			} else if value.Valid {
				pr.NumeroIdentificacao = value.String
			}
		case profissional.FieldTelefone:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field telefone", values[i])
			} else if value.Valid {
				pr.Telefone = int32(value.Int64)
			}
		case profissional.FieldCelular:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field celular", values[i])
			} else if value.Valid {
				pr.Celular = int32(value.Int64)
			}
		case profissional.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				pr.Email = value.String
			}
		case profissional.FieldSite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field site", values[i])
			} else if value.Valid {
				pr.Site = value.String
			}
		case profissional.FieldFacebook:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field facebook", values[i])
			} else if value.Valid {
				pr.Facebook = value.String
			}
		case profissional.FieldInstagram:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instagram", values[i])
			} else if value.Valid {
				pr.Instagram = value.String
			}
		case profissional.FieldYoutube:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field youtube", values[i])
			} else if value.Valid {
				pr.Youtube = value.String
			}
		case profissional.FieldLinkedin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field linkedin", values[i])
			} else if value.Valid {
				pr.Linkedin = value.String
			}
		case profissional.FieldUnidadeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unidade_id", values[i])
			} else if value.Valid {
				pr.UnidadeID = int(value.Int64)
			}
		case profissional.FieldEnderecoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field endereco_id", values[i])
			} else if value.Valid {
				pr.EnderecoID = int(value.Int64)
			}
		case profissional.FieldImagemPerfilURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field imagem_perfil_url", values[i])
			} else if value.Valid {
				pr.ImagemPerfilURL = value.String
			}
		}
	}
	return nil
}

// QueryWhatsapps queries the "whatsapps" edge of the Profissional entity.
func (pr *Profissional) QueryWhatsapps() *WhatsAppQuery {
	return (&ProfissionalClient{config: pr.config}).QueryWhatsapps(pr)
}

// QueryVideos queries the "videos" edge of the Profissional entity.
func (pr *Profissional) QueryVideos() *VideoQuery {
	return (&ProfissionalClient{config: pr.config}).QueryVideos(pr)
}

// QueryTratamentos queries the "tratamentos" edge of the Profissional entity.
func (pr *Profissional) QueryTratamentos() *TratamentoQuery {
	return (&ProfissionalClient{config: pr.config}).QueryTratamentos(pr)
}

// QueryPodcasts queries the "podcasts" edge of the Profissional entity.
func (pr *Profissional) QueryPodcasts() *PodcastQuery {
	return (&ProfissionalClient{config: pr.config}).QueryPodcasts(pr)
}

// QueryFotos queries the "fotos" edge of the Profissional entity.
func (pr *Profissional) QueryFotos() *FotoQuery {
	return (&ProfissionalClient{config: pr.config}).QueryFotos(pr)
}

// QueryConvenios queries the "convenios" edge of the Profissional entity.
func (pr *Profissional) QueryConvenios() *ConvenioQuery {
	return (&ProfissionalClient{config: pr.config}).QueryConvenios(pr)
}

// QueryEspecializacoes queries the "especializacoes" edge of the Profissional entity.
func (pr *Profissional) QueryEspecializacoes() *EspecializacaoQuery {
	return (&ProfissionalClient{config: pr.config}).QueryEspecializacoes(pr)
}

// Update returns a builder for updating this Profissional.
// Note that you need to call Profissional.Unwrap() before calling this method if this Profissional
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Profissional) Update() *ProfissionalUpdateOne {
	return (&ProfissionalClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Profissional entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Profissional) Unwrap() *Profissional {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Profissional is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Profissional) String() string {
	var builder strings.Builder
	builder.WriteString("Profissional(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(pr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(pr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", nome=")
	builder.WriteString(pr.Nome)
	builder.WriteString(", url_amigavel=")
	builder.WriteString(pr.URLAmigavel)
	builder.WriteString(", recomendado=")
	builder.WriteString(fmt.Sprintf("%v", pr.Recomendado))
	builder.WriteString(", ativo=")
	builder.WriteString(fmt.Sprintf("%v", pr.Ativo))
	builder.WriteString(", sobre=")
	builder.WriteString(pr.Sobre)
	builder.WriteString(", conselho=")
	builder.WriteString(pr.Conselho)
	builder.WriteString(", numero_identificacao=")
	builder.WriteString(pr.NumeroIdentificacao)
	builder.WriteString(", telefone=")
	builder.WriteString(fmt.Sprintf("%v", pr.Telefone))
	builder.WriteString(", celular=")
	builder.WriteString(fmt.Sprintf("%v", pr.Celular))
	builder.WriteString(", email=")
	builder.WriteString(pr.Email)
	builder.WriteString(", site=")
	builder.WriteString(pr.Site)
	builder.WriteString(", facebook=")
	builder.WriteString(pr.Facebook)
	builder.WriteString(", instagram=")
	builder.WriteString(pr.Instagram)
	builder.WriteString(", youtube=")
	builder.WriteString(pr.Youtube)
	builder.WriteString(", linkedin=")
	builder.WriteString(pr.Linkedin)
	builder.WriteString(", unidade_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.UnidadeID))
	builder.WriteString(", endereco_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.EnderecoID))
	builder.WriteString(", imagem_perfil_url=")
	builder.WriteString(pr.ImagemPerfilURL)
	builder.WriteByte(')')
	return builder.String()
}

// Profissionals is a parsable slice of Profissional.
type Profissionals []*Profissional

func (pr Profissionals) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
