// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"profissional/ent/areasaude"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AreaSaude is the model entity for the AreaSaude schema.
type AreaSaude struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Descricao holds the value of the "descricao" field.
	Descricao string `json:"descricao,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AreaSaudeQuery when eager-loading is set.
	Edges AreaSaudeEdges `json:"edges"`
}

// AreaSaudeEdges holds the relations/edges for other nodes in the graph.
type AreaSaudeEdges struct {
	// Especializacoes holds the value of the especializacoes edge.
	Especializacoes []*Especializacao `json:"especializacoes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EspecializacoesOrErr returns the Especializacoes value or an error if the edge
// was not loaded in eager-loading.
func (e AreaSaudeEdges) EspecializacoesOrErr() ([]*Especializacao, error) {
	if e.loadedTypes[0] {
		return e.Especializacoes, nil
	}
	return nil, &NotLoadedError{edge: "especializacoes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AreaSaude) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case areasaude.FieldID:
			values[i] = new(sql.NullInt64)
		case areasaude.FieldDescricao:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AreaSaude", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AreaSaude fields.
func (as *AreaSaude) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case areasaude.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			as.ID = int(value.Int64)
		case areasaude.FieldDescricao:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field descricao", values[i])
			} else if value.Valid {
				as.Descricao = value.String
			}
		}
	}
	return nil
}

// QueryEspecializacoes queries the "especializacoes" edge of the AreaSaude entity.
func (as *AreaSaude) QueryEspecializacoes() *EspecializacaoQuery {
	return (&AreaSaudeClient{config: as.config}).QueryEspecializacoes(as)
}

// Update returns a builder for updating this AreaSaude.
// Note that you need to call AreaSaude.Unwrap() before calling this method if this AreaSaude
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AreaSaude) Update() *AreaSaudeUpdateOne {
	return (&AreaSaudeClient{config: as.config}).UpdateOne(as)
}

// Unwrap unwraps the AreaSaude entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *AreaSaude) Unwrap() *AreaSaude {
	tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AreaSaude is not a transactional entity")
	}
	as.config.driver = tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AreaSaude) String() string {
	var builder strings.Builder
	builder.WriteString("AreaSaude(")
	builder.WriteString(fmt.Sprintf("id=%v", as.ID))
	builder.WriteString(", descricao=")
	builder.WriteString(as.Descricao)
	builder.WriteByte(')')
	return builder.String()
}

// AreaSaudes is a parsable slice of AreaSaude.
type AreaSaudes []*AreaSaude

func (as AreaSaudes) config(cfg config) {
	for _i := range as {
		as[_i].config = cfg
	}
}
