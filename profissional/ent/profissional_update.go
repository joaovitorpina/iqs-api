// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"profissional/ent/convenio"
	"profissional/ent/especializacao"
	"profissional/ent/foto"
	"profissional/ent/podcast"
	"profissional/ent/predicate"
	"profissional/ent/profissional"
	"profissional/ent/tratamento"
	"profissional/ent/video"
	"profissional/ent/whatsapp"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProfissionalUpdate is the builder for updating Profissional entities.
type ProfissionalUpdate struct {
	config
	hooks    []Hook
	mutation *ProfissionalMutation
}

// Where appends a list predicates to the ProfissionalUpdate builder.
func (pu *ProfissionalUpdate) Where(ps ...predicate.Profissional) *ProfissionalUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *ProfissionalUpdate) SetUpdateTime(t time.Time) *ProfissionalUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetNome sets the "nome" field.
func (pu *ProfissionalUpdate) SetNome(s string) *ProfissionalUpdate {
	pu.mutation.SetNome(s)
	return pu
}

// SetURLAmigavel sets the "url_amigavel" field.
func (pu *ProfissionalUpdate) SetURLAmigavel(s string) *ProfissionalUpdate {
	pu.mutation.SetURLAmigavel(s)
	return pu
}

// SetRecomendado sets the "recomendado" field.
func (pu *ProfissionalUpdate) SetRecomendado(b bool) *ProfissionalUpdate {
	pu.mutation.SetRecomendado(b)
	return pu
}

// SetNillableRecomendado sets the "recomendado" field if the given value is not nil.
func (pu *ProfissionalUpdate) SetNillableRecomendado(b *bool) *ProfissionalUpdate {
	if b != nil {
		pu.SetRecomendado(*b)
	}
	return pu
}

// SetAtivo sets the "ativo" field.
func (pu *ProfissionalUpdate) SetAtivo(b bool) *ProfissionalUpdate {
	pu.mutation.SetAtivo(b)
	return pu
}

// SetNillableAtivo sets the "ativo" field if the given value is not nil.
func (pu *ProfissionalUpdate) SetNillableAtivo(b *bool) *ProfissionalUpdate {
	if b != nil {
		pu.SetAtivo(*b)
	}
	return pu
}

// SetSobre sets the "sobre" field.
func (pu *ProfissionalUpdate) SetSobre(s string) *ProfissionalUpdate {
	pu.mutation.SetSobre(s)
	return pu
}

// SetNillableSobre sets the "sobre" field if the given value is not nil.
func (pu *ProfissionalUpdate) SetNillableSobre(s *string) *ProfissionalUpdate {
	if s != nil {
		pu.SetSobre(*s)
	}
	return pu
}

// ClearSobre clears the value of the "sobre" field.
func (pu *ProfissionalUpdate) ClearSobre() *ProfissionalUpdate {
	pu.mutation.ClearSobre()
	return pu
}

// SetConselho sets the "conselho" field.
func (pu *ProfissionalUpdate) SetConselho(s string) *ProfissionalUpdate {
	pu.mutation.SetConselho(s)
	return pu
}

// SetNillableConselho sets the "conselho" field if the given value is not nil.
func (pu *ProfissionalUpdate) SetNillableConselho(s *string) *ProfissionalUpdate {
	if s != nil {
		pu.SetConselho(*s)
	}
	return pu
}

// ClearConselho clears the value of the "conselho" field.
func (pu *ProfissionalUpdate) ClearConselho() *ProfissionalUpdate {
	pu.mutation.ClearConselho()
	return pu
}

// SetNumeroIdentificacao sets the "numero_identificacao" field.
func (pu *ProfissionalUpdate) SetNumeroIdentificacao(s string) *ProfissionalUpdate {
	pu.mutation.SetNumeroIdentificacao(s)
	return pu
}

// SetNillableNumeroIdentificacao sets the "numero_identificacao" field if the given value is not nil.
func (pu *ProfissionalUpdate) SetNillableNumeroIdentificacao(s *string) *ProfissionalUpdate {
	if s != nil {
		pu.SetNumeroIdentificacao(*s)
	}
	return pu
}

// ClearNumeroIdentificacao clears the value of the "numero_identificacao" field.
func (pu *ProfissionalUpdate) ClearNumeroIdentificacao() *ProfissionalUpdate {
	pu.mutation.ClearNumeroIdentificacao()
	return pu
}

// SetTelefone sets the "telefone" field.
func (pu *ProfissionalUpdate) SetTelefone(i int64) *ProfissionalUpdate {
	pu.mutation.ResetTelefone()
	pu.mutation.SetTelefone(i)
	return pu
}

// AddTelefone adds i to the "telefone" field.
func (pu *ProfissionalUpdate) AddTelefone(i int64) *ProfissionalUpdate {
	pu.mutation.AddTelefone(i)
	return pu
}

// SetCelular sets the "celular" field.
func (pu *ProfissionalUpdate) SetCelular(i int64) *ProfissionalUpdate {
	pu.mutation.ResetCelular()
	pu.mutation.SetCelular(i)
	return pu
}

// AddCelular adds i to the "celular" field.
func (pu *ProfissionalUpdate) AddCelular(i int64) *ProfissionalUpdate {
	pu.mutation.AddCelular(i)
	return pu
}

// SetEmail sets the "email" field.
func (pu *ProfissionalUpdate) SetEmail(s string) *ProfissionalUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetSite sets the "site" field.
func (pu *ProfissionalUpdate) SetSite(s string) *ProfissionalUpdate {
	pu.mutation.SetSite(s)
	return pu
}

// SetFacebook sets the "facebook" field.
func (pu *ProfissionalUpdate) SetFacebook(s string) *ProfissionalUpdate {
	pu.mutation.SetFacebook(s)
	return pu
}

// SetNillableFacebook sets the "facebook" field if the given value is not nil.
func (pu *ProfissionalUpdate) SetNillableFacebook(s *string) *ProfissionalUpdate {
	if s != nil {
		pu.SetFacebook(*s)
	}
	return pu
}

// ClearFacebook clears the value of the "facebook" field.
func (pu *ProfissionalUpdate) ClearFacebook() *ProfissionalUpdate {
	pu.mutation.ClearFacebook()
	return pu
}

// SetInstagram sets the "instagram" field.
func (pu *ProfissionalUpdate) SetInstagram(s string) *ProfissionalUpdate {
	pu.mutation.SetInstagram(s)
	return pu
}

// SetNillableInstagram sets the "instagram" field if the given value is not nil.
func (pu *ProfissionalUpdate) SetNillableInstagram(s *string) *ProfissionalUpdate {
	if s != nil {
		pu.SetInstagram(*s)
	}
	return pu
}

// ClearInstagram clears the value of the "instagram" field.
func (pu *ProfissionalUpdate) ClearInstagram() *ProfissionalUpdate {
	pu.mutation.ClearInstagram()
	return pu
}

// SetYoutube sets the "youtube" field.
func (pu *ProfissionalUpdate) SetYoutube(s string) *ProfissionalUpdate {
	pu.mutation.SetYoutube(s)
	return pu
}

// SetNillableYoutube sets the "youtube" field if the given value is not nil.
func (pu *ProfissionalUpdate) SetNillableYoutube(s *string) *ProfissionalUpdate {
	if s != nil {
		pu.SetYoutube(*s)
	}
	return pu
}

// ClearYoutube clears the value of the "youtube" field.
func (pu *ProfissionalUpdate) ClearYoutube() *ProfissionalUpdate {
	pu.mutation.ClearYoutube()
	return pu
}

// SetLinkedin sets the "linkedin" field.
func (pu *ProfissionalUpdate) SetLinkedin(s string) *ProfissionalUpdate {
	pu.mutation.SetLinkedin(s)
	return pu
}

// SetNillableLinkedin sets the "linkedin" field if the given value is not nil.
func (pu *ProfissionalUpdate) SetNillableLinkedin(s *string) *ProfissionalUpdate {
	if s != nil {
		pu.SetLinkedin(*s)
	}
	return pu
}

// ClearLinkedin clears the value of the "linkedin" field.
func (pu *ProfissionalUpdate) ClearLinkedin() *ProfissionalUpdate {
	pu.mutation.ClearLinkedin()
	return pu
}

// SetUnidadeID sets the "unidade_id" field.
func (pu *ProfissionalUpdate) SetUnidadeID(i int) *ProfissionalUpdate {
	pu.mutation.ResetUnidadeID()
	pu.mutation.SetUnidadeID(i)
	return pu
}

// AddUnidadeID adds i to the "unidade_id" field.
func (pu *ProfissionalUpdate) AddUnidadeID(i int) *ProfissionalUpdate {
	pu.mutation.AddUnidadeID(i)
	return pu
}

// SetEnderecoID sets the "endereco_id" field.
func (pu *ProfissionalUpdate) SetEnderecoID(i int) *ProfissionalUpdate {
	pu.mutation.ResetEnderecoID()
	pu.mutation.SetEnderecoID(i)
	return pu
}

// AddEnderecoID adds i to the "endereco_id" field.
func (pu *ProfissionalUpdate) AddEnderecoID(i int) *ProfissionalUpdate {
	pu.mutation.AddEnderecoID(i)
	return pu
}

// SetImagemPerfilURL sets the "imagem_perfil_url" field.
func (pu *ProfissionalUpdate) SetImagemPerfilURL(s string) *ProfissionalUpdate {
	pu.mutation.SetImagemPerfilURL(s)
	return pu
}

// AddWhatsappIDs adds the "whatsapps" edge to the WhatsApp entity by IDs.
func (pu *ProfissionalUpdate) AddWhatsappIDs(ids ...int) *ProfissionalUpdate {
	pu.mutation.AddWhatsappIDs(ids...)
	return pu
}

// AddWhatsapps adds the "whatsapps" edges to the WhatsApp entity.
func (pu *ProfissionalUpdate) AddWhatsapps(w ...*WhatsApp) *ProfissionalUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return pu.AddWhatsappIDs(ids...)
}

// AddVideoIDs adds the "videos" edge to the Video entity by IDs.
func (pu *ProfissionalUpdate) AddVideoIDs(ids ...int) *ProfissionalUpdate {
	pu.mutation.AddVideoIDs(ids...)
	return pu
}

// AddVideos adds the "videos" edges to the Video entity.
func (pu *ProfissionalUpdate) AddVideos(v ...*Video) *ProfissionalUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.AddVideoIDs(ids...)
}

// AddTratamentoIDs adds the "tratamentos" edge to the Tratamento entity by IDs.
func (pu *ProfissionalUpdate) AddTratamentoIDs(ids ...int) *ProfissionalUpdate {
	pu.mutation.AddTratamentoIDs(ids...)
	return pu
}

// AddTratamentos adds the "tratamentos" edges to the Tratamento entity.
func (pu *ProfissionalUpdate) AddTratamentos(t ...*Tratamento) *ProfissionalUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTratamentoIDs(ids...)
}

// AddPodcastIDs adds the "podcasts" edge to the Podcast entity by IDs.
func (pu *ProfissionalUpdate) AddPodcastIDs(ids ...int) *ProfissionalUpdate {
	pu.mutation.AddPodcastIDs(ids...)
	return pu
}

// AddPodcasts adds the "podcasts" edges to the Podcast entity.
func (pu *ProfissionalUpdate) AddPodcasts(p ...*Podcast) *ProfissionalUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPodcastIDs(ids...)
}

// AddFotoIDs adds the "fotos" edge to the Foto entity by IDs.
func (pu *ProfissionalUpdate) AddFotoIDs(ids ...int) *ProfissionalUpdate {
	pu.mutation.AddFotoIDs(ids...)
	return pu
}

// AddFotos adds the "fotos" edges to the Foto entity.
func (pu *ProfissionalUpdate) AddFotos(f ...*Foto) *ProfissionalUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddFotoIDs(ids...)
}

// AddConvenioIDs adds the "convenios" edge to the Convenio entity by IDs.
func (pu *ProfissionalUpdate) AddConvenioIDs(ids ...int) *ProfissionalUpdate {
	pu.mutation.AddConvenioIDs(ids...)
	return pu
}

// AddConvenios adds the "convenios" edges to the Convenio entity.
func (pu *ProfissionalUpdate) AddConvenios(c ...*Convenio) *ProfissionalUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddConvenioIDs(ids...)
}

// AddEspecializacoIDs adds the "especializacoes" edge to the Especializacao entity by IDs.
func (pu *ProfissionalUpdate) AddEspecializacoIDs(ids ...int) *ProfissionalUpdate {
	pu.mutation.AddEspecializacoIDs(ids...)
	return pu
}

// AddEspecializacoes adds the "especializacoes" edges to the Especializacao entity.
func (pu *ProfissionalUpdate) AddEspecializacoes(e ...*Especializacao) *ProfissionalUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.AddEspecializacoIDs(ids...)
}

// Mutation returns the ProfissionalMutation object of the builder.
func (pu *ProfissionalUpdate) Mutation() *ProfissionalMutation {
	return pu.mutation
}

// ClearWhatsapps clears all "whatsapps" edges to the WhatsApp entity.
func (pu *ProfissionalUpdate) ClearWhatsapps() *ProfissionalUpdate {
	pu.mutation.ClearWhatsapps()
	return pu
}

// RemoveWhatsappIDs removes the "whatsapps" edge to WhatsApp entities by IDs.
func (pu *ProfissionalUpdate) RemoveWhatsappIDs(ids ...int) *ProfissionalUpdate {
	pu.mutation.RemoveWhatsappIDs(ids...)
	return pu
}

// RemoveWhatsapps removes "whatsapps" edges to WhatsApp entities.
func (pu *ProfissionalUpdate) RemoveWhatsapps(w ...*WhatsApp) *ProfissionalUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return pu.RemoveWhatsappIDs(ids...)
}

// ClearVideos clears all "videos" edges to the Video entity.
func (pu *ProfissionalUpdate) ClearVideos() *ProfissionalUpdate {
	pu.mutation.ClearVideos()
	return pu
}

// RemoveVideoIDs removes the "videos" edge to Video entities by IDs.
func (pu *ProfissionalUpdate) RemoveVideoIDs(ids ...int) *ProfissionalUpdate {
	pu.mutation.RemoveVideoIDs(ids...)
	return pu
}

// RemoveVideos removes "videos" edges to Video entities.
func (pu *ProfissionalUpdate) RemoveVideos(v ...*Video) *ProfissionalUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.RemoveVideoIDs(ids...)
}

// ClearTratamentos clears all "tratamentos" edges to the Tratamento entity.
func (pu *ProfissionalUpdate) ClearTratamentos() *ProfissionalUpdate {
	pu.mutation.ClearTratamentos()
	return pu
}

// RemoveTratamentoIDs removes the "tratamentos" edge to Tratamento entities by IDs.
func (pu *ProfissionalUpdate) RemoveTratamentoIDs(ids ...int) *ProfissionalUpdate {
	pu.mutation.RemoveTratamentoIDs(ids...)
	return pu
}

// RemoveTratamentos removes "tratamentos" edges to Tratamento entities.
func (pu *ProfissionalUpdate) RemoveTratamentos(t ...*Tratamento) *ProfissionalUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTratamentoIDs(ids...)
}

// ClearPodcasts clears all "podcasts" edges to the Podcast entity.
func (pu *ProfissionalUpdate) ClearPodcasts() *ProfissionalUpdate {
	pu.mutation.ClearPodcasts()
	return pu
}

// RemovePodcastIDs removes the "podcasts" edge to Podcast entities by IDs.
func (pu *ProfissionalUpdate) RemovePodcastIDs(ids ...int) *ProfissionalUpdate {
	pu.mutation.RemovePodcastIDs(ids...)
	return pu
}

// RemovePodcasts removes "podcasts" edges to Podcast entities.
func (pu *ProfissionalUpdate) RemovePodcasts(p ...*Podcast) *ProfissionalUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePodcastIDs(ids...)
}

// ClearFotos clears all "fotos" edges to the Foto entity.
func (pu *ProfissionalUpdate) ClearFotos() *ProfissionalUpdate {
	pu.mutation.ClearFotos()
	return pu
}

// RemoveFotoIDs removes the "fotos" edge to Foto entities by IDs.
func (pu *ProfissionalUpdate) RemoveFotoIDs(ids ...int) *ProfissionalUpdate {
	pu.mutation.RemoveFotoIDs(ids...)
	return pu
}

// RemoveFotos removes "fotos" edges to Foto entities.
func (pu *ProfissionalUpdate) RemoveFotos(f ...*Foto) *ProfissionalUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveFotoIDs(ids...)
}

// ClearConvenios clears all "convenios" edges to the Convenio entity.
func (pu *ProfissionalUpdate) ClearConvenios() *ProfissionalUpdate {
	pu.mutation.ClearConvenios()
	return pu
}

// RemoveConvenioIDs removes the "convenios" edge to Convenio entities by IDs.
func (pu *ProfissionalUpdate) RemoveConvenioIDs(ids ...int) *ProfissionalUpdate {
	pu.mutation.RemoveConvenioIDs(ids...)
	return pu
}

// RemoveConvenios removes "convenios" edges to Convenio entities.
func (pu *ProfissionalUpdate) RemoveConvenios(c ...*Convenio) *ProfissionalUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveConvenioIDs(ids...)
}

// ClearEspecializacoes clears all "especializacoes" edges to the Especializacao entity.
func (pu *ProfissionalUpdate) ClearEspecializacoes() *ProfissionalUpdate {
	pu.mutation.ClearEspecializacoes()
	return pu
}

// RemoveEspecializacoIDs removes the "especializacoes" edge to Especializacao entities by IDs.
func (pu *ProfissionalUpdate) RemoveEspecializacoIDs(ids ...int) *ProfissionalUpdate {
	pu.mutation.RemoveEspecializacoIDs(ids...)
	return pu
}

// RemoveEspecializacoes removes "especializacoes" edges to Especializacao entities.
func (pu *ProfissionalUpdate) RemoveEspecializacoes(e ...*Especializacao) *ProfissionalUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.RemoveEspecializacoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProfissionalUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfissionalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProfissionalUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProfissionalUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProfissionalUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProfissionalUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := profissional.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProfissionalUpdate) check() error {
	if v, ok := pu.mutation.Nome(); ok {
		if err := profissional.NomeValidator(v); err != nil {
			return &ValidationError{Name: "nome", err: fmt.Errorf(`ent: validator failed for field "Profissional.nome": %w`, err)}
		}
	}
	if v, ok := pu.mutation.URLAmigavel(); ok {
		if err := profissional.URLAmigavelValidator(v); err != nil {
			return &ValidationError{Name: "url_amigavel", err: fmt.Errorf(`ent: validator failed for field "Profissional.url_amigavel": %w`, err)}
		}
	}
	if v, ok := pu.mutation.UnidadeID(); ok {
		if err := profissional.UnidadeIDValidator(v); err != nil {
			return &ValidationError{Name: "unidade_id", err: fmt.Errorf(`ent: validator failed for field "Profissional.unidade_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.EnderecoID(); ok {
		if err := profissional.EnderecoIDValidator(v); err != nil {
			return &ValidationError{Name: "endereco_id", err: fmt.Errorf(`ent: validator failed for field "Profissional.endereco_id": %w`, err)}
		}
	}
	return nil
}

func (pu *ProfissionalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profissional.Table,
			Columns: profissional.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: profissional.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: profissional.FieldUpdateTime,
		})
	}
	if value, ok := pu.mutation.Nome(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldNome,
		})
	}
	if value, ok := pu.mutation.URLAmigavel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldURLAmigavel,
		})
	}
	if value, ok := pu.mutation.Recomendado(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: profissional.FieldRecomendado,
		})
	}
	if value, ok := pu.mutation.Ativo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: profissional.FieldAtivo,
		})
	}
	if value, ok := pu.mutation.Sobre(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldSobre,
		})
	}
	if pu.mutation.SobreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profissional.FieldSobre,
		})
	}
	if value, ok := pu.mutation.Conselho(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldConselho,
		})
	}
	if pu.mutation.ConselhoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profissional.FieldConselho,
		})
	}
	if value, ok := pu.mutation.NumeroIdentificacao(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldNumeroIdentificacao,
		})
	}
	if pu.mutation.NumeroIdentificacaoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profissional.FieldNumeroIdentificacao,
		})
	}
	if value, ok := pu.mutation.Telefone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: profissional.FieldTelefone,
		})
	}
	if value, ok := pu.mutation.AddedTelefone(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: profissional.FieldTelefone,
		})
	}
	if value, ok := pu.mutation.Celular(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: profissional.FieldCelular,
		})
	}
	if value, ok := pu.mutation.AddedCelular(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: profissional.FieldCelular,
		})
	}
	if value, ok := pu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldEmail,
		})
	}
	if value, ok := pu.mutation.Site(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldSite,
		})
	}
	if value, ok := pu.mutation.Facebook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldFacebook,
		})
	}
	if pu.mutation.FacebookCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profissional.FieldFacebook,
		})
	}
	if value, ok := pu.mutation.Instagram(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldInstagram,
		})
	}
	if pu.mutation.InstagramCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profissional.FieldInstagram,
		})
	}
	if value, ok := pu.mutation.Youtube(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldYoutube,
		})
	}
	if pu.mutation.YoutubeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profissional.FieldYoutube,
		})
	}
	if value, ok := pu.mutation.Linkedin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldLinkedin,
		})
	}
	if pu.mutation.LinkedinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profissional.FieldLinkedin,
		})
	}
	if value, ok := pu.mutation.UnidadeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: profissional.FieldUnidadeID,
		})
	}
	if value, ok := pu.mutation.AddedUnidadeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: profissional.FieldUnidadeID,
		})
	}
	if value, ok := pu.mutation.EnderecoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: profissional.FieldEnderecoID,
		})
	}
	if value, ok := pu.mutation.AddedEnderecoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: profissional.FieldEnderecoID,
		})
	}
	if value, ok := pu.mutation.ImagemPerfilURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldImagemPerfilURL,
		})
	}
	if pu.mutation.WhatsappsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.WhatsappsTable,
			Columns: []string{profissional.WhatsappsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: whatsapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedWhatsappsIDs(); len(nodes) > 0 && !pu.mutation.WhatsappsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.WhatsappsTable,
			Columns: []string{profissional.WhatsappsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: whatsapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.WhatsappsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.WhatsappsTable,
			Columns: []string{profissional.WhatsappsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: whatsapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.VideosTable,
			Columns: []string{profissional.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedVideosIDs(); len(nodes) > 0 && !pu.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.VideosTable,
			Columns: []string{profissional.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.VideosTable,
			Columns: []string{profissional.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TratamentosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.TratamentosTable,
			Columns: []string{profissional.TratamentosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tratamento.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTratamentosIDs(); len(nodes) > 0 && !pu.mutation.TratamentosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.TratamentosTable,
			Columns: []string{profissional.TratamentosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tratamento.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TratamentosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.TratamentosTable,
			Columns: []string{profissional.TratamentosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tratamento.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PodcastsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.PodcastsTable,
			Columns: []string{profissional.PodcastsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: podcast.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPodcastsIDs(); len(nodes) > 0 && !pu.mutation.PodcastsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.PodcastsTable,
			Columns: []string{profissional.PodcastsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: podcast.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PodcastsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.PodcastsTable,
			Columns: []string{profissional.PodcastsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: podcast.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.FotosTable,
			Columns: []string{profissional.FotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foto.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFotosIDs(); len(nodes) > 0 && !pu.mutation.FotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.FotosTable,
			Columns: []string{profissional.FotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foto.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FotosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.FotosTable,
			Columns: []string{profissional.FotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foto.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ConveniosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.ConveniosTable,
			Columns: []string{profissional.ConveniosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: convenio.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedConveniosIDs(); len(nodes) > 0 && !pu.mutation.ConveniosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.ConveniosTable,
			Columns: []string{profissional.ConveniosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: convenio.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ConveniosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.ConveniosTable,
			Columns: []string{profissional.ConveniosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: convenio.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EspecializacoesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profissional.EspecializacoesTable,
			Columns: profissional.EspecializacoesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: especializacao.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedEspecializacoesIDs(); len(nodes) > 0 && !pu.mutation.EspecializacoesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profissional.EspecializacoesTable,
			Columns: profissional.EspecializacoesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: especializacao.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EspecializacoesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profissional.EspecializacoesTable,
			Columns: profissional.EspecializacoesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: especializacao.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profissional.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProfissionalUpdateOne is the builder for updating a single Profissional entity.
type ProfissionalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfissionalMutation
}

// SetUpdateTime sets the "update_time" field.
func (puo *ProfissionalUpdateOne) SetUpdateTime(t time.Time) *ProfissionalUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetNome sets the "nome" field.
func (puo *ProfissionalUpdateOne) SetNome(s string) *ProfissionalUpdateOne {
	puo.mutation.SetNome(s)
	return puo
}

// SetURLAmigavel sets the "url_amigavel" field.
func (puo *ProfissionalUpdateOne) SetURLAmigavel(s string) *ProfissionalUpdateOne {
	puo.mutation.SetURLAmigavel(s)
	return puo
}

// SetRecomendado sets the "recomendado" field.
func (puo *ProfissionalUpdateOne) SetRecomendado(b bool) *ProfissionalUpdateOne {
	puo.mutation.SetRecomendado(b)
	return puo
}

// SetNillableRecomendado sets the "recomendado" field if the given value is not nil.
func (puo *ProfissionalUpdateOne) SetNillableRecomendado(b *bool) *ProfissionalUpdateOne {
	if b != nil {
		puo.SetRecomendado(*b)
	}
	return puo
}

// SetAtivo sets the "ativo" field.
func (puo *ProfissionalUpdateOne) SetAtivo(b bool) *ProfissionalUpdateOne {
	puo.mutation.SetAtivo(b)
	return puo
}

// SetNillableAtivo sets the "ativo" field if the given value is not nil.
func (puo *ProfissionalUpdateOne) SetNillableAtivo(b *bool) *ProfissionalUpdateOne {
	if b != nil {
		puo.SetAtivo(*b)
	}
	return puo
}

// SetSobre sets the "sobre" field.
func (puo *ProfissionalUpdateOne) SetSobre(s string) *ProfissionalUpdateOne {
	puo.mutation.SetSobre(s)
	return puo
}

// SetNillableSobre sets the "sobre" field if the given value is not nil.
func (puo *ProfissionalUpdateOne) SetNillableSobre(s *string) *ProfissionalUpdateOne {
	if s != nil {
		puo.SetSobre(*s)
	}
	return puo
}

// ClearSobre clears the value of the "sobre" field.
func (puo *ProfissionalUpdateOne) ClearSobre() *ProfissionalUpdateOne {
	puo.mutation.ClearSobre()
	return puo
}

// SetConselho sets the "conselho" field.
func (puo *ProfissionalUpdateOne) SetConselho(s string) *ProfissionalUpdateOne {
	puo.mutation.SetConselho(s)
	return puo
}

// SetNillableConselho sets the "conselho" field if the given value is not nil.
func (puo *ProfissionalUpdateOne) SetNillableConselho(s *string) *ProfissionalUpdateOne {
	if s != nil {
		puo.SetConselho(*s)
	}
	return puo
}

// ClearConselho clears the value of the "conselho" field.
func (puo *ProfissionalUpdateOne) ClearConselho() *ProfissionalUpdateOne {
	puo.mutation.ClearConselho()
	return puo
}

// SetNumeroIdentificacao sets the "numero_identificacao" field.
func (puo *ProfissionalUpdateOne) SetNumeroIdentificacao(s string) *ProfissionalUpdateOne {
	puo.mutation.SetNumeroIdentificacao(s)
	return puo
}

// SetNillableNumeroIdentificacao sets the "numero_identificacao" field if the given value is not nil.
func (puo *ProfissionalUpdateOne) SetNillableNumeroIdentificacao(s *string) *ProfissionalUpdateOne {
	if s != nil {
		puo.SetNumeroIdentificacao(*s)
	}
	return puo
}

// ClearNumeroIdentificacao clears the value of the "numero_identificacao" field.
func (puo *ProfissionalUpdateOne) ClearNumeroIdentificacao() *ProfissionalUpdateOne {
	puo.mutation.ClearNumeroIdentificacao()
	return puo
}

// SetTelefone sets the "telefone" field.
func (puo *ProfissionalUpdateOne) SetTelefone(i int64) *ProfissionalUpdateOne {
	puo.mutation.ResetTelefone()
	puo.mutation.SetTelefone(i)
	return puo
}

// AddTelefone adds i to the "telefone" field.
func (puo *ProfissionalUpdateOne) AddTelefone(i int64) *ProfissionalUpdateOne {
	puo.mutation.AddTelefone(i)
	return puo
}

// SetCelular sets the "celular" field.
func (puo *ProfissionalUpdateOne) SetCelular(i int64) *ProfissionalUpdateOne {
	puo.mutation.ResetCelular()
	puo.mutation.SetCelular(i)
	return puo
}

// AddCelular adds i to the "celular" field.
func (puo *ProfissionalUpdateOne) AddCelular(i int64) *ProfissionalUpdateOne {
	puo.mutation.AddCelular(i)
	return puo
}

// SetEmail sets the "email" field.
func (puo *ProfissionalUpdateOne) SetEmail(s string) *ProfissionalUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetSite sets the "site" field.
func (puo *ProfissionalUpdateOne) SetSite(s string) *ProfissionalUpdateOne {
	puo.mutation.SetSite(s)
	return puo
}

// SetFacebook sets the "facebook" field.
func (puo *ProfissionalUpdateOne) SetFacebook(s string) *ProfissionalUpdateOne {
	puo.mutation.SetFacebook(s)
	return puo
}

// SetNillableFacebook sets the "facebook" field if the given value is not nil.
func (puo *ProfissionalUpdateOne) SetNillableFacebook(s *string) *ProfissionalUpdateOne {
	if s != nil {
		puo.SetFacebook(*s)
	}
	return puo
}

// ClearFacebook clears the value of the "facebook" field.
func (puo *ProfissionalUpdateOne) ClearFacebook() *ProfissionalUpdateOne {
	puo.mutation.ClearFacebook()
	return puo
}

// SetInstagram sets the "instagram" field.
func (puo *ProfissionalUpdateOne) SetInstagram(s string) *ProfissionalUpdateOne {
	puo.mutation.SetInstagram(s)
	return puo
}

// SetNillableInstagram sets the "instagram" field if the given value is not nil.
func (puo *ProfissionalUpdateOne) SetNillableInstagram(s *string) *ProfissionalUpdateOne {
	if s != nil {
		puo.SetInstagram(*s)
	}
	return puo
}

// ClearInstagram clears the value of the "instagram" field.
func (puo *ProfissionalUpdateOne) ClearInstagram() *ProfissionalUpdateOne {
	puo.mutation.ClearInstagram()
	return puo
}

// SetYoutube sets the "youtube" field.
func (puo *ProfissionalUpdateOne) SetYoutube(s string) *ProfissionalUpdateOne {
	puo.mutation.SetYoutube(s)
	return puo
}

// SetNillableYoutube sets the "youtube" field if the given value is not nil.
func (puo *ProfissionalUpdateOne) SetNillableYoutube(s *string) *ProfissionalUpdateOne {
	if s != nil {
		puo.SetYoutube(*s)
	}
	return puo
}

// ClearYoutube clears the value of the "youtube" field.
func (puo *ProfissionalUpdateOne) ClearYoutube() *ProfissionalUpdateOne {
	puo.mutation.ClearYoutube()
	return puo
}

// SetLinkedin sets the "linkedin" field.
func (puo *ProfissionalUpdateOne) SetLinkedin(s string) *ProfissionalUpdateOne {
	puo.mutation.SetLinkedin(s)
	return puo
}

// SetNillableLinkedin sets the "linkedin" field if the given value is not nil.
func (puo *ProfissionalUpdateOne) SetNillableLinkedin(s *string) *ProfissionalUpdateOne {
	if s != nil {
		puo.SetLinkedin(*s)
	}
	return puo
}

// ClearLinkedin clears the value of the "linkedin" field.
func (puo *ProfissionalUpdateOne) ClearLinkedin() *ProfissionalUpdateOne {
	puo.mutation.ClearLinkedin()
	return puo
}

// SetUnidadeID sets the "unidade_id" field.
func (puo *ProfissionalUpdateOne) SetUnidadeID(i int) *ProfissionalUpdateOne {
	puo.mutation.ResetUnidadeID()
	puo.mutation.SetUnidadeID(i)
	return puo
}

// AddUnidadeID adds i to the "unidade_id" field.
func (puo *ProfissionalUpdateOne) AddUnidadeID(i int) *ProfissionalUpdateOne {
	puo.mutation.AddUnidadeID(i)
	return puo
}

// SetEnderecoID sets the "endereco_id" field.
func (puo *ProfissionalUpdateOne) SetEnderecoID(i int) *ProfissionalUpdateOne {
	puo.mutation.ResetEnderecoID()
	puo.mutation.SetEnderecoID(i)
	return puo
}

// AddEnderecoID adds i to the "endereco_id" field.
func (puo *ProfissionalUpdateOne) AddEnderecoID(i int) *ProfissionalUpdateOne {
	puo.mutation.AddEnderecoID(i)
	return puo
}

// SetImagemPerfilURL sets the "imagem_perfil_url" field.
func (puo *ProfissionalUpdateOne) SetImagemPerfilURL(s string) *ProfissionalUpdateOne {
	puo.mutation.SetImagemPerfilURL(s)
	return puo
}

// AddWhatsappIDs adds the "whatsapps" edge to the WhatsApp entity by IDs.
func (puo *ProfissionalUpdateOne) AddWhatsappIDs(ids ...int) *ProfissionalUpdateOne {
	puo.mutation.AddWhatsappIDs(ids...)
	return puo
}

// AddWhatsapps adds the "whatsapps" edges to the WhatsApp entity.
func (puo *ProfissionalUpdateOne) AddWhatsapps(w ...*WhatsApp) *ProfissionalUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return puo.AddWhatsappIDs(ids...)
}

// AddVideoIDs adds the "videos" edge to the Video entity by IDs.
func (puo *ProfissionalUpdateOne) AddVideoIDs(ids ...int) *ProfissionalUpdateOne {
	puo.mutation.AddVideoIDs(ids...)
	return puo
}

// AddVideos adds the "videos" edges to the Video entity.
func (puo *ProfissionalUpdateOne) AddVideos(v ...*Video) *ProfissionalUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.AddVideoIDs(ids...)
}

// AddTratamentoIDs adds the "tratamentos" edge to the Tratamento entity by IDs.
func (puo *ProfissionalUpdateOne) AddTratamentoIDs(ids ...int) *ProfissionalUpdateOne {
	puo.mutation.AddTratamentoIDs(ids...)
	return puo
}

// AddTratamentos adds the "tratamentos" edges to the Tratamento entity.
func (puo *ProfissionalUpdateOne) AddTratamentos(t ...*Tratamento) *ProfissionalUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTratamentoIDs(ids...)
}

// AddPodcastIDs adds the "podcasts" edge to the Podcast entity by IDs.
func (puo *ProfissionalUpdateOne) AddPodcastIDs(ids ...int) *ProfissionalUpdateOne {
	puo.mutation.AddPodcastIDs(ids...)
	return puo
}

// AddPodcasts adds the "podcasts" edges to the Podcast entity.
func (puo *ProfissionalUpdateOne) AddPodcasts(p ...*Podcast) *ProfissionalUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPodcastIDs(ids...)
}

// AddFotoIDs adds the "fotos" edge to the Foto entity by IDs.
func (puo *ProfissionalUpdateOne) AddFotoIDs(ids ...int) *ProfissionalUpdateOne {
	puo.mutation.AddFotoIDs(ids...)
	return puo
}

// AddFotos adds the "fotos" edges to the Foto entity.
func (puo *ProfissionalUpdateOne) AddFotos(f ...*Foto) *ProfissionalUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddFotoIDs(ids...)
}

// AddConvenioIDs adds the "convenios" edge to the Convenio entity by IDs.
func (puo *ProfissionalUpdateOne) AddConvenioIDs(ids ...int) *ProfissionalUpdateOne {
	puo.mutation.AddConvenioIDs(ids...)
	return puo
}

// AddConvenios adds the "convenios" edges to the Convenio entity.
func (puo *ProfissionalUpdateOne) AddConvenios(c ...*Convenio) *ProfissionalUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddConvenioIDs(ids...)
}

// AddEspecializacoIDs adds the "especializacoes" edge to the Especializacao entity by IDs.
func (puo *ProfissionalUpdateOne) AddEspecializacoIDs(ids ...int) *ProfissionalUpdateOne {
	puo.mutation.AddEspecializacoIDs(ids...)
	return puo
}

// AddEspecializacoes adds the "especializacoes" edges to the Especializacao entity.
func (puo *ProfissionalUpdateOne) AddEspecializacoes(e ...*Especializacao) *ProfissionalUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.AddEspecializacoIDs(ids...)
}

// Mutation returns the ProfissionalMutation object of the builder.
func (puo *ProfissionalUpdateOne) Mutation() *ProfissionalMutation {
	return puo.mutation
}

// ClearWhatsapps clears all "whatsapps" edges to the WhatsApp entity.
func (puo *ProfissionalUpdateOne) ClearWhatsapps() *ProfissionalUpdateOne {
	puo.mutation.ClearWhatsapps()
	return puo
}

// RemoveWhatsappIDs removes the "whatsapps" edge to WhatsApp entities by IDs.
func (puo *ProfissionalUpdateOne) RemoveWhatsappIDs(ids ...int) *ProfissionalUpdateOne {
	puo.mutation.RemoveWhatsappIDs(ids...)
	return puo
}

// RemoveWhatsapps removes "whatsapps" edges to WhatsApp entities.
func (puo *ProfissionalUpdateOne) RemoveWhatsapps(w ...*WhatsApp) *ProfissionalUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return puo.RemoveWhatsappIDs(ids...)
}

// ClearVideos clears all "videos" edges to the Video entity.
func (puo *ProfissionalUpdateOne) ClearVideos() *ProfissionalUpdateOne {
	puo.mutation.ClearVideos()
	return puo
}

// RemoveVideoIDs removes the "videos" edge to Video entities by IDs.
func (puo *ProfissionalUpdateOne) RemoveVideoIDs(ids ...int) *ProfissionalUpdateOne {
	puo.mutation.RemoveVideoIDs(ids...)
	return puo
}

// RemoveVideos removes "videos" edges to Video entities.
func (puo *ProfissionalUpdateOne) RemoveVideos(v ...*Video) *ProfissionalUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.RemoveVideoIDs(ids...)
}

// ClearTratamentos clears all "tratamentos" edges to the Tratamento entity.
func (puo *ProfissionalUpdateOne) ClearTratamentos() *ProfissionalUpdateOne {
	puo.mutation.ClearTratamentos()
	return puo
}

// RemoveTratamentoIDs removes the "tratamentos" edge to Tratamento entities by IDs.
func (puo *ProfissionalUpdateOne) RemoveTratamentoIDs(ids ...int) *ProfissionalUpdateOne {
	puo.mutation.RemoveTratamentoIDs(ids...)
	return puo
}

// RemoveTratamentos removes "tratamentos" edges to Tratamento entities.
func (puo *ProfissionalUpdateOne) RemoveTratamentos(t ...*Tratamento) *ProfissionalUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTratamentoIDs(ids...)
}

// ClearPodcasts clears all "podcasts" edges to the Podcast entity.
func (puo *ProfissionalUpdateOne) ClearPodcasts() *ProfissionalUpdateOne {
	puo.mutation.ClearPodcasts()
	return puo
}

// RemovePodcastIDs removes the "podcasts" edge to Podcast entities by IDs.
func (puo *ProfissionalUpdateOne) RemovePodcastIDs(ids ...int) *ProfissionalUpdateOne {
	puo.mutation.RemovePodcastIDs(ids...)
	return puo
}

// RemovePodcasts removes "podcasts" edges to Podcast entities.
func (puo *ProfissionalUpdateOne) RemovePodcasts(p ...*Podcast) *ProfissionalUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePodcastIDs(ids...)
}

// ClearFotos clears all "fotos" edges to the Foto entity.
func (puo *ProfissionalUpdateOne) ClearFotos() *ProfissionalUpdateOne {
	puo.mutation.ClearFotos()
	return puo
}

// RemoveFotoIDs removes the "fotos" edge to Foto entities by IDs.
func (puo *ProfissionalUpdateOne) RemoveFotoIDs(ids ...int) *ProfissionalUpdateOne {
	puo.mutation.RemoveFotoIDs(ids...)
	return puo
}

// RemoveFotos removes "fotos" edges to Foto entities.
func (puo *ProfissionalUpdateOne) RemoveFotos(f ...*Foto) *ProfissionalUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveFotoIDs(ids...)
}

// ClearConvenios clears all "convenios" edges to the Convenio entity.
func (puo *ProfissionalUpdateOne) ClearConvenios() *ProfissionalUpdateOne {
	puo.mutation.ClearConvenios()
	return puo
}

// RemoveConvenioIDs removes the "convenios" edge to Convenio entities by IDs.
func (puo *ProfissionalUpdateOne) RemoveConvenioIDs(ids ...int) *ProfissionalUpdateOne {
	puo.mutation.RemoveConvenioIDs(ids...)
	return puo
}

// RemoveConvenios removes "convenios" edges to Convenio entities.
func (puo *ProfissionalUpdateOne) RemoveConvenios(c ...*Convenio) *ProfissionalUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveConvenioIDs(ids...)
}

// ClearEspecializacoes clears all "especializacoes" edges to the Especializacao entity.
func (puo *ProfissionalUpdateOne) ClearEspecializacoes() *ProfissionalUpdateOne {
	puo.mutation.ClearEspecializacoes()
	return puo
}

// RemoveEspecializacoIDs removes the "especializacoes" edge to Especializacao entities by IDs.
func (puo *ProfissionalUpdateOne) RemoveEspecializacoIDs(ids ...int) *ProfissionalUpdateOne {
	puo.mutation.RemoveEspecializacoIDs(ids...)
	return puo
}

// RemoveEspecializacoes removes "especializacoes" edges to Especializacao entities.
func (puo *ProfissionalUpdateOne) RemoveEspecializacoes(e ...*Especializacao) *ProfissionalUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.RemoveEspecializacoIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProfissionalUpdateOne) Select(field string, fields ...string) *ProfissionalUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Profissional entity.
func (puo *ProfissionalUpdateOne) Save(ctx context.Context) (*Profissional, error) {
	var (
		err  error
		node *Profissional
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfissionalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProfissionalUpdateOne) SaveX(ctx context.Context) *Profissional {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProfissionalUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProfissionalUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProfissionalUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := profissional.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProfissionalUpdateOne) check() error {
	if v, ok := puo.mutation.Nome(); ok {
		if err := profissional.NomeValidator(v); err != nil {
			return &ValidationError{Name: "nome", err: fmt.Errorf(`ent: validator failed for field "Profissional.nome": %w`, err)}
		}
	}
	if v, ok := puo.mutation.URLAmigavel(); ok {
		if err := profissional.URLAmigavelValidator(v); err != nil {
			return &ValidationError{Name: "url_amigavel", err: fmt.Errorf(`ent: validator failed for field "Profissional.url_amigavel": %w`, err)}
		}
	}
	if v, ok := puo.mutation.UnidadeID(); ok {
		if err := profissional.UnidadeIDValidator(v); err != nil {
			return &ValidationError{Name: "unidade_id", err: fmt.Errorf(`ent: validator failed for field "Profissional.unidade_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.EnderecoID(); ok {
		if err := profissional.EnderecoIDValidator(v); err != nil {
			return &ValidationError{Name: "endereco_id", err: fmt.Errorf(`ent: validator failed for field "Profissional.endereco_id": %w`, err)}
		}
	}
	return nil
}

func (puo *ProfissionalUpdateOne) sqlSave(ctx context.Context) (_node *Profissional, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profissional.Table,
			Columns: profissional.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: profissional.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Profissional.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profissional.FieldID)
		for _, f := range fields {
			if !profissional.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profissional.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: profissional.FieldUpdateTime,
		})
	}
	if value, ok := puo.mutation.Nome(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldNome,
		})
	}
	if value, ok := puo.mutation.URLAmigavel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldURLAmigavel,
		})
	}
	if value, ok := puo.mutation.Recomendado(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: profissional.FieldRecomendado,
		})
	}
	if value, ok := puo.mutation.Ativo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: profissional.FieldAtivo,
		})
	}
	if value, ok := puo.mutation.Sobre(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldSobre,
		})
	}
	if puo.mutation.SobreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profissional.FieldSobre,
		})
	}
	if value, ok := puo.mutation.Conselho(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldConselho,
		})
	}
	if puo.mutation.ConselhoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profissional.FieldConselho,
		})
	}
	if value, ok := puo.mutation.NumeroIdentificacao(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldNumeroIdentificacao,
		})
	}
	if puo.mutation.NumeroIdentificacaoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profissional.FieldNumeroIdentificacao,
		})
	}
	if value, ok := puo.mutation.Telefone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: profissional.FieldTelefone,
		})
	}
	if value, ok := puo.mutation.AddedTelefone(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: profissional.FieldTelefone,
		})
	}
	if value, ok := puo.mutation.Celular(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: profissional.FieldCelular,
		})
	}
	if value, ok := puo.mutation.AddedCelular(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: profissional.FieldCelular,
		})
	}
	if value, ok := puo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldEmail,
		})
	}
	if value, ok := puo.mutation.Site(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldSite,
		})
	}
	if value, ok := puo.mutation.Facebook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldFacebook,
		})
	}
	if puo.mutation.FacebookCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profissional.FieldFacebook,
		})
	}
	if value, ok := puo.mutation.Instagram(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldInstagram,
		})
	}
	if puo.mutation.InstagramCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profissional.FieldInstagram,
		})
	}
	if value, ok := puo.mutation.Youtube(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldYoutube,
		})
	}
	if puo.mutation.YoutubeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profissional.FieldYoutube,
		})
	}
	if value, ok := puo.mutation.Linkedin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldLinkedin,
		})
	}
	if puo.mutation.LinkedinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profissional.FieldLinkedin,
		})
	}
	if value, ok := puo.mutation.UnidadeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: profissional.FieldUnidadeID,
		})
	}
	if value, ok := puo.mutation.AddedUnidadeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: profissional.FieldUnidadeID,
		})
	}
	if value, ok := puo.mutation.EnderecoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: profissional.FieldEnderecoID,
		})
	}
	if value, ok := puo.mutation.AddedEnderecoID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: profissional.FieldEnderecoID,
		})
	}
	if value, ok := puo.mutation.ImagemPerfilURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profissional.FieldImagemPerfilURL,
		})
	}
	if puo.mutation.WhatsappsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.WhatsappsTable,
			Columns: []string{profissional.WhatsappsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: whatsapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedWhatsappsIDs(); len(nodes) > 0 && !puo.mutation.WhatsappsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.WhatsappsTable,
			Columns: []string{profissional.WhatsappsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: whatsapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.WhatsappsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.WhatsappsTable,
			Columns: []string{profissional.WhatsappsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: whatsapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.VideosTable,
			Columns: []string{profissional.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedVideosIDs(); len(nodes) > 0 && !puo.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.VideosTable,
			Columns: []string{profissional.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.VideosTable,
			Columns: []string{profissional.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TratamentosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.TratamentosTable,
			Columns: []string{profissional.TratamentosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tratamento.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTratamentosIDs(); len(nodes) > 0 && !puo.mutation.TratamentosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.TratamentosTable,
			Columns: []string{profissional.TratamentosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tratamento.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TratamentosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.TratamentosTable,
			Columns: []string{profissional.TratamentosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tratamento.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PodcastsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.PodcastsTable,
			Columns: []string{profissional.PodcastsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: podcast.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPodcastsIDs(); len(nodes) > 0 && !puo.mutation.PodcastsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.PodcastsTable,
			Columns: []string{profissional.PodcastsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: podcast.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PodcastsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.PodcastsTable,
			Columns: []string{profissional.PodcastsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: podcast.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.FotosTable,
			Columns: []string{profissional.FotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foto.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFotosIDs(); len(nodes) > 0 && !puo.mutation.FotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.FotosTable,
			Columns: []string{profissional.FotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foto.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FotosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.FotosTable,
			Columns: []string{profissional.FotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foto.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ConveniosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.ConveniosTable,
			Columns: []string{profissional.ConveniosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: convenio.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedConveniosIDs(); len(nodes) > 0 && !puo.mutation.ConveniosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.ConveniosTable,
			Columns: []string{profissional.ConveniosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: convenio.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ConveniosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profissional.ConveniosTable,
			Columns: []string{profissional.ConveniosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: convenio.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EspecializacoesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profissional.EspecializacoesTable,
			Columns: profissional.EspecializacoesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: especializacao.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedEspecializacoesIDs(); len(nodes) > 0 && !puo.mutation.EspecializacoesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profissional.EspecializacoesTable,
			Columns: profissional.EspecializacoesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: especializacao.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EspecializacoesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profissional.EspecializacoesTable,
			Columns: profissional.EspecializacoesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: especializacao.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Profissional{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profissional.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
