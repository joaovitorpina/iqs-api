// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"profissional/ent/profissional"
	"profissional/ent/whatsapp"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// WhatsApp is the model entity for the WhatsApp schema.
type WhatsApp struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Numero holds the value of the "numero" field.
	Numero int64 `json:"numero,omitempty"`
	// Principal holds the value of the "principal" field.
	Principal bool `json:"principal,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WhatsAppQuery when eager-loading is set.
	Edges                  WhatsAppEdges `json:"edges"`
	profissional_whatsapps *int
}

// WhatsAppEdges holds the relations/edges for other nodes in the graph.
type WhatsAppEdges struct {
	// Profissional holds the value of the profissional edge.
	Profissional *Profissional `json:"profissional,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProfissionalOrErr returns the Profissional value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WhatsAppEdges) ProfissionalOrErr() (*Profissional, error) {
	if e.loadedTypes[0] {
		if e.Profissional == nil {
			// The edge profissional was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: profissional.Label}
		}
		return e.Profissional, nil
	}
	return nil, &NotLoadedError{edge: "profissional"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WhatsApp) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case whatsapp.FieldPrincipal:
			values[i] = new(sql.NullBool)
		case whatsapp.FieldID, whatsapp.FieldNumero:
			values[i] = new(sql.NullInt64)
		case whatsapp.ForeignKeys[0]: // profissional_whatsapps
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WhatsApp", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WhatsApp fields.
func (wa *WhatsApp) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case whatsapp.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wa.ID = int(value.Int64)
		case whatsapp.FieldNumero:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field numero", values[i])
			} else if value.Valid {
				wa.Numero = value.Int64
			}
		case whatsapp.FieldPrincipal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field principal", values[i])
			} else if value.Valid {
				wa.Principal = value.Bool
			}
		case whatsapp.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field profissional_whatsapps", value)
			} else if value.Valid {
				wa.profissional_whatsapps = new(int)
				*wa.profissional_whatsapps = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProfissional queries the "profissional" edge of the WhatsApp entity.
func (wa *WhatsApp) QueryProfissional() *ProfissionalQuery {
	return (&WhatsAppClient{config: wa.config}).QueryProfissional(wa)
}

// Update returns a builder for updating this WhatsApp.
// Note that you need to call WhatsApp.Unwrap() before calling this method if this WhatsApp
// was returned from a transaction, and the transaction was committed or rolled back.
func (wa *WhatsApp) Update() *WhatsAppUpdateOne {
	return (&WhatsAppClient{config: wa.config}).UpdateOne(wa)
}

// Unwrap unwraps the WhatsApp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wa *WhatsApp) Unwrap() *WhatsApp {
	tx, ok := wa.config.driver.(*txDriver)
	if !ok {
		panic("ent: WhatsApp is not a transactional entity")
	}
	wa.config.driver = tx.drv
	return wa
}

// String implements the fmt.Stringer.
func (wa *WhatsApp) String() string {
	var builder strings.Builder
	builder.WriteString("WhatsApp(")
	builder.WriteString(fmt.Sprintf("id=%v", wa.ID))
	builder.WriteString(", numero=")
	builder.WriteString(fmt.Sprintf("%v", wa.Numero))
	builder.WriteString(", principal=")
	builder.WriteString(fmt.Sprintf("%v", wa.Principal))
	builder.WriteByte(')')
	return builder.String()
}

// WhatsApps is a parsable slice of WhatsApp.
type WhatsApps []*WhatsApp

func (wa WhatsApps) config(cfg config) {
	for _i := range wa {
		wa[_i].config = cfg
	}
}
