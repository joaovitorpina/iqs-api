// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"profissional/ent/profissional"
	"profissional/ent/video"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Video is the model entity for the Video schema.
type Video struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Titulo holds the value of the "titulo" field.
	Titulo string `json:"titulo,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// URLThumbnail holds the value of the "url_thumbnail" field.
	URLThumbnail string `json:"url_thumbnail,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VideoQuery when eager-loading is set.
	Edges               VideoEdges `json:"edges"`
	profissional_videos *int
}

// VideoEdges holds the relations/edges for other nodes in the graph.
type VideoEdges struct {
	// Profissional holds the value of the profissional edge.
	Profissional *Profissional `json:"profissional,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProfissionalOrErr returns the Profissional value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VideoEdges) ProfissionalOrErr() (*Profissional, error) {
	if e.loadedTypes[0] {
		if e.Profissional == nil {
			// The edge profissional was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: profissional.Label}
		}
		return e.Profissional, nil
	}
	return nil, &NotLoadedError{edge: "profissional"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Video) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case video.FieldID:
			values[i] = new(sql.NullInt64)
		case video.FieldTitulo, video.FieldURL, video.FieldURLThumbnail:
			values[i] = new(sql.NullString)
		case video.ForeignKeys[0]: // profissional_videos
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Video", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Video fields.
func (v *Video) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case video.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case video.FieldTitulo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field titulo", values[i])
			} else if value.Valid {
				v.Titulo = value.String
			}
		case video.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				v.URL = value.String
			}
		case video.FieldURLThumbnail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url_thumbnail", values[i])
			} else if value.Valid {
				v.URLThumbnail = value.String
			}
		case video.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field profissional_videos", value)
			} else if value.Valid {
				v.profissional_videos = new(int)
				*v.profissional_videos = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProfissional queries the "profissional" edge of the Video entity.
func (v *Video) QueryProfissional() *ProfissionalQuery {
	return (&VideoClient{config: v.config}).QueryProfissional(v)
}

// Update returns a builder for updating this Video.
// Note that you need to call Video.Unwrap() before calling this method if this Video
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Video) Update() *VideoUpdateOne {
	return (&VideoClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Video entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Video) Unwrap() *Video {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Video is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Video) String() string {
	var builder strings.Builder
	builder.WriteString("Video(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", titulo=")
	builder.WriteString(v.Titulo)
	builder.WriteString(", url=")
	builder.WriteString(v.URL)
	builder.WriteString(", url_thumbnail=")
	builder.WriteString(v.URLThumbnail)
	builder.WriteByte(')')
	return builder.String()
}

// Videos is a parsable slice of Video.
type Videos []*Video

func (v Videos) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
