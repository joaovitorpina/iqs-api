// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"profissional/ent/areasaude"
	"profissional/ent/convenio"
	"profissional/ent/especializacao"
	"profissional/ent/foto"
	"profissional/ent/podcast"
	"profissional/ent/predicate"
	"profissional/ent/profissional"
	"profissional/ent/tratamento"
	"profissional/ent/video"
	"profissional/ent/whatsapp"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAreaSaude      = "AreaSaude"
	TypeConvenio       = "Convenio"
	TypeEspecializacao = "Especializacao"
	TypeFoto           = "Foto"
	TypePodcast        = "Podcast"
	TypeProfissional   = "Profissional"
	TypeTratamento     = "Tratamento"
	TypeVideo          = "Video"
	TypeWhatsApp       = "WhatsApp"
)

// AreaSaudeMutation represents an operation that mutates the AreaSaude nodes in the graph.
type AreaSaudeMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	descricao              *string
	clearedFields          map[string]struct{}
	especializacoes        map[int]struct{}
	removedespecializacoes map[int]struct{}
	clearedespecializacoes bool
	done                   bool
	oldValue               func(context.Context) (*AreaSaude, error)
	predicates             []predicate.AreaSaude
}

var _ ent.Mutation = (*AreaSaudeMutation)(nil)

// areasaudeOption allows management of the mutation configuration using functional options.
type areasaudeOption func(*AreaSaudeMutation)

// newAreaSaudeMutation creates new mutation for the AreaSaude entity.
func newAreaSaudeMutation(c config, op Op, opts ...areasaudeOption) *AreaSaudeMutation {
	m := &AreaSaudeMutation{
		config:        c,
		op:            op,
		typ:           TypeAreaSaude,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAreaSaudeID sets the ID field of the mutation.
func withAreaSaudeID(id int) areasaudeOption {
	return func(m *AreaSaudeMutation) {
		var (
			err   error
			once  sync.Once
			value *AreaSaude
		)
		m.oldValue = func(ctx context.Context) (*AreaSaude, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AreaSaude.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAreaSaude sets the old AreaSaude of the mutation.
func withAreaSaude(node *AreaSaude) areasaudeOption {
	return func(m *AreaSaudeMutation) {
		m.oldValue = func(context.Context) (*AreaSaude, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AreaSaudeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AreaSaudeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AreaSaudeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDescricao sets the "descricao" field.
func (m *AreaSaudeMutation) SetDescricao(s string) {
	m.descricao = &s
}

// Descricao returns the value of the "descricao" field in the mutation.
func (m *AreaSaudeMutation) Descricao() (r string, exists bool) {
	v := m.descricao
	if v == nil {
		return
	}
	return *v, true
}

// OldDescricao returns the old "descricao" field's value of the AreaSaude entity.
// If the AreaSaude object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AreaSaudeMutation) OldDescricao(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescricao is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescricao requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescricao: %w", err)
	}
	return oldValue.Descricao, nil
}

// ResetDescricao resets all changes to the "descricao" field.
func (m *AreaSaudeMutation) ResetDescricao() {
	m.descricao = nil
}

// AddEspecializacoIDs adds the "especializacoes" edge to the Especializacao entity by ids.
func (m *AreaSaudeMutation) AddEspecializacoIDs(ids ...int) {
	if m.especializacoes == nil {
		m.especializacoes = make(map[int]struct{})
	}
	for i := range ids {
		m.especializacoes[ids[i]] = struct{}{}
	}
}

// ClearEspecializacoes clears the "especializacoes" edge to the Especializacao entity.
func (m *AreaSaudeMutation) ClearEspecializacoes() {
	m.clearedespecializacoes = true
}

// EspecializacoesCleared reports if the "especializacoes" edge to the Especializacao entity was cleared.
func (m *AreaSaudeMutation) EspecializacoesCleared() bool {
	return m.clearedespecializacoes
}

// RemoveEspecializacoIDs removes the "especializacoes" edge to the Especializacao entity by IDs.
func (m *AreaSaudeMutation) RemoveEspecializacoIDs(ids ...int) {
	if m.removedespecializacoes == nil {
		m.removedespecializacoes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.especializacoes, ids[i])
		m.removedespecializacoes[ids[i]] = struct{}{}
	}
}

// RemovedEspecializacoes returns the removed IDs of the "especializacoes" edge to the Especializacao entity.
func (m *AreaSaudeMutation) RemovedEspecializacoesIDs() (ids []int) {
	for id := range m.removedespecializacoes {
		ids = append(ids, id)
	}
	return
}

// EspecializacoesIDs returns the "especializacoes" edge IDs in the mutation.
func (m *AreaSaudeMutation) EspecializacoesIDs() (ids []int) {
	for id := range m.especializacoes {
		ids = append(ids, id)
	}
	return
}

// ResetEspecializacoes resets all changes to the "especializacoes" edge.
func (m *AreaSaudeMutation) ResetEspecializacoes() {
	m.especializacoes = nil
	m.clearedespecializacoes = false
	m.removedespecializacoes = nil
}

// Where appends a list predicates to the AreaSaudeMutation builder.
func (m *AreaSaudeMutation) Where(ps ...predicate.AreaSaude) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AreaSaudeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AreaSaude).
func (m *AreaSaudeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AreaSaudeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.descricao != nil {
		fields = append(fields, areasaude.FieldDescricao)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AreaSaudeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case areasaude.FieldDescricao:
		return m.Descricao()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AreaSaudeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case areasaude.FieldDescricao:
		return m.OldDescricao(ctx)
	}
	return nil, fmt.Errorf("unknown AreaSaude field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AreaSaudeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case areasaude.FieldDescricao:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescricao(v)
		return nil
	}
	return fmt.Errorf("unknown AreaSaude field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AreaSaudeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AreaSaudeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AreaSaudeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AreaSaude numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AreaSaudeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AreaSaudeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AreaSaudeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AreaSaude nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AreaSaudeMutation) ResetField(name string) error {
	switch name {
	case areasaude.FieldDescricao:
		m.ResetDescricao()
		return nil
	}
	return fmt.Errorf("unknown AreaSaude field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AreaSaudeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.especializacoes != nil {
		edges = append(edges, areasaude.EdgeEspecializacoes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AreaSaudeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case areasaude.EdgeEspecializacoes:
		ids := make([]ent.Value, 0, len(m.especializacoes))
		for id := range m.especializacoes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AreaSaudeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedespecializacoes != nil {
		edges = append(edges, areasaude.EdgeEspecializacoes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AreaSaudeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case areasaude.EdgeEspecializacoes:
		ids := make([]ent.Value, 0, len(m.removedespecializacoes))
		for id := range m.removedespecializacoes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AreaSaudeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedespecializacoes {
		edges = append(edges, areasaude.EdgeEspecializacoes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AreaSaudeMutation) EdgeCleared(name string) bool {
	switch name {
	case areasaude.EdgeEspecializacoes:
		return m.clearedespecializacoes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AreaSaudeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown AreaSaude unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AreaSaudeMutation) ResetEdge(name string) error {
	switch name {
	case areasaude.EdgeEspecializacoes:
		m.ResetEspecializacoes()
		return nil
	}
	return fmt.Errorf("unknown AreaSaude edge %s", name)
}

// ConvenioMutation represents an operation that mutates the Convenio nodes in the graph.
type ConvenioMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	nome                *string
	clearedFields       map[string]struct{}
	profissional        *int
	clearedprofissional bool
	done                bool
	oldValue            func(context.Context) (*Convenio, error)
	predicates          []predicate.Convenio
}

var _ ent.Mutation = (*ConvenioMutation)(nil)

// convenioOption allows management of the mutation configuration using functional options.
type convenioOption func(*ConvenioMutation)

// newConvenioMutation creates new mutation for the Convenio entity.
func newConvenioMutation(c config, op Op, opts ...convenioOption) *ConvenioMutation {
	m := &ConvenioMutation{
		config:        c,
		op:            op,
		typ:           TypeConvenio,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withConvenioID sets the ID field of the mutation.
func withConvenioID(id int) convenioOption {
	return func(m *ConvenioMutation) {
		var (
			err   error
			once  sync.Once
			value *Convenio
		)
		m.oldValue = func(ctx context.Context) (*Convenio, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Convenio.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withConvenio sets the old Convenio of the mutation.
func withConvenio(node *Convenio) convenioOption {
	return func(m *ConvenioMutation) {
		m.oldValue = func(context.Context) (*Convenio, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ConvenioMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ConvenioMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ConvenioMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNome sets the "nome" field.
func (m *ConvenioMutation) SetNome(s string) {
	m.nome = &s
}

// Nome returns the value of the "nome" field in the mutation.
func (m *ConvenioMutation) Nome() (r string, exists bool) {
	v := m.nome
	if v == nil {
		return
	}
	return *v, true
}

// OldNome returns the old "nome" field's value of the Convenio entity.
// If the Convenio object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConvenioMutation) OldNome(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNome is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNome requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNome: %w", err)
	}
	return oldValue.Nome, nil
}

// ResetNome resets all changes to the "nome" field.
func (m *ConvenioMutation) ResetNome() {
	m.nome = nil
}

// SetProfissionalID sets the "profissional" edge to the Profissional entity by id.
func (m *ConvenioMutation) SetProfissionalID(id int) {
	m.profissional = &id
}

// ClearProfissional clears the "profissional" edge to the Profissional entity.
func (m *ConvenioMutation) ClearProfissional() {
	m.clearedprofissional = true
}

// ProfissionalCleared reports if the "profissional" edge to the Profissional entity was cleared.
func (m *ConvenioMutation) ProfissionalCleared() bool {
	return m.clearedprofissional
}

// ProfissionalID returns the "profissional" edge ID in the mutation.
func (m *ConvenioMutation) ProfissionalID() (id int, exists bool) {
	if m.profissional != nil {
		return *m.profissional, true
	}
	return
}

// ProfissionalIDs returns the "profissional" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProfissionalID instead. It exists only for internal usage by the builders.
func (m *ConvenioMutation) ProfissionalIDs() (ids []int) {
	if id := m.profissional; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfissional resets all changes to the "profissional" edge.
func (m *ConvenioMutation) ResetProfissional() {
	m.profissional = nil
	m.clearedprofissional = false
}

// Where appends a list predicates to the ConvenioMutation builder.
func (m *ConvenioMutation) Where(ps ...predicate.Convenio) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ConvenioMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Convenio).
func (m *ConvenioMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ConvenioMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.nome != nil {
		fields = append(fields, convenio.FieldNome)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ConvenioMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case convenio.FieldNome:
		return m.Nome()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ConvenioMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case convenio.FieldNome:
		return m.OldNome(ctx)
	}
	return nil, fmt.Errorf("unknown Convenio field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConvenioMutation) SetField(name string, value ent.Value) error {
	switch name {
	case convenio.FieldNome:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNome(v)
		return nil
	}
	return fmt.Errorf("unknown Convenio field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ConvenioMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ConvenioMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConvenioMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Convenio numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ConvenioMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ConvenioMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ConvenioMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Convenio nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ConvenioMutation) ResetField(name string) error {
	switch name {
	case convenio.FieldNome:
		m.ResetNome()
		return nil
	}
	return fmt.Errorf("unknown Convenio field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ConvenioMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.profissional != nil {
		edges = append(edges, convenio.EdgeProfissional)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ConvenioMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case convenio.EdgeProfissional:
		if id := m.profissional; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ConvenioMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ConvenioMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ConvenioMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprofissional {
		edges = append(edges, convenio.EdgeProfissional)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ConvenioMutation) EdgeCleared(name string) bool {
	switch name {
	case convenio.EdgeProfissional:
		return m.clearedprofissional
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ConvenioMutation) ClearEdge(name string) error {
	switch name {
	case convenio.EdgeProfissional:
		m.ClearProfissional()
		return nil
	}
	return fmt.Errorf("unknown Convenio unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ConvenioMutation) ResetEdge(name string) error {
	switch name {
	case convenio.EdgeProfissional:
		m.ResetProfissional()
		return nil
	}
	return fmt.Errorf("unknown Convenio edge %s", name)
}

// EspecializacaoMutation represents an operation that mutates the Especializacao nodes in the graph.
type EspecializacaoMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	descricao            *string
	clearedFields        map[string]struct{}
	areasaude            *int
	clearedareasaude     bool
	profissionais        map[int]struct{}
	removedprofissionais map[int]struct{}
	clearedprofissionais bool
	done                 bool
	oldValue             func(context.Context) (*Especializacao, error)
	predicates           []predicate.Especializacao
}

var _ ent.Mutation = (*EspecializacaoMutation)(nil)

// especializacaoOption allows management of the mutation configuration using functional options.
type especializacaoOption func(*EspecializacaoMutation)

// newEspecializacaoMutation creates new mutation for the Especializacao entity.
func newEspecializacaoMutation(c config, op Op, opts ...especializacaoOption) *EspecializacaoMutation {
	m := &EspecializacaoMutation{
		config:        c,
		op:            op,
		typ:           TypeEspecializacao,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEspecializacaoID sets the ID field of the mutation.
func withEspecializacaoID(id int) especializacaoOption {
	return func(m *EspecializacaoMutation) {
		var (
			err   error
			once  sync.Once
			value *Especializacao
		)
		m.oldValue = func(ctx context.Context) (*Especializacao, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Especializacao.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEspecializacao sets the old Especializacao of the mutation.
func withEspecializacao(node *Especializacao) especializacaoOption {
	return func(m *EspecializacaoMutation) {
		m.oldValue = func(context.Context) (*Especializacao, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EspecializacaoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EspecializacaoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EspecializacaoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDescricao sets the "descricao" field.
func (m *EspecializacaoMutation) SetDescricao(s string) {
	m.descricao = &s
}

// Descricao returns the value of the "descricao" field in the mutation.
func (m *EspecializacaoMutation) Descricao() (r string, exists bool) {
	v := m.descricao
	if v == nil {
		return
	}
	return *v, true
}

// OldDescricao returns the old "descricao" field's value of the Especializacao entity.
// If the Especializacao object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EspecializacaoMutation) OldDescricao(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescricao is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescricao requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescricao: %w", err)
	}
	return oldValue.Descricao, nil
}

// ResetDescricao resets all changes to the "descricao" field.
func (m *EspecializacaoMutation) ResetDescricao() {
	m.descricao = nil
}

// SetAreasaudeID sets the "areasaude" edge to the AreaSaude entity by id.
func (m *EspecializacaoMutation) SetAreasaudeID(id int) {
	m.areasaude = &id
}

// ClearAreasaude clears the "areasaude" edge to the AreaSaude entity.
func (m *EspecializacaoMutation) ClearAreasaude() {
	m.clearedareasaude = true
}

// AreasaudeCleared reports if the "areasaude" edge to the AreaSaude entity was cleared.
func (m *EspecializacaoMutation) AreasaudeCleared() bool {
	return m.clearedareasaude
}

// AreasaudeID returns the "areasaude" edge ID in the mutation.
func (m *EspecializacaoMutation) AreasaudeID() (id int, exists bool) {
	if m.areasaude != nil {
		return *m.areasaude, true
	}
	return
}

// AreasaudeIDs returns the "areasaude" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AreasaudeID instead. It exists only for internal usage by the builders.
func (m *EspecializacaoMutation) AreasaudeIDs() (ids []int) {
	if id := m.areasaude; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAreasaude resets all changes to the "areasaude" edge.
func (m *EspecializacaoMutation) ResetAreasaude() {
	m.areasaude = nil
	m.clearedareasaude = false
}

// AddProfissionaiIDs adds the "profissionais" edge to the Profissional entity by ids.
func (m *EspecializacaoMutation) AddProfissionaiIDs(ids ...int) {
	if m.profissionais == nil {
		m.profissionais = make(map[int]struct{})
	}
	for i := range ids {
		m.profissionais[ids[i]] = struct{}{}
	}
}

// ClearProfissionais clears the "profissionais" edge to the Profissional entity.
func (m *EspecializacaoMutation) ClearProfissionais() {
	m.clearedprofissionais = true
}

// ProfissionaisCleared reports if the "profissionais" edge to the Profissional entity was cleared.
func (m *EspecializacaoMutation) ProfissionaisCleared() bool {
	return m.clearedprofissionais
}

// RemoveProfissionaiIDs removes the "profissionais" edge to the Profissional entity by IDs.
func (m *EspecializacaoMutation) RemoveProfissionaiIDs(ids ...int) {
	if m.removedprofissionais == nil {
		m.removedprofissionais = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.profissionais, ids[i])
		m.removedprofissionais[ids[i]] = struct{}{}
	}
}

// RemovedProfissionais returns the removed IDs of the "profissionais" edge to the Profissional entity.
func (m *EspecializacaoMutation) RemovedProfissionaisIDs() (ids []int) {
	for id := range m.removedprofissionais {
		ids = append(ids, id)
	}
	return
}

// ProfissionaisIDs returns the "profissionais" edge IDs in the mutation.
func (m *EspecializacaoMutation) ProfissionaisIDs() (ids []int) {
	for id := range m.profissionais {
		ids = append(ids, id)
	}
	return
}

// ResetProfissionais resets all changes to the "profissionais" edge.
func (m *EspecializacaoMutation) ResetProfissionais() {
	m.profissionais = nil
	m.clearedprofissionais = false
	m.removedprofissionais = nil
}

// Where appends a list predicates to the EspecializacaoMutation builder.
func (m *EspecializacaoMutation) Where(ps ...predicate.Especializacao) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EspecializacaoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Especializacao).
func (m *EspecializacaoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EspecializacaoMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.descricao != nil {
		fields = append(fields, especializacao.FieldDescricao)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EspecializacaoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case especializacao.FieldDescricao:
		return m.Descricao()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EspecializacaoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case especializacao.FieldDescricao:
		return m.OldDescricao(ctx)
	}
	return nil, fmt.Errorf("unknown Especializacao field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EspecializacaoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case especializacao.FieldDescricao:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescricao(v)
		return nil
	}
	return fmt.Errorf("unknown Especializacao field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EspecializacaoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EspecializacaoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EspecializacaoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Especializacao numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EspecializacaoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EspecializacaoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EspecializacaoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Especializacao nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EspecializacaoMutation) ResetField(name string) error {
	switch name {
	case especializacao.FieldDescricao:
		m.ResetDescricao()
		return nil
	}
	return fmt.Errorf("unknown Especializacao field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EspecializacaoMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.areasaude != nil {
		edges = append(edges, especializacao.EdgeAreasaude)
	}
	if m.profissionais != nil {
		edges = append(edges, especializacao.EdgeProfissionais)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EspecializacaoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case especializacao.EdgeAreasaude:
		if id := m.areasaude; id != nil {
			return []ent.Value{*id}
		}
	case especializacao.EdgeProfissionais:
		ids := make([]ent.Value, 0, len(m.profissionais))
		for id := range m.profissionais {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EspecializacaoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedprofissionais != nil {
		edges = append(edges, especializacao.EdgeProfissionais)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EspecializacaoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case especializacao.EdgeProfissionais:
		ids := make([]ent.Value, 0, len(m.removedprofissionais))
		for id := range m.removedprofissionais {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EspecializacaoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedareasaude {
		edges = append(edges, especializacao.EdgeAreasaude)
	}
	if m.clearedprofissionais {
		edges = append(edges, especializacao.EdgeProfissionais)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EspecializacaoMutation) EdgeCleared(name string) bool {
	switch name {
	case especializacao.EdgeAreasaude:
		return m.clearedareasaude
	case especializacao.EdgeProfissionais:
		return m.clearedprofissionais
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EspecializacaoMutation) ClearEdge(name string) error {
	switch name {
	case especializacao.EdgeAreasaude:
		m.ClearAreasaude()
		return nil
	}
	return fmt.Errorf("unknown Especializacao unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EspecializacaoMutation) ResetEdge(name string) error {
	switch name {
	case especializacao.EdgeAreasaude:
		m.ResetAreasaude()
		return nil
	case especializacao.EdgeProfissionais:
		m.ResetProfissionais()
		return nil
	}
	return fmt.Errorf("unknown Especializacao edge %s", name)
}

// FotoMutation represents an operation that mutates the Foto nodes in the graph.
type FotoMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	titulo              *string
	url                 *string
	clearedFields       map[string]struct{}
	profissional        *int
	clearedprofissional bool
	done                bool
	oldValue            func(context.Context) (*Foto, error)
	predicates          []predicate.Foto
}

var _ ent.Mutation = (*FotoMutation)(nil)

// fotoOption allows management of the mutation configuration using functional options.
type fotoOption func(*FotoMutation)

// newFotoMutation creates new mutation for the Foto entity.
func newFotoMutation(c config, op Op, opts ...fotoOption) *FotoMutation {
	m := &FotoMutation{
		config:        c,
		op:            op,
		typ:           TypeFoto,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFotoID sets the ID field of the mutation.
func withFotoID(id int) fotoOption {
	return func(m *FotoMutation) {
		var (
			err   error
			once  sync.Once
			value *Foto
		)
		m.oldValue = func(ctx context.Context) (*Foto, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Foto.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFoto sets the old Foto of the mutation.
func withFoto(node *Foto) fotoOption {
	return func(m *FotoMutation) {
		m.oldValue = func(context.Context) (*Foto, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FotoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FotoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FotoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitulo sets the "titulo" field.
func (m *FotoMutation) SetTitulo(s string) {
	m.titulo = &s
}

// Titulo returns the value of the "titulo" field in the mutation.
func (m *FotoMutation) Titulo() (r string, exists bool) {
	v := m.titulo
	if v == nil {
		return
	}
	return *v, true
}

// OldTitulo returns the old "titulo" field's value of the Foto entity.
// If the Foto object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FotoMutation) OldTitulo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitulo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitulo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitulo: %w", err)
	}
	return oldValue.Titulo, nil
}

// ResetTitulo resets all changes to the "titulo" field.
func (m *FotoMutation) ResetTitulo() {
	m.titulo = nil
}

// SetURL sets the "url" field.
func (m *FotoMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *FotoMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Foto entity.
// If the Foto object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FotoMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *FotoMutation) ResetURL() {
	m.url = nil
}

// SetProfissionalID sets the "profissional" edge to the Profissional entity by id.
func (m *FotoMutation) SetProfissionalID(id int) {
	m.profissional = &id
}

// ClearProfissional clears the "profissional" edge to the Profissional entity.
func (m *FotoMutation) ClearProfissional() {
	m.clearedprofissional = true
}

// ProfissionalCleared reports if the "profissional" edge to the Profissional entity was cleared.
func (m *FotoMutation) ProfissionalCleared() bool {
	return m.clearedprofissional
}

// ProfissionalID returns the "profissional" edge ID in the mutation.
func (m *FotoMutation) ProfissionalID() (id int, exists bool) {
	if m.profissional != nil {
		return *m.profissional, true
	}
	return
}

// ProfissionalIDs returns the "profissional" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProfissionalID instead. It exists only for internal usage by the builders.
func (m *FotoMutation) ProfissionalIDs() (ids []int) {
	if id := m.profissional; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfissional resets all changes to the "profissional" edge.
func (m *FotoMutation) ResetProfissional() {
	m.profissional = nil
	m.clearedprofissional = false
}

// Where appends a list predicates to the FotoMutation builder.
func (m *FotoMutation) Where(ps ...predicate.Foto) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FotoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Foto).
func (m *FotoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FotoMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.titulo != nil {
		fields = append(fields, foto.FieldTitulo)
	}
	if m.url != nil {
		fields = append(fields, foto.FieldURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FotoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case foto.FieldTitulo:
		return m.Titulo()
	case foto.FieldURL:
		return m.URL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FotoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case foto.FieldTitulo:
		return m.OldTitulo(ctx)
	case foto.FieldURL:
		return m.OldURL(ctx)
	}
	return nil, fmt.Errorf("unknown Foto field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FotoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case foto.FieldTitulo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitulo(v)
		return nil
	case foto.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	}
	return fmt.Errorf("unknown Foto field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FotoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FotoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FotoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Foto numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FotoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FotoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FotoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Foto nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FotoMutation) ResetField(name string) error {
	switch name {
	case foto.FieldTitulo:
		m.ResetTitulo()
		return nil
	case foto.FieldURL:
		m.ResetURL()
		return nil
	}
	return fmt.Errorf("unknown Foto field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FotoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.profissional != nil {
		edges = append(edges, foto.EdgeProfissional)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FotoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case foto.EdgeProfissional:
		if id := m.profissional; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FotoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FotoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FotoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprofissional {
		edges = append(edges, foto.EdgeProfissional)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FotoMutation) EdgeCleared(name string) bool {
	switch name {
	case foto.EdgeProfissional:
		return m.clearedprofissional
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FotoMutation) ClearEdge(name string) error {
	switch name {
	case foto.EdgeProfissional:
		m.ClearProfissional()
		return nil
	}
	return fmt.Errorf("unknown Foto unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FotoMutation) ResetEdge(name string) error {
	switch name {
	case foto.EdgeProfissional:
		m.ResetProfissional()
		return nil
	}
	return fmt.Errorf("unknown Foto edge %s", name)
}

// PodcastMutation represents an operation that mutates the Podcast nodes in the graph.
type PodcastMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	titulo              *string
	codigo              *string
	clearedFields       map[string]struct{}
	profissional        *int
	clearedprofissional bool
	done                bool
	oldValue            func(context.Context) (*Podcast, error)
	predicates          []predicate.Podcast
}

var _ ent.Mutation = (*PodcastMutation)(nil)

// podcastOption allows management of the mutation configuration using functional options.
type podcastOption func(*PodcastMutation)

// newPodcastMutation creates new mutation for the Podcast entity.
func newPodcastMutation(c config, op Op, opts ...podcastOption) *PodcastMutation {
	m := &PodcastMutation{
		config:        c,
		op:            op,
		typ:           TypePodcast,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPodcastID sets the ID field of the mutation.
func withPodcastID(id int) podcastOption {
	return func(m *PodcastMutation) {
		var (
			err   error
			once  sync.Once
			value *Podcast
		)
		m.oldValue = func(ctx context.Context) (*Podcast, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Podcast.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPodcast sets the old Podcast of the mutation.
func withPodcast(node *Podcast) podcastOption {
	return func(m *PodcastMutation) {
		m.oldValue = func(context.Context) (*Podcast, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PodcastMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PodcastMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PodcastMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitulo sets the "titulo" field.
func (m *PodcastMutation) SetTitulo(s string) {
	m.titulo = &s
}

// Titulo returns the value of the "titulo" field in the mutation.
func (m *PodcastMutation) Titulo() (r string, exists bool) {
	v := m.titulo
	if v == nil {
		return
	}
	return *v, true
}

// OldTitulo returns the old "titulo" field's value of the Podcast entity.
// If the Podcast object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PodcastMutation) OldTitulo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitulo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitulo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitulo: %w", err)
	}
	return oldValue.Titulo, nil
}

// ResetTitulo resets all changes to the "titulo" field.
func (m *PodcastMutation) ResetTitulo() {
	m.titulo = nil
}

// SetCodigo sets the "codigo" field.
func (m *PodcastMutation) SetCodigo(s string) {
	m.codigo = &s
}

// Codigo returns the value of the "codigo" field in the mutation.
func (m *PodcastMutation) Codigo() (r string, exists bool) {
	v := m.codigo
	if v == nil {
		return
	}
	return *v, true
}

// OldCodigo returns the old "codigo" field's value of the Podcast entity.
// If the Podcast object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PodcastMutation) OldCodigo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCodigo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCodigo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCodigo: %w", err)
	}
	return oldValue.Codigo, nil
}

// ResetCodigo resets all changes to the "codigo" field.
func (m *PodcastMutation) ResetCodigo() {
	m.codigo = nil
}

// SetProfissionalID sets the "profissional" edge to the Profissional entity by id.
func (m *PodcastMutation) SetProfissionalID(id int) {
	m.profissional = &id
}

// ClearProfissional clears the "profissional" edge to the Profissional entity.
func (m *PodcastMutation) ClearProfissional() {
	m.clearedprofissional = true
}

// ProfissionalCleared reports if the "profissional" edge to the Profissional entity was cleared.
func (m *PodcastMutation) ProfissionalCleared() bool {
	return m.clearedprofissional
}

// ProfissionalID returns the "profissional" edge ID in the mutation.
func (m *PodcastMutation) ProfissionalID() (id int, exists bool) {
	if m.profissional != nil {
		return *m.profissional, true
	}
	return
}

// ProfissionalIDs returns the "profissional" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProfissionalID instead. It exists only for internal usage by the builders.
func (m *PodcastMutation) ProfissionalIDs() (ids []int) {
	if id := m.profissional; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfissional resets all changes to the "profissional" edge.
func (m *PodcastMutation) ResetProfissional() {
	m.profissional = nil
	m.clearedprofissional = false
}

// Where appends a list predicates to the PodcastMutation builder.
func (m *PodcastMutation) Where(ps ...predicate.Podcast) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PodcastMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Podcast).
func (m *PodcastMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PodcastMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.titulo != nil {
		fields = append(fields, podcast.FieldTitulo)
	}
	if m.codigo != nil {
		fields = append(fields, podcast.FieldCodigo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PodcastMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case podcast.FieldTitulo:
		return m.Titulo()
	case podcast.FieldCodigo:
		return m.Codigo()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PodcastMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case podcast.FieldTitulo:
		return m.OldTitulo(ctx)
	case podcast.FieldCodigo:
		return m.OldCodigo(ctx)
	}
	return nil, fmt.Errorf("unknown Podcast field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PodcastMutation) SetField(name string, value ent.Value) error {
	switch name {
	case podcast.FieldTitulo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitulo(v)
		return nil
	case podcast.FieldCodigo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCodigo(v)
		return nil
	}
	return fmt.Errorf("unknown Podcast field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PodcastMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PodcastMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PodcastMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Podcast numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PodcastMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PodcastMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PodcastMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Podcast nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PodcastMutation) ResetField(name string) error {
	switch name {
	case podcast.FieldTitulo:
		m.ResetTitulo()
		return nil
	case podcast.FieldCodigo:
		m.ResetCodigo()
		return nil
	}
	return fmt.Errorf("unknown Podcast field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PodcastMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.profissional != nil {
		edges = append(edges, podcast.EdgeProfissional)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PodcastMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case podcast.EdgeProfissional:
		if id := m.profissional; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PodcastMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PodcastMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PodcastMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprofissional {
		edges = append(edges, podcast.EdgeProfissional)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PodcastMutation) EdgeCleared(name string) bool {
	switch name {
	case podcast.EdgeProfissional:
		return m.clearedprofissional
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PodcastMutation) ClearEdge(name string) error {
	switch name {
	case podcast.EdgeProfissional:
		m.ClearProfissional()
		return nil
	}
	return fmt.Errorf("unknown Podcast unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PodcastMutation) ResetEdge(name string) error {
	switch name {
	case podcast.EdgeProfissional:
		m.ResetProfissional()
		return nil
	}
	return fmt.Errorf("unknown Podcast edge %s", name)
}

// ProfissionalMutation represents an operation that mutates the Profissional nodes in the graph.
type ProfissionalMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	create_time            *time.Time
	update_time            *time.Time
	nome                   *string
	url_amigavel           *string
	recomendado            *bool
	ativo                  *bool
	sobre                  *string
	conselho               *string
	numero_identificacao   *string
	telefone               *int32
	addtelefone            *int32
	celular                *int32
	addcelular             *int32
	email                  *string
	site                   *string
	facebook               *string
	instagram              *string
	youtube                *string
	linkedin               *string
	unidade_id             *int
	addunidade_id          *int
	endereco_id            *int
	addendereco_id         *int
	imagem_perfil_url      *string
	clearedFields          map[string]struct{}
	whatsapps              map[int]struct{}
	removedwhatsapps       map[int]struct{}
	clearedwhatsapps       bool
	videos                 map[int]struct{}
	removedvideos          map[int]struct{}
	clearedvideos          bool
	tratamentos            map[int]struct{}
	removedtratamentos     map[int]struct{}
	clearedtratamentos     bool
	podcasts               map[int]struct{}
	removedpodcasts        map[int]struct{}
	clearedpodcasts        bool
	fotos                  map[int]struct{}
	removedfotos           map[int]struct{}
	clearedfotos           bool
	convenios              map[int]struct{}
	removedconvenios       map[int]struct{}
	clearedconvenios       bool
	especializacoes        map[int]struct{}
	removedespecializacoes map[int]struct{}
	clearedespecializacoes bool
	done                   bool
	oldValue               func(context.Context) (*Profissional, error)
	predicates             []predicate.Profissional
}

var _ ent.Mutation = (*ProfissionalMutation)(nil)

// profissionalOption allows management of the mutation configuration using functional options.
type profissionalOption func(*ProfissionalMutation)

// newProfissionalMutation creates new mutation for the Profissional entity.
func newProfissionalMutation(c config, op Op, opts ...profissionalOption) *ProfissionalMutation {
	m := &ProfissionalMutation{
		config:        c,
		op:            op,
		typ:           TypeProfissional,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProfissionalID sets the ID field of the mutation.
func withProfissionalID(id int) profissionalOption {
	return func(m *ProfissionalMutation) {
		var (
			err   error
			once  sync.Once
			value *Profissional
		)
		m.oldValue = func(ctx context.Context) (*Profissional, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Profissional.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProfissional sets the old Profissional of the mutation.
func withProfissional(node *Profissional) profissionalOption {
	return func(m *ProfissionalMutation) {
		m.oldValue = func(context.Context) (*Profissional, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProfissionalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProfissionalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProfissionalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *ProfissionalMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ProfissionalMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ProfissionalMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ProfissionalMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ProfissionalMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ProfissionalMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetNome sets the "nome" field.
func (m *ProfissionalMutation) SetNome(s string) {
	m.nome = &s
}

// Nome returns the value of the "nome" field in the mutation.
func (m *ProfissionalMutation) Nome() (r string, exists bool) {
	v := m.nome
	if v == nil {
		return
	}
	return *v, true
}

// OldNome returns the old "nome" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldNome(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNome is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNome requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNome: %w", err)
	}
	return oldValue.Nome, nil
}

// ResetNome resets all changes to the "nome" field.
func (m *ProfissionalMutation) ResetNome() {
	m.nome = nil
}

// SetURLAmigavel sets the "url_amigavel" field.
func (m *ProfissionalMutation) SetURLAmigavel(s string) {
	m.url_amigavel = &s
}

// URLAmigavel returns the value of the "url_amigavel" field in the mutation.
func (m *ProfissionalMutation) URLAmigavel() (r string, exists bool) {
	v := m.url_amigavel
	if v == nil {
		return
	}
	return *v, true
}

// OldURLAmigavel returns the old "url_amigavel" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldURLAmigavel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldURLAmigavel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldURLAmigavel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURLAmigavel: %w", err)
	}
	return oldValue.URLAmigavel, nil
}

// ResetURLAmigavel resets all changes to the "url_amigavel" field.
func (m *ProfissionalMutation) ResetURLAmigavel() {
	m.url_amigavel = nil
}

// SetRecomendado sets the "recomendado" field.
func (m *ProfissionalMutation) SetRecomendado(b bool) {
	m.recomendado = &b
}

// Recomendado returns the value of the "recomendado" field in the mutation.
func (m *ProfissionalMutation) Recomendado() (r bool, exists bool) {
	v := m.recomendado
	if v == nil {
		return
	}
	return *v, true
}

// OldRecomendado returns the old "recomendado" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldRecomendado(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRecomendado is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRecomendado requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecomendado: %w", err)
	}
	return oldValue.Recomendado, nil
}

// ResetRecomendado resets all changes to the "recomendado" field.
func (m *ProfissionalMutation) ResetRecomendado() {
	m.recomendado = nil
}

// SetAtivo sets the "ativo" field.
func (m *ProfissionalMutation) SetAtivo(b bool) {
	m.ativo = &b
}

// Ativo returns the value of the "ativo" field in the mutation.
func (m *ProfissionalMutation) Ativo() (r bool, exists bool) {
	v := m.ativo
	if v == nil {
		return
	}
	return *v, true
}

// OldAtivo returns the old "ativo" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldAtivo(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAtivo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAtivo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAtivo: %w", err)
	}
	return oldValue.Ativo, nil
}

// ResetAtivo resets all changes to the "ativo" field.
func (m *ProfissionalMutation) ResetAtivo() {
	m.ativo = nil
}

// SetSobre sets the "sobre" field.
func (m *ProfissionalMutation) SetSobre(s string) {
	m.sobre = &s
}

// Sobre returns the value of the "sobre" field in the mutation.
func (m *ProfissionalMutation) Sobre() (r string, exists bool) {
	v := m.sobre
	if v == nil {
		return
	}
	return *v, true
}

// OldSobre returns the old "sobre" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldSobre(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSobre is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSobre requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSobre: %w", err)
	}
	return oldValue.Sobre, nil
}

// ClearSobre clears the value of the "sobre" field.
func (m *ProfissionalMutation) ClearSobre() {
	m.sobre = nil
	m.clearedFields[profissional.FieldSobre] = struct{}{}
}

// SobreCleared returns if the "sobre" field was cleared in this mutation.
func (m *ProfissionalMutation) SobreCleared() bool {
	_, ok := m.clearedFields[profissional.FieldSobre]
	return ok
}

// ResetSobre resets all changes to the "sobre" field.
func (m *ProfissionalMutation) ResetSobre() {
	m.sobre = nil
	delete(m.clearedFields, profissional.FieldSobre)
}

// SetConselho sets the "conselho" field.
func (m *ProfissionalMutation) SetConselho(s string) {
	m.conselho = &s
}

// Conselho returns the value of the "conselho" field in the mutation.
func (m *ProfissionalMutation) Conselho() (r string, exists bool) {
	v := m.conselho
	if v == nil {
		return
	}
	return *v, true
}

// OldConselho returns the old "conselho" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldConselho(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConselho is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConselho requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConselho: %w", err)
	}
	return oldValue.Conselho, nil
}

// ClearConselho clears the value of the "conselho" field.
func (m *ProfissionalMutation) ClearConselho() {
	m.conselho = nil
	m.clearedFields[profissional.FieldConselho] = struct{}{}
}

// ConselhoCleared returns if the "conselho" field was cleared in this mutation.
func (m *ProfissionalMutation) ConselhoCleared() bool {
	_, ok := m.clearedFields[profissional.FieldConselho]
	return ok
}

// ResetConselho resets all changes to the "conselho" field.
func (m *ProfissionalMutation) ResetConselho() {
	m.conselho = nil
	delete(m.clearedFields, profissional.FieldConselho)
}

// SetNumeroIdentificacao sets the "numero_identificacao" field.
func (m *ProfissionalMutation) SetNumeroIdentificacao(s string) {
	m.numero_identificacao = &s
}

// NumeroIdentificacao returns the value of the "numero_identificacao" field in the mutation.
func (m *ProfissionalMutation) NumeroIdentificacao() (r string, exists bool) {
	v := m.numero_identificacao
	if v == nil {
		return
	}
	return *v, true
}

// OldNumeroIdentificacao returns the old "numero_identificacao" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldNumeroIdentificacao(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNumeroIdentificacao is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNumeroIdentificacao requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumeroIdentificacao: %w", err)
	}
	return oldValue.NumeroIdentificacao, nil
}

// ClearNumeroIdentificacao clears the value of the "numero_identificacao" field.
func (m *ProfissionalMutation) ClearNumeroIdentificacao() {
	m.numero_identificacao = nil
	m.clearedFields[profissional.FieldNumeroIdentificacao] = struct{}{}
}

// NumeroIdentificacaoCleared returns if the "numero_identificacao" field was cleared in this mutation.
func (m *ProfissionalMutation) NumeroIdentificacaoCleared() bool {
	_, ok := m.clearedFields[profissional.FieldNumeroIdentificacao]
	return ok
}

// ResetNumeroIdentificacao resets all changes to the "numero_identificacao" field.
func (m *ProfissionalMutation) ResetNumeroIdentificacao() {
	m.numero_identificacao = nil
	delete(m.clearedFields, profissional.FieldNumeroIdentificacao)
}

// SetTelefone sets the "telefone" field.
func (m *ProfissionalMutation) SetTelefone(i int32) {
	m.telefone = &i
	m.addtelefone = nil
}

// Telefone returns the value of the "telefone" field in the mutation.
func (m *ProfissionalMutation) Telefone() (r int32, exists bool) {
	v := m.telefone
	if v == nil {
		return
	}
	return *v, true
}

// OldTelefone returns the old "telefone" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldTelefone(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTelefone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTelefone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTelefone: %w", err)
	}
	return oldValue.Telefone, nil
}

// AddTelefone adds i to the "telefone" field.
func (m *ProfissionalMutation) AddTelefone(i int32) {
	if m.addtelefone != nil {
		*m.addtelefone += i
	} else {
		m.addtelefone = &i
	}
}

// AddedTelefone returns the value that was added to the "telefone" field in this mutation.
func (m *ProfissionalMutation) AddedTelefone() (r int32, exists bool) {
	v := m.addtelefone
	if v == nil {
		return
	}
	return *v, true
}

// ResetTelefone resets all changes to the "telefone" field.
func (m *ProfissionalMutation) ResetTelefone() {
	m.telefone = nil
	m.addtelefone = nil
}

// SetCelular sets the "celular" field.
func (m *ProfissionalMutation) SetCelular(i int32) {
	m.celular = &i
	m.addcelular = nil
}

// Celular returns the value of the "celular" field in the mutation.
func (m *ProfissionalMutation) Celular() (r int32, exists bool) {
	v := m.celular
	if v == nil {
		return
	}
	return *v, true
}

// OldCelular returns the old "celular" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldCelular(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCelular is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCelular requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCelular: %w", err)
	}
	return oldValue.Celular, nil
}

// AddCelular adds i to the "celular" field.
func (m *ProfissionalMutation) AddCelular(i int32) {
	if m.addcelular != nil {
		*m.addcelular += i
	} else {
		m.addcelular = &i
	}
}

// AddedCelular returns the value that was added to the "celular" field in this mutation.
func (m *ProfissionalMutation) AddedCelular() (r int32, exists bool) {
	v := m.addcelular
	if v == nil {
		return
	}
	return *v, true
}

// ResetCelular resets all changes to the "celular" field.
func (m *ProfissionalMutation) ResetCelular() {
	m.celular = nil
	m.addcelular = nil
}

// SetEmail sets the "email" field.
func (m *ProfissionalMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *ProfissionalMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *ProfissionalMutation) ResetEmail() {
	m.email = nil
}

// SetSite sets the "site" field.
func (m *ProfissionalMutation) SetSite(s string) {
	m.site = &s
}

// Site returns the value of the "site" field in the mutation.
func (m *ProfissionalMutation) Site() (r string, exists bool) {
	v := m.site
	if v == nil {
		return
	}
	return *v, true
}

// OldSite returns the old "site" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldSite(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSite: %w", err)
	}
	return oldValue.Site, nil
}

// ResetSite resets all changes to the "site" field.
func (m *ProfissionalMutation) ResetSite() {
	m.site = nil
}

// SetFacebook sets the "facebook" field.
func (m *ProfissionalMutation) SetFacebook(s string) {
	m.facebook = &s
}

// Facebook returns the value of the "facebook" field in the mutation.
func (m *ProfissionalMutation) Facebook() (r string, exists bool) {
	v := m.facebook
	if v == nil {
		return
	}
	return *v, true
}

// OldFacebook returns the old "facebook" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldFacebook(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFacebook is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFacebook requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFacebook: %w", err)
	}
	return oldValue.Facebook, nil
}

// ClearFacebook clears the value of the "facebook" field.
func (m *ProfissionalMutation) ClearFacebook() {
	m.facebook = nil
	m.clearedFields[profissional.FieldFacebook] = struct{}{}
}

// FacebookCleared returns if the "facebook" field was cleared in this mutation.
func (m *ProfissionalMutation) FacebookCleared() bool {
	_, ok := m.clearedFields[profissional.FieldFacebook]
	return ok
}

// ResetFacebook resets all changes to the "facebook" field.
func (m *ProfissionalMutation) ResetFacebook() {
	m.facebook = nil
	delete(m.clearedFields, profissional.FieldFacebook)
}

// SetInstagram sets the "instagram" field.
func (m *ProfissionalMutation) SetInstagram(s string) {
	m.instagram = &s
}

// Instagram returns the value of the "instagram" field in the mutation.
func (m *ProfissionalMutation) Instagram() (r string, exists bool) {
	v := m.instagram
	if v == nil {
		return
	}
	return *v, true
}

// OldInstagram returns the old "instagram" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldInstagram(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInstagram is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInstagram requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstagram: %w", err)
	}
	return oldValue.Instagram, nil
}

// ClearInstagram clears the value of the "instagram" field.
func (m *ProfissionalMutation) ClearInstagram() {
	m.instagram = nil
	m.clearedFields[profissional.FieldInstagram] = struct{}{}
}

// InstagramCleared returns if the "instagram" field was cleared in this mutation.
func (m *ProfissionalMutation) InstagramCleared() bool {
	_, ok := m.clearedFields[profissional.FieldInstagram]
	return ok
}

// ResetInstagram resets all changes to the "instagram" field.
func (m *ProfissionalMutation) ResetInstagram() {
	m.instagram = nil
	delete(m.clearedFields, profissional.FieldInstagram)
}

// SetYoutube sets the "youtube" field.
func (m *ProfissionalMutation) SetYoutube(s string) {
	m.youtube = &s
}

// Youtube returns the value of the "youtube" field in the mutation.
func (m *ProfissionalMutation) Youtube() (r string, exists bool) {
	v := m.youtube
	if v == nil {
		return
	}
	return *v, true
}

// OldYoutube returns the old "youtube" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldYoutube(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldYoutube is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldYoutube requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYoutube: %w", err)
	}
	return oldValue.Youtube, nil
}

// ClearYoutube clears the value of the "youtube" field.
func (m *ProfissionalMutation) ClearYoutube() {
	m.youtube = nil
	m.clearedFields[profissional.FieldYoutube] = struct{}{}
}

// YoutubeCleared returns if the "youtube" field was cleared in this mutation.
func (m *ProfissionalMutation) YoutubeCleared() bool {
	_, ok := m.clearedFields[profissional.FieldYoutube]
	return ok
}

// ResetYoutube resets all changes to the "youtube" field.
func (m *ProfissionalMutation) ResetYoutube() {
	m.youtube = nil
	delete(m.clearedFields, profissional.FieldYoutube)
}

// SetLinkedin sets the "linkedin" field.
func (m *ProfissionalMutation) SetLinkedin(s string) {
	m.linkedin = &s
}

// Linkedin returns the value of the "linkedin" field in the mutation.
func (m *ProfissionalMutation) Linkedin() (r string, exists bool) {
	v := m.linkedin
	if v == nil {
		return
	}
	return *v, true
}

// OldLinkedin returns the old "linkedin" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldLinkedin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLinkedin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLinkedin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinkedin: %w", err)
	}
	return oldValue.Linkedin, nil
}

// ClearLinkedin clears the value of the "linkedin" field.
func (m *ProfissionalMutation) ClearLinkedin() {
	m.linkedin = nil
	m.clearedFields[profissional.FieldLinkedin] = struct{}{}
}

// LinkedinCleared returns if the "linkedin" field was cleared in this mutation.
func (m *ProfissionalMutation) LinkedinCleared() bool {
	_, ok := m.clearedFields[profissional.FieldLinkedin]
	return ok
}

// ResetLinkedin resets all changes to the "linkedin" field.
func (m *ProfissionalMutation) ResetLinkedin() {
	m.linkedin = nil
	delete(m.clearedFields, profissional.FieldLinkedin)
}

// SetUnidadeID sets the "unidade_id" field.
func (m *ProfissionalMutation) SetUnidadeID(i int) {
	m.unidade_id = &i
	m.addunidade_id = nil
}

// UnidadeID returns the value of the "unidade_id" field in the mutation.
func (m *ProfissionalMutation) UnidadeID() (r int, exists bool) {
	v := m.unidade_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUnidadeID returns the old "unidade_id" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldUnidadeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnidadeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnidadeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnidadeID: %w", err)
	}
	return oldValue.UnidadeID, nil
}

// AddUnidadeID adds i to the "unidade_id" field.
func (m *ProfissionalMutation) AddUnidadeID(i int) {
	if m.addunidade_id != nil {
		*m.addunidade_id += i
	} else {
		m.addunidade_id = &i
	}
}

// AddedUnidadeID returns the value that was added to the "unidade_id" field in this mutation.
func (m *ProfissionalMutation) AddedUnidadeID() (r int, exists bool) {
	v := m.addunidade_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUnidadeID resets all changes to the "unidade_id" field.
func (m *ProfissionalMutation) ResetUnidadeID() {
	m.unidade_id = nil
	m.addunidade_id = nil
}

// SetEnderecoID sets the "endereco_id" field.
func (m *ProfissionalMutation) SetEnderecoID(i int) {
	m.endereco_id = &i
	m.addendereco_id = nil
}

// EnderecoID returns the value of the "endereco_id" field in the mutation.
func (m *ProfissionalMutation) EnderecoID() (r int, exists bool) {
	v := m.endereco_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEnderecoID returns the old "endereco_id" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldEnderecoID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEnderecoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEnderecoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnderecoID: %w", err)
	}
	return oldValue.EnderecoID, nil
}

// AddEnderecoID adds i to the "endereco_id" field.
func (m *ProfissionalMutation) AddEnderecoID(i int) {
	if m.addendereco_id != nil {
		*m.addendereco_id += i
	} else {
		m.addendereco_id = &i
	}
}

// AddedEnderecoID returns the value that was added to the "endereco_id" field in this mutation.
func (m *ProfissionalMutation) AddedEnderecoID() (r int, exists bool) {
	v := m.addendereco_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetEnderecoID resets all changes to the "endereco_id" field.
func (m *ProfissionalMutation) ResetEnderecoID() {
	m.endereco_id = nil
	m.addendereco_id = nil
}

// SetImagemPerfilURL sets the "imagem_perfil_url" field.
func (m *ProfissionalMutation) SetImagemPerfilURL(s string) {
	m.imagem_perfil_url = &s
}

// ImagemPerfilURL returns the value of the "imagem_perfil_url" field in the mutation.
func (m *ProfissionalMutation) ImagemPerfilURL() (r string, exists bool) {
	v := m.imagem_perfil_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImagemPerfilURL returns the old "imagem_perfil_url" field's value of the Profissional entity.
// If the Profissional object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfissionalMutation) OldImagemPerfilURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldImagemPerfilURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldImagemPerfilURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImagemPerfilURL: %w", err)
	}
	return oldValue.ImagemPerfilURL, nil
}

// ResetImagemPerfilURL resets all changes to the "imagem_perfil_url" field.
func (m *ProfissionalMutation) ResetImagemPerfilURL() {
	m.imagem_perfil_url = nil
}

// AddWhatsappIDs adds the "whatsapps" edge to the WhatsApp entity by ids.
func (m *ProfissionalMutation) AddWhatsappIDs(ids ...int) {
	if m.whatsapps == nil {
		m.whatsapps = make(map[int]struct{})
	}
	for i := range ids {
		m.whatsapps[ids[i]] = struct{}{}
	}
}

// ClearWhatsapps clears the "whatsapps" edge to the WhatsApp entity.
func (m *ProfissionalMutation) ClearWhatsapps() {
	m.clearedwhatsapps = true
}

// WhatsappsCleared reports if the "whatsapps" edge to the WhatsApp entity was cleared.
func (m *ProfissionalMutation) WhatsappsCleared() bool {
	return m.clearedwhatsapps
}

// RemoveWhatsappIDs removes the "whatsapps" edge to the WhatsApp entity by IDs.
func (m *ProfissionalMutation) RemoveWhatsappIDs(ids ...int) {
	if m.removedwhatsapps == nil {
		m.removedwhatsapps = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.whatsapps, ids[i])
		m.removedwhatsapps[ids[i]] = struct{}{}
	}
}

// RemovedWhatsapps returns the removed IDs of the "whatsapps" edge to the WhatsApp entity.
func (m *ProfissionalMutation) RemovedWhatsappsIDs() (ids []int) {
	for id := range m.removedwhatsapps {
		ids = append(ids, id)
	}
	return
}

// WhatsappsIDs returns the "whatsapps" edge IDs in the mutation.
func (m *ProfissionalMutation) WhatsappsIDs() (ids []int) {
	for id := range m.whatsapps {
		ids = append(ids, id)
	}
	return
}

// ResetWhatsapps resets all changes to the "whatsapps" edge.
func (m *ProfissionalMutation) ResetWhatsapps() {
	m.whatsapps = nil
	m.clearedwhatsapps = false
	m.removedwhatsapps = nil
}

// AddVideoIDs adds the "videos" edge to the Video entity by ids.
func (m *ProfissionalMutation) AddVideoIDs(ids ...int) {
	if m.videos == nil {
		m.videos = make(map[int]struct{})
	}
	for i := range ids {
		m.videos[ids[i]] = struct{}{}
	}
}

// ClearVideos clears the "videos" edge to the Video entity.
func (m *ProfissionalMutation) ClearVideos() {
	m.clearedvideos = true
}

// VideosCleared reports if the "videos" edge to the Video entity was cleared.
func (m *ProfissionalMutation) VideosCleared() bool {
	return m.clearedvideos
}

// RemoveVideoIDs removes the "videos" edge to the Video entity by IDs.
func (m *ProfissionalMutation) RemoveVideoIDs(ids ...int) {
	if m.removedvideos == nil {
		m.removedvideos = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.videos, ids[i])
		m.removedvideos[ids[i]] = struct{}{}
	}
}

// RemovedVideos returns the removed IDs of the "videos" edge to the Video entity.
func (m *ProfissionalMutation) RemovedVideosIDs() (ids []int) {
	for id := range m.removedvideos {
		ids = append(ids, id)
	}
	return
}

// VideosIDs returns the "videos" edge IDs in the mutation.
func (m *ProfissionalMutation) VideosIDs() (ids []int) {
	for id := range m.videos {
		ids = append(ids, id)
	}
	return
}

// ResetVideos resets all changes to the "videos" edge.
func (m *ProfissionalMutation) ResetVideos() {
	m.videos = nil
	m.clearedvideos = false
	m.removedvideos = nil
}

// AddTratamentoIDs adds the "tratamentos" edge to the Tratamento entity by ids.
func (m *ProfissionalMutation) AddTratamentoIDs(ids ...int) {
	if m.tratamentos == nil {
		m.tratamentos = make(map[int]struct{})
	}
	for i := range ids {
		m.tratamentos[ids[i]] = struct{}{}
	}
}

// ClearTratamentos clears the "tratamentos" edge to the Tratamento entity.
func (m *ProfissionalMutation) ClearTratamentos() {
	m.clearedtratamentos = true
}

// TratamentosCleared reports if the "tratamentos" edge to the Tratamento entity was cleared.
func (m *ProfissionalMutation) TratamentosCleared() bool {
	return m.clearedtratamentos
}

// RemoveTratamentoIDs removes the "tratamentos" edge to the Tratamento entity by IDs.
func (m *ProfissionalMutation) RemoveTratamentoIDs(ids ...int) {
	if m.removedtratamentos == nil {
		m.removedtratamentos = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tratamentos, ids[i])
		m.removedtratamentos[ids[i]] = struct{}{}
	}
}

// RemovedTratamentos returns the removed IDs of the "tratamentos" edge to the Tratamento entity.
func (m *ProfissionalMutation) RemovedTratamentosIDs() (ids []int) {
	for id := range m.removedtratamentos {
		ids = append(ids, id)
	}
	return
}

// TratamentosIDs returns the "tratamentos" edge IDs in the mutation.
func (m *ProfissionalMutation) TratamentosIDs() (ids []int) {
	for id := range m.tratamentos {
		ids = append(ids, id)
	}
	return
}

// ResetTratamentos resets all changes to the "tratamentos" edge.
func (m *ProfissionalMutation) ResetTratamentos() {
	m.tratamentos = nil
	m.clearedtratamentos = false
	m.removedtratamentos = nil
}

// AddPodcastIDs adds the "podcasts" edge to the Podcast entity by ids.
func (m *ProfissionalMutation) AddPodcastIDs(ids ...int) {
	if m.podcasts == nil {
		m.podcasts = make(map[int]struct{})
	}
	for i := range ids {
		m.podcasts[ids[i]] = struct{}{}
	}
}

// ClearPodcasts clears the "podcasts" edge to the Podcast entity.
func (m *ProfissionalMutation) ClearPodcasts() {
	m.clearedpodcasts = true
}

// PodcastsCleared reports if the "podcasts" edge to the Podcast entity was cleared.
func (m *ProfissionalMutation) PodcastsCleared() bool {
	return m.clearedpodcasts
}

// RemovePodcastIDs removes the "podcasts" edge to the Podcast entity by IDs.
func (m *ProfissionalMutation) RemovePodcastIDs(ids ...int) {
	if m.removedpodcasts == nil {
		m.removedpodcasts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.podcasts, ids[i])
		m.removedpodcasts[ids[i]] = struct{}{}
	}
}

// RemovedPodcasts returns the removed IDs of the "podcasts" edge to the Podcast entity.
func (m *ProfissionalMutation) RemovedPodcastsIDs() (ids []int) {
	for id := range m.removedpodcasts {
		ids = append(ids, id)
	}
	return
}

// PodcastsIDs returns the "podcasts" edge IDs in the mutation.
func (m *ProfissionalMutation) PodcastsIDs() (ids []int) {
	for id := range m.podcasts {
		ids = append(ids, id)
	}
	return
}

// ResetPodcasts resets all changes to the "podcasts" edge.
func (m *ProfissionalMutation) ResetPodcasts() {
	m.podcasts = nil
	m.clearedpodcasts = false
	m.removedpodcasts = nil
}

// AddFotoIDs adds the "fotos" edge to the Foto entity by ids.
func (m *ProfissionalMutation) AddFotoIDs(ids ...int) {
	if m.fotos == nil {
		m.fotos = make(map[int]struct{})
	}
	for i := range ids {
		m.fotos[ids[i]] = struct{}{}
	}
}

// ClearFotos clears the "fotos" edge to the Foto entity.
func (m *ProfissionalMutation) ClearFotos() {
	m.clearedfotos = true
}

// FotosCleared reports if the "fotos" edge to the Foto entity was cleared.
func (m *ProfissionalMutation) FotosCleared() bool {
	return m.clearedfotos
}

// RemoveFotoIDs removes the "fotos" edge to the Foto entity by IDs.
func (m *ProfissionalMutation) RemoveFotoIDs(ids ...int) {
	if m.removedfotos == nil {
		m.removedfotos = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.fotos, ids[i])
		m.removedfotos[ids[i]] = struct{}{}
	}
}

// RemovedFotos returns the removed IDs of the "fotos" edge to the Foto entity.
func (m *ProfissionalMutation) RemovedFotosIDs() (ids []int) {
	for id := range m.removedfotos {
		ids = append(ids, id)
	}
	return
}

// FotosIDs returns the "fotos" edge IDs in the mutation.
func (m *ProfissionalMutation) FotosIDs() (ids []int) {
	for id := range m.fotos {
		ids = append(ids, id)
	}
	return
}

// ResetFotos resets all changes to the "fotos" edge.
func (m *ProfissionalMutation) ResetFotos() {
	m.fotos = nil
	m.clearedfotos = false
	m.removedfotos = nil
}

// AddConvenioIDs adds the "convenios" edge to the Convenio entity by ids.
func (m *ProfissionalMutation) AddConvenioIDs(ids ...int) {
	if m.convenios == nil {
		m.convenios = make(map[int]struct{})
	}
	for i := range ids {
		m.convenios[ids[i]] = struct{}{}
	}
}

// ClearConvenios clears the "convenios" edge to the Convenio entity.
func (m *ProfissionalMutation) ClearConvenios() {
	m.clearedconvenios = true
}

// ConveniosCleared reports if the "convenios" edge to the Convenio entity was cleared.
func (m *ProfissionalMutation) ConveniosCleared() bool {
	return m.clearedconvenios
}

// RemoveConvenioIDs removes the "convenios" edge to the Convenio entity by IDs.
func (m *ProfissionalMutation) RemoveConvenioIDs(ids ...int) {
	if m.removedconvenios == nil {
		m.removedconvenios = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.convenios, ids[i])
		m.removedconvenios[ids[i]] = struct{}{}
	}
}

// RemovedConvenios returns the removed IDs of the "convenios" edge to the Convenio entity.
func (m *ProfissionalMutation) RemovedConveniosIDs() (ids []int) {
	for id := range m.removedconvenios {
		ids = append(ids, id)
	}
	return
}

// ConveniosIDs returns the "convenios" edge IDs in the mutation.
func (m *ProfissionalMutation) ConveniosIDs() (ids []int) {
	for id := range m.convenios {
		ids = append(ids, id)
	}
	return
}

// ResetConvenios resets all changes to the "convenios" edge.
func (m *ProfissionalMutation) ResetConvenios() {
	m.convenios = nil
	m.clearedconvenios = false
	m.removedconvenios = nil
}

// AddEspecializacoIDs adds the "especializacoes" edge to the Especializacao entity by ids.
func (m *ProfissionalMutation) AddEspecializacoIDs(ids ...int) {
	if m.especializacoes == nil {
		m.especializacoes = make(map[int]struct{})
	}
	for i := range ids {
		m.especializacoes[ids[i]] = struct{}{}
	}
}

// ClearEspecializacoes clears the "especializacoes" edge to the Especializacao entity.
func (m *ProfissionalMutation) ClearEspecializacoes() {
	m.clearedespecializacoes = true
}

// EspecializacoesCleared reports if the "especializacoes" edge to the Especializacao entity was cleared.
func (m *ProfissionalMutation) EspecializacoesCleared() bool {
	return m.clearedespecializacoes
}

// RemoveEspecializacoIDs removes the "especializacoes" edge to the Especializacao entity by IDs.
func (m *ProfissionalMutation) RemoveEspecializacoIDs(ids ...int) {
	if m.removedespecializacoes == nil {
		m.removedespecializacoes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.especializacoes, ids[i])
		m.removedespecializacoes[ids[i]] = struct{}{}
	}
}

// RemovedEspecializacoes returns the removed IDs of the "especializacoes" edge to the Especializacao entity.
func (m *ProfissionalMutation) RemovedEspecializacoesIDs() (ids []int) {
	for id := range m.removedespecializacoes {
		ids = append(ids, id)
	}
	return
}

// EspecializacoesIDs returns the "especializacoes" edge IDs in the mutation.
func (m *ProfissionalMutation) EspecializacoesIDs() (ids []int) {
	for id := range m.especializacoes {
		ids = append(ids, id)
	}
	return
}

// ResetEspecializacoes resets all changes to the "especializacoes" edge.
func (m *ProfissionalMutation) ResetEspecializacoes() {
	m.especializacoes = nil
	m.clearedespecializacoes = false
	m.removedespecializacoes = nil
}

// Where appends a list predicates to the ProfissionalMutation builder.
func (m *ProfissionalMutation) Where(ps ...predicate.Profissional) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProfissionalMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Profissional).
func (m *ProfissionalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProfissionalMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.create_time != nil {
		fields = append(fields, profissional.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, profissional.FieldUpdateTime)
	}
	if m.nome != nil {
		fields = append(fields, profissional.FieldNome)
	}
	if m.url_amigavel != nil {
		fields = append(fields, profissional.FieldURLAmigavel)
	}
	if m.recomendado != nil {
		fields = append(fields, profissional.FieldRecomendado)
	}
	if m.ativo != nil {
		fields = append(fields, profissional.FieldAtivo)
	}
	if m.sobre != nil {
		fields = append(fields, profissional.FieldSobre)
	}
	if m.conselho != nil {
		fields = append(fields, profissional.FieldConselho)
	}
	if m.numero_identificacao != nil {
		fields = append(fields, profissional.FieldNumeroIdentificacao)
	}
	if m.telefone != nil {
		fields = append(fields, profissional.FieldTelefone)
	}
	if m.celular != nil {
		fields = append(fields, profissional.FieldCelular)
	}
	if m.email != nil {
		fields = append(fields, profissional.FieldEmail)
	}
	if m.site != nil {
		fields = append(fields, profissional.FieldSite)
	}
	if m.facebook != nil {
		fields = append(fields, profissional.FieldFacebook)
	}
	if m.instagram != nil {
		fields = append(fields, profissional.FieldInstagram)
	}
	if m.youtube != nil {
		fields = append(fields, profissional.FieldYoutube)
	}
	if m.linkedin != nil {
		fields = append(fields, profissional.FieldLinkedin)
	}
	if m.unidade_id != nil {
		fields = append(fields, profissional.FieldUnidadeID)
	}
	if m.endereco_id != nil {
		fields = append(fields, profissional.FieldEnderecoID)
	}
	if m.imagem_perfil_url != nil {
		fields = append(fields, profissional.FieldImagemPerfilURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProfissionalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case profissional.FieldCreateTime:
		return m.CreateTime()
	case profissional.FieldUpdateTime:
		return m.UpdateTime()
	case profissional.FieldNome:
		return m.Nome()
	case profissional.FieldURLAmigavel:
		return m.URLAmigavel()
	case profissional.FieldRecomendado:
		return m.Recomendado()
	case profissional.FieldAtivo:
		return m.Ativo()
	case profissional.FieldSobre:
		return m.Sobre()
	case profissional.FieldConselho:
		return m.Conselho()
	case profissional.FieldNumeroIdentificacao:
		return m.NumeroIdentificacao()
	case profissional.FieldTelefone:
		return m.Telefone()
	case profissional.FieldCelular:
		return m.Celular()
	case profissional.FieldEmail:
		return m.Email()
	case profissional.FieldSite:
		return m.Site()
	case profissional.FieldFacebook:
		return m.Facebook()
	case profissional.FieldInstagram:
		return m.Instagram()
	case profissional.FieldYoutube:
		return m.Youtube()
	case profissional.FieldLinkedin:
		return m.Linkedin()
	case profissional.FieldUnidadeID:
		return m.UnidadeID()
	case profissional.FieldEnderecoID:
		return m.EnderecoID()
	case profissional.FieldImagemPerfilURL:
		return m.ImagemPerfilURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProfissionalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case profissional.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case profissional.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case profissional.FieldNome:
		return m.OldNome(ctx)
	case profissional.FieldURLAmigavel:
		return m.OldURLAmigavel(ctx)
	case profissional.FieldRecomendado:
		return m.OldRecomendado(ctx)
	case profissional.FieldAtivo:
		return m.OldAtivo(ctx)
	case profissional.FieldSobre:
		return m.OldSobre(ctx)
	case profissional.FieldConselho:
		return m.OldConselho(ctx)
	case profissional.FieldNumeroIdentificacao:
		return m.OldNumeroIdentificacao(ctx)
	case profissional.FieldTelefone:
		return m.OldTelefone(ctx)
	case profissional.FieldCelular:
		return m.OldCelular(ctx)
	case profissional.FieldEmail:
		return m.OldEmail(ctx)
	case profissional.FieldSite:
		return m.OldSite(ctx)
	case profissional.FieldFacebook:
		return m.OldFacebook(ctx)
	case profissional.FieldInstagram:
		return m.OldInstagram(ctx)
	case profissional.FieldYoutube:
		return m.OldYoutube(ctx)
	case profissional.FieldLinkedin:
		return m.OldLinkedin(ctx)
	case profissional.FieldUnidadeID:
		return m.OldUnidadeID(ctx)
	case profissional.FieldEnderecoID:
		return m.OldEnderecoID(ctx)
	case profissional.FieldImagemPerfilURL:
		return m.OldImagemPerfilURL(ctx)
	}
	return nil, fmt.Errorf("unknown Profissional field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfissionalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case profissional.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case profissional.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case profissional.FieldNome:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNome(v)
		return nil
	case profissional.FieldURLAmigavel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURLAmigavel(v)
		return nil
	case profissional.FieldRecomendado:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecomendado(v)
		return nil
	case profissional.FieldAtivo:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAtivo(v)
		return nil
	case profissional.FieldSobre:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSobre(v)
		return nil
	case profissional.FieldConselho:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConselho(v)
		return nil
	case profissional.FieldNumeroIdentificacao:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumeroIdentificacao(v)
		return nil
	case profissional.FieldTelefone:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelefone(v)
		return nil
	case profissional.FieldCelular:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCelular(v)
		return nil
	case profissional.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case profissional.FieldSite:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSite(v)
		return nil
	case profissional.FieldFacebook:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFacebook(v)
		return nil
	case profissional.FieldInstagram:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstagram(v)
		return nil
	case profissional.FieldYoutube:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYoutube(v)
		return nil
	case profissional.FieldLinkedin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinkedin(v)
		return nil
	case profissional.FieldUnidadeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnidadeID(v)
		return nil
	case profissional.FieldEnderecoID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnderecoID(v)
		return nil
	case profissional.FieldImagemPerfilURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImagemPerfilURL(v)
		return nil
	}
	return fmt.Errorf("unknown Profissional field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProfissionalMutation) AddedFields() []string {
	var fields []string
	if m.addtelefone != nil {
		fields = append(fields, profissional.FieldTelefone)
	}
	if m.addcelular != nil {
		fields = append(fields, profissional.FieldCelular)
	}
	if m.addunidade_id != nil {
		fields = append(fields, profissional.FieldUnidadeID)
	}
	if m.addendereco_id != nil {
		fields = append(fields, profissional.FieldEnderecoID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProfissionalMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case profissional.FieldTelefone:
		return m.AddedTelefone()
	case profissional.FieldCelular:
		return m.AddedCelular()
	case profissional.FieldUnidadeID:
		return m.AddedUnidadeID()
	case profissional.FieldEnderecoID:
		return m.AddedEnderecoID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfissionalMutation) AddField(name string, value ent.Value) error {
	switch name {
	case profissional.FieldTelefone:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTelefone(v)
		return nil
	case profissional.FieldCelular:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCelular(v)
		return nil
	case profissional.FieldUnidadeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnidadeID(v)
		return nil
	case profissional.FieldEnderecoID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEnderecoID(v)
		return nil
	}
	return fmt.Errorf("unknown Profissional numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProfissionalMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(profissional.FieldSobre) {
		fields = append(fields, profissional.FieldSobre)
	}
	if m.FieldCleared(profissional.FieldConselho) {
		fields = append(fields, profissional.FieldConselho)
	}
	if m.FieldCleared(profissional.FieldNumeroIdentificacao) {
		fields = append(fields, profissional.FieldNumeroIdentificacao)
	}
	if m.FieldCleared(profissional.FieldFacebook) {
		fields = append(fields, profissional.FieldFacebook)
	}
	if m.FieldCleared(profissional.FieldInstagram) {
		fields = append(fields, profissional.FieldInstagram)
	}
	if m.FieldCleared(profissional.FieldYoutube) {
		fields = append(fields, profissional.FieldYoutube)
	}
	if m.FieldCleared(profissional.FieldLinkedin) {
		fields = append(fields, profissional.FieldLinkedin)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProfissionalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProfissionalMutation) ClearField(name string) error {
	switch name {
	case profissional.FieldSobre:
		m.ClearSobre()
		return nil
	case profissional.FieldConselho:
		m.ClearConselho()
		return nil
	case profissional.FieldNumeroIdentificacao:
		m.ClearNumeroIdentificacao()
		return nil
	case profissional.FieldFacebook:
		m.ClearFacebook()
		return nil
	case profissional.FieldInstagram:
		m.ClearInstagram()
		return nil
	case profissional.FieldYoutube:
		m.ClearYoutube()
		return nil
	case profissional.FieldLinkedin:
		m.ClearLinkedin()
		return nil
	}
	return fmt.Errorf("unknown Profissional nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProfissionalMutation) ResetField(name string) error {
	switch name {
	case profissional.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case profissional.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case profissional.FieldNome:
		m.ResetNome()
		return nil
	case profissional.FieldURLAmigavel:
		m.ResetURLAmigavel()
		return nil
	case profissional.FieldRecomendado:
		m.ResetRecomendado()
		return nil
	case profissional.FieldAtivo:
		m.ResetAtivo()
		return nil
	case profissional.FieldSobre:
		m.ResetSobre()
		return nil
	case profissional.FieldConselho:
		m.ResetConselho()
		return nil
	case profissional.FieldNumeroIdentificacao:
		m.ResetNumeroIdentificacao()
		return nil
	case profissional.FieldTelefone:
		m.ResetTelefone()
		return nil
	case profissional.FieldCelular:
		m.ResetCelular()
		return nil
	case profissional.FieldEmail:
		m.ResetEmail()
		return nil
	case profissional.FieldSite:
		m.ResetSite()
		return nil
	case profissional.FieldFacebook:
		m.ResetFacebook()
		return nil
	case profissional.FieldInstagram:
		m.ResetInstagram()
		return nil
	case profissional.FieldYoutube:
		m.ResetYoutube()
		return nil
	case profissional.FieldLinkedin:
		m.ResetLinkedin()
		return nil
	case profissional.FieldUnidadeID:
		m.ResetUnidadeID()
		return nil
	case profissional.FieldEnderecoID:
		m.ResetEnderecoID()
		return nil
	case profissional.FieldImagemPerfilURL:
		m.ResetImagemPerfilURL()
		return nil
	}
	return fmt.Errorf("unknown Profissional field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProfissionalMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.whatsapps != nil {
		edges = append(edges, profissional.EdgeWhatsapps)
	}
	if m.videos != nil {
		edges = append(edges, profissional.EdgeVideos)
	}
	if m.tratamentos != nil {
		edges = append(edges, profissional.EdgeTratamentos)
	}
	if m.podcasts != nil {
		edges = append(edges, profissional.EdgePodcasts)
	}
	if m.fotos != nil {
		edges = append(edges, profissional.EdgeFotos)
	}
	if m.convenios != nil {
		edges = append(edges, profissional.EdgeConvenios)
	}
	if m.especializacoes != nil {
		edges = append(edges, profissional.EdgeEspecializacoes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProfissionalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case profissional.EdgeWhatsapps:
		ids := make([]ent.Value, 0, len(m.whatsapps))
		for id := range m.whatsapps {
			ids = append(ids, id)
		}
		return ids
	case profissional.EdgeVideos:
		ids := make([]ent.Value, 0, len(m.videos))
		for id := range m.videos {
			ids = append(ids, id)
		}
		return ids
	case profissional.EdgeTratamentos:
		ids := make([]ent.Value, 0, len(m.tratamentos))
		for id := range m.tratamentos {
			ids = append(ids, id)
		}
		return ids
	case profissional.EdgePodcasts:
		ids := make([]ent.Value, 0, len(m.podcasts))
		for id := range m.podcasts {
			ids = append(ids, id)
		}
		return ids
	case profissional.EdgeFotos:
		ids := make([]ent.Value, 0, len(m.fotos))
		for id := range m.fotos {
			ids = append(ids, id)
		}
		return ids
	case profissional.EdgeConvenios:
		ids := make([]ent.Value, 0, len(m.convenios))
		for id := range m.convenios {
			ids = append(ids, id)
		}
		return ids
	case profissional.EdgeEspecializacoes:
		ids := make([]ent.Value, 0, len(m.especializacoes))
		for id := range m.especializacoes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProfissionalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedwhatsapps != nil {
		edges = append(edges, profissional.EdgeWhatsapps)
	}
	if m.removedvideos != nil {
		edges = append(edges, profissional.EdgeVideos)
	}
	if m.removedtratamentos != nil {
		edges = append(edges, profissional.EdgeTratamentos)
	}
	if m.removedpodcasts != nil {
		edges = append(edges, profissional.EdgePodcasts)
	}
	if m.removedfotos != nil {
		edges = append(edges, profissional.EdgeFotos)
	}
	if m.removedconvenios != nil {
		edges = append(edges, profissional.EdgeConvenios)
	}
	if m.removedespecializacoes != nil {
		edges = append(edges, profissional.EdgeEspecializacoes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProfissionalMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case profissional.EdgeWhatsapps:
		ids := make([]ent.Value, 0, len(m.removedwhatsapps))
		for id := range m.removedwhatsapps {
			ids = append(ids, id)
		}
		return ids
	case profissional.EdgeVideos:
		ids := make([]ent.Value, 0, len(m.removedvideos))
		for id := range m.removedvideos {
			ids = append(ids, id)
		}
		return ids
	case profissional.EdgeTratamentos:
		ids := make([]ent.Value, 0, len(m.removedtratamentos))
		for id := range m.removedtratamentos {
			ids = append(ids, id)
		}
		return ids
	case profissional.EdgePodcasts:
		ids := make([]ent.Value, 0, len(m.removedpodcasts))
		for id := range m.removedpodcasts {
			ids = append(ids, id)
		}
		return ids
	case profissional.EdgeFotos:
		ids := make([]ent.Value, 0, len(m.removedfotos))
		for id := range m.removedfotos {
			ids = append(ids, id)
		}
		return ids
	case profissional.EdgeConvenios:
		ids := make([]ent.Value, 0, len(m.removedconvenios))
		for id := range m.removedconvenios {
			ids = append(ids, id)
		}
		return ids
	case profissional.EdgeEspecializacoes:
		ids := make([]ent.Value, 0, len(m.removedespecializacoes))
		for id := range m.removedespecializacoes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProfissionalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.clearedwhatsapps {
		edges = append(edges, profissional.EdgeWhatsapps)
	}
	if m.clearedvideos {
		edges = append(edges, profissional.EdgeVideos)
	}
	if m.clearedtratamentos {
		edges = append(edges, profissional.EdgeTratamentos)
	}
	if m.clearedpodcasts {
		edges = append(edges, profissional.EdgePodcasts)
	}
	if m.clearedfotos {
		edges = append(edges, profissional.EdgeFotos)
	}
	if m.clearedconvenios {
		edges = append(edges, profissional.EdgeConvenios)
	}
	if m.clearedespecializacoes {
		edges = append(edges, profissional.EdgeEspecializacoes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProfissionalMutation) EdgeCleared(name string) bool {
	switch name {
	case profissional.EdgeWhatsapps:
		return m.clearedwhatsapps
	case profissional.EdgeVideos:
		return m.clearedvideos
	case profissional.EdgeTratamentos:
		return m.clearedtratamentos
	case profissional.EdgePodcasts:
		return m.clearedpodcasts
	case profissional.EdgeFotos:
		return m.clearedfotos
	case profissional.EdgeConvenios:
		return m.clearedconvenios
	case profissional.EdgeEspecializacoes:
		return m.clearedespecializacoes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProfissionalMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Profissional unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProfissionalMutation) ResetEdge(name string) error {
	switch name {
	case profissional.EdgeWhatsapps:
		m.ResetWhatsapps()
		return nil
	case profissional.EdgeVideos:
		m.ResetVideos()
		return nil
	case profissional.EdgeTratamentos:
		m.ResetTratamentos()
		return nil
	case profissional.EdgePodcasts:
		m.ResetPodcasts()
		return nil
	case profissional.EdgeFotos:
		m.ResetFotos()
		return nil
	case profissional.EdgeConvenios:
		m.ResetConvenios()
		return nil
	case profissional.EdgeEspecializacoes:
		m.ResetEspecializacoes()
		return nil
	}
	return fmt.Errorf("unknown Profissional edge %s", name)
}

// TratamentoMutation represents an operation that mutates the Tratamento nodes in the graph.
type TratamentoMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	descricao           *string
	clearedFields       map[string]struct{}
	profissional        *int
	clearedprofissional bool
	done                bool
	oldValue            func(context.Context) (*Tratamento, error)
	predicates          []predicate.Tratamento
}

var _ ent.Mutation = (*TratamentoMutation)(nil)

// tratamentoOption allows management of the mutation configuration using functional options.
type tratamentoOption func(*TratamentoMutation)

// newTratamentoMutation creates new mutation for the Tratamento entity.
func newTratamentoMutation(c config, op Op, opts ...tratamentoOption) *TratamentoMutation {
	m := &TratamentoMutation{
		config:        c,
		op:            op,
		typ:           TypeTratamento,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTratamentoID sets the ID field of the mutation.
func withTratamentoID(id int) tratamentoOption {
	return func(m *TratamentoMutation) {
		var (
			err   error
			once  sync.Once
			value *Tratamento
		)
		m.oldValue = func(ctx context.Context) (*Tratamento, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tratamento.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTratamento sets the old Tratamento of the mutation.
func withTratamento(node *Tratamento) tratamentoOption {
	return func(m *TratamentoMutation) {
		m.oldValue = func(context.Context) (*Tratamento, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TratamentoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TratamentoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TratamentoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDescricao sets the "descricao" field.
func (m *TratamentoMutation) SetDescricao(s string) {
	m.descricao = &s
}

// Descricao returns the value of the "descricao" field in the mutation.
func (m *TratamentoMutation) Descricao() (r string, exists bool) {
	v := m.descricao
	if v == nil {
		return
	}
	return *v, true
}

// OldDescricao returns the old "descricao" field's value of the Tratamento entity.
// If the Tratamento object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TratamentoMutation) OldDescricao(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescricao is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescricao requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescricao: %w", err)
	}
	return oldValue.Descricao, nil
}

// ResetDescricao resets all changes to the "descricao" field.
func (m *TratamentoMutation) ResetDescricao() {
	m.descricao = nil
}

// SetProfissionalID sets the "profissional" edge to the Profissional entity by id.
func (m *TratamentoMutation) SetProfissionalID(id int) {
	m.profissional = &id
}

// ClearProfissional clears the "profissional" edge to the Profissional entity.
func (m *TratamentoMutation) ClearProfissional() {
	m.clearedprofissional = true
}

// ProfissionalCleared reports if the "profissional" edge to the Profissional entity was cleared.
func (m *TratamentoMutation) ProfissionalCleared() bool {
	return m.clearedprofissional
}

// ProfissionalID returns the "profissional" edge ID in the mutation.
func (m *TratamentoMutation) ProfissionalID() (id int, exists bool) {
	if m.profissional != nil {
		return *m.profissional, true
	}
	return
}

// ProfissionalIDs returns the "profissional" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProfissionalID instead. It exists only for internal usage by the builders.
func (m *TratamentoMutation) ProfissionalIDs() (ids []int) {
	if id := m.profissional; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfissional resets all changes to the "profissional" edge.
func (m *TratamentoMutation) ResetProfissional() {
	m.profissional = nil
	m.clearedprofissional = false
}

// Where appends a list predicates to the TratamentoMutation builder.
func (m *TratamentoMutation) Where(ps ...predicate.Tratamento) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TratamentoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Tratamento).
func (m *TratamentoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TratamentoMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.descricao != nil {
		fields = append(fields, tratamento.FieldDescricao)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TratamentoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tratamento.FieldDescricao:
		return m.Descricao()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TratamentoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tratamento.FieldDescricao:
		return m.OldDescricao(ctx)
	}
	return nil, fmt.Errorf("unknown Tratamento field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TratamentoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tratamento.FieldDescricao:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescricao(v)
		return nil
	}
	return fmt.Errorf("unknown Tratamento field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TratamentoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TratamentoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TratamentoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tratamento numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TratamentoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TratamentoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TratamentoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tratamento nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TratamentoMutation) ResetField(name string) error {
	switch name {
	case tratamento.FieldDescricao:
		m.ResetDescricao()
		return nil
	}
	return fmt.Errorf("unknown Tratamento field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TratamentoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.profissional != nil {
		edges = append(edges, tratamento.EdgeProfissional)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TratamentoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tratamento.EdgeProfissional:
		if id := m.profissional; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TratamentoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TratamentoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TratamentoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprofissional {
		edges = append(edges, tratamento.EdgeProfissional)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TratamentoMutation) EdgeCleared(name string) bool {
	switch name {
	case tratamento.EdgeProfissional:
		return m.clearedprofissional
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TratamentoMutation) ClearEdge(name string) error {
	switch name {
	case tratamento.EdgeProfissional:
		m.ClearProfissional()
		return nil
	}
	return fmt.Errorf("unknown Tratamento unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TratamentoMutation) ResetEdge(name string) error {
	switch name {
	case tratamento.EdgeProfissional:
		m.ResetProfissional()
		return nil
	}
	return fmt.Errorf("unknown Tratamento edge %s", name)
}

// VideoMutation represents an operation that mutates the Video nodes in the graph.
type VideoMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	titulo              *string
	url                 *string
	url_thumbnail       *string
	clearedFields       map[string]struct{}
	profissional        *int
	clearedprofissional bool
	done                bool
	oldValue            func(context.Context) (*Video, error)
	predicates          []predicate.Video
}

var _ ent.Mutation = (*VideoMutation)(nil)

// videoOption allows management of the mutation configuration using functional options.
type videoOption func(*VideoMutation)

// newVideoMutation creates new mutation for the Video entity.
func newVideoMutation(c config, op Op, opts ...videoOption) *VideoMutation {
	m := &VideoMutation{
		config:        c,
		op:            op,
		typ:           TypeVideo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVideoID sets the ID field of the mutation.
func withVideoID(id int) videoOption {
	return func(m *VideoMutation) {
		var (
			err   error
			once  sync.Once
			value *Video
		)
		m.oldValue = func(ctx context.Context) (*Video, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Video.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVideo sets the old Video of the mutation.
func withVideo(node *Video) videoOption {
	return func(m *VideoMutation) {
		m.oldValue = func(context.Context) (*Video, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VideoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VideoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VideoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitulo sets the "titulo" field.
func (m *VideoMutation) SetTitulo(s string) {
	m.titulo = &s
}

// Titulo returns the value of the "titulo" field in the mutation.
func (m *VideoMutation) Titulo() (r string, exists bool) {
	v := m.titulo
	if v == nil {
		return
	}
	return *v, true
}

// OldTitulo returns the old "titulo" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldTitulo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitulo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitulo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitulo: %w", err)
	}
	return oldValue.Titulo, nil
}

// ResetTitulo resets all changes to the "titulo" field.
func (m *VideoMutation) ResetTitulo() {
	m.titulo = nil
}

// SetURL sets the "url" field.
func (m *VideoMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *VideoMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *VideoMutation) ResetURL() {
	m.url = nil
}

// SetURLThumbnail sets the "url_thumbnail" field.
func (m *VideoMutation) SetURLThumbnail(s string) {
	m.url_thumbnail = &s
}

// URLThumbnail returns the value of the "url_thumbnail" field in the mutation.
func (m *VideoMutation) URLThumbnail() (r string, exists bool) {
	v := m.url_thumbnail
	if v == nil {
		return
	}
	return *v, true
}

// OldURLThumbnail returns the old "url_thumbnail" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldURLThumbnail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldURLThumbnail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldURLThumbnail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURLThumbnail: %w", err)
	}
	return oldValue.URLThumbnail, nil
}

// ResetURLThumbnail resets all changes to the "url_thumbnail" field.
func (m *VideoMutation) ResetURLThumbnail() {
	m.url_thumbnail = nil
}

// SetProfissionalID sets the "profissional" edge to the Profissional entity by id.
func (m *VideoMutation) SetProfissionalID(id int) {
	m.profissional = &id
}

// ClearProfissional clears the "profissional" edge to the Profissional entity.
func (m *VideoMutation) ClearProfissional() {
	m.clearedprofissional = true
}

// ProfissionalCleared reports if the "profissional" edge to the Profissional entity was cleared.
func (m *VideoMutation) ProfissionalCleared() bool {
	return m.clearedprofissional
}

// ProfissionalID returns the "profissional" edge ID in the mutation.
func (m *VideoMutation) ProfissionalID() (id int, exists bool) {
	if m.profissional != nil {
		return *m.profissional, true
	}
	return
}

// ProfissionalIDs returns the "profissional" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProfissionalID instead. It exists only for internal usage by the builders.
func (m *VideoMutation) ProfissionalIDs() (ids []int) {
	if id := m.profissional; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfissional resets all changes to the "profissional" edge.
func (m *VideoMutation) ResetProfissional() {
	m.profissional = nil
	m.clearedprofissional = false
}

// Where appends a list predicates to the VideoMutation builder.
func (m *VideoMutation) Where(ps ...predicate.Video) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VideoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Video).
func (m *VideoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VideoMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.titulo != nil {
		fields = append(fields, video.FieldTitulo)
	}
	if m.url != nil {
		fields = append(fields, video.FieldURL)
	}
	if m.url_thumbnail != nil {
		fields = append(fields, video.FieldURLThumbnail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VideoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case video.FieldTitulo:
		return m.Titulo()
	case video.FieldURL:
		return m.URL()
	case video.FieldURLThumbnail:
		return m.URLThumbnail()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VideoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case video.FieldTitulo:
		return m.OldTitulo(ctx)
	case video.FieldURL:
		return m.OldURL(ctx)
	case video.FieldURLThumbnail:
		return m.OldURLThumbnail(ctx)
	}
	return nil, fmt.Errorf("unknown Video field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case video.FieldTitulo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitulo(v)
		return nil
	case video.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case video.FieldURLThumbnail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURLThumbnail(v)
		return nil
	}
	return fmt.Errorf("unknown Video field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VideoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VideoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Video numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VideoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VideoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VideoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Video nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VideoMutation) ResetField(name string) error {
	switch name {
	case video.FieldTitulo:
		m.ResetTitulo()
		return nil
	case video.FieldURL:
		m.ResetURL()
		return nil
	case video.FieldURLThumbnail:
		m.ResetURLThumbnail()
		return nil
	}
	return fmt.Errorf("unknown Video field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VideoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.profissional != nil {
		edges = append(edges, video.EdgeProfissional)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VideoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case video.EdgeProfissional:
		if id := m.profissional; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VideoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VideoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VideoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprofissional {
		edges = append(edges, video.EdgeProfissional)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VideoMutation) EdgeCleared(name string) bool {
	switch name {
	case video.EdgeProfissional:
		return m.clearedprofissional
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VideoMutation) ClearEdge(name string) error {
	switch name {
	case video.EdgeProfissional:
		m.ClearProfissional()
		return nil
	}
	return fmt.Errorf("unknown Video unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VideoMutation) ResetEdge(name string) error {
	switch name {
	case video.EdgeProfissional:
		m.ResetProfissional()
		return nil
	}
	return fmt.Errorf("unknown Video edge %s", name)
}

// WhatsAppMutation represents an operation that mutates the WhatsApp nodes in the graph.
type WhatsAppMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	numero              *int64
	addnumero           *int64
	principal           *bool
	clearedFields       map[string]struct{}
	profissional        *int
	clearedprofissional bool
	done                bool
	oldValue            func(context.Context) (*WhatsApp, error)
	predicates          []predicate.WhatsApp
}

var _ ent.Mutation = (*WhatsAppMutation)(nil)

// whatsappOption allows management of the mutation configuration using functional options.
type whatsappOption func(*WhatsAppMutation)

// newWhatsAppMutation creates new mutation for the WhatsApp entity.
func newWhatsAppMutation(c config, op Op, opts ...whatsappOption) *WhatsAppMutation {
	m := &WhatsAppMutation{
		config:        c,
		op:            op,
		typ:           TypeWhatsApp,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWhatsAppID sets the ID field of the mutation.
func withWhatsAppID(id int) whatsappOption {
	return func(m *WhatsAppMutation) {
		var (
			err   error
			once  sync.Once
			value *WhatsApp
		)
		m.oldValue = func(ctx context.Context) (*WhatsApp, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WhatsApp.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWhatsApp sets the old WhatsApp of the mutation.
func withWhatsApp(node *WhatsApp) whatsappOption {
	return func(m *WhatsAppMutation) {
		m.oldValue = func(context.Context) (*WhatsApp, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WhatsAppMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WhatsAppMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WhatsAppMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNumero sets the "numero" field.
func (m *WhatsAppMutation) SetNumero(i int64) {
	m.numero = &i
	m.addnumero = nil
}

// Numero returns the value of the "numero" field in the mutation.
func (m *WhatsAppMutation) Numero() (r int64, exists bool) {
	v := m.numero
	if v == nil {
		return
	}
	return *v, true
}

// OldNumero returns the old "numero" field's value of the WhatsApp entity.
// If the WhatsApp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WhatsAppMutation) OldNumero(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNumero is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNumero requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumero: %w", err)
	}
	return oldValue.Numero, nil
}

// AddNumero adds i to the "numero" field.
func (m *WhatsAppMutation) AddNumero(i int64) {
	if m.addnumero != nil {
		*m.addnumero += i
	} else {
		m.addnumero = &i
	}
}

// AddedNumero returns the value that was added to the "numero" field in this mutation.
func (m *WhatsAppMutation) AddedNumero() (r int64, exists bool) {
	v := m.addnumero
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumero resets all changes to the "numero" field.
func (m *WhatsAppMutation) ResetNumero() {
	m.numero = nil
	m.addnumero = nil
}

// SetPrincipal sets the "principal" field.
func (m *WhatsAppMutation) SetPrincipal(b bool) {
	m.principal = &b
}

// Principal returns the value of the "principal" field in the mutation.
func (m *WhatsAppMutation) Principal() (r bool, exists bool) {
	v := m.principal
	if v == nil {
		return
	}
	return *v, true
}

// OldPrincipal returns the old "principal" field's value of the WhatsApp entity.
// If the WhatsApp object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WhatsAppMutation) OldPrincipal(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrincipal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrincipal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrincipal: %w", err)
	}
	return oldValue.Principal, nil
}

// ResetPrincipal resets all changes to the "principal" field.
func (m *WhatsAppMutation) ResetPrincipal() {
	m.principal = nil
}

// SetProfissionalID sets the "profissional" edge to the Profissional entity by id.
func (m *WhatsAppMutation) SetProfissionalID(id int) {
	m.profissional = &id
}

// ClearProfissional clears the "profissional" edge to the Profissional entity.
func (m *WhatsAppMutation) ClearProfissional() {
	m.clearedprofissional = true
}

// ProfissionalCleared reports if the "profissional" edge to the Profissional entity was cleared.
func (m *WhatsAppMutation) ProfissionalCleared() bool {
	return m.clearedprofissional
}

// ProfissionalID returns the "profissional" edge ID in the mutation.
func (m *WhatsAppMutation) ProfissionalID() (id int, exists bool) {
	if m.profissional != nil {
		return *m.profissional, true
	}
	return
}

// ProfissionalIDs returns the "profissional" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProfissionalID instead. It exists only for internal usage by the builders.
func (m *WhatsAppMutation) ProfissionalIDs() (ids []int) {
	if id := m.profissional; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfissional resets all changes to the "profissional" edge.
func (m *WhatsAppMutation) ResetProfissional() {
	m.profissional = nil
	m.clearedprofissional = false
}

// Where appends a list predicates to the WhatsAppMutation builder.
func (m *WhatsAppMutation) Where(ps ...predicate.WhatsApp) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *WhatsAppMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (WhatsApp).
func (m *WhatsAppMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WhatsAppMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.numero != nil {
		fields = append(fields, whatsapp.FieldNumero)
	}
	if m.principal != nil {
		fields = append(fields, whatsapp.FieldPrincipal)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WhatsAppMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case whatsapp.FieldNumero:
		return m.Numero()
	case whatsapp.FieldPrincipal:
		return m.Principal()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WhatsAppMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case whatsapp.FieldNumero:
		return m.OldNumero(ctx)
	case whatsapp.FieldPrincipal:
		return m.OldPrincipal(ctx)
	}
	return nil, fmt.Errorf("unknown WhatsApp field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WhatsAppMutation) SetField(name string, value ent.Value) error {
	switch name {
	case whatsapp.FieldNumero:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumero(v)
		return nil
	case whatsapp.FieldPrincipal:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrincipal(v)
		return nil
	}
	return fmt.Errorf("unknown WhatsApp field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WhatsAppMutation) AddedFields() []string {
	var fields []string
	if m.addnumero != nil {
		fields = append(fields, whatsapp.FieldNumero)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WhatsAppMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case whatsapp.FieldNumero:
		return m.AddedNumero()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WhatsAppMutation) AddField(name string, value ent.Value) error {
	switch name {
	case whatsapp.FieldNumero:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumero(v)
		return nil
	}
	return fmt.Errorf("unknown WhatsApp numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WhatsAppMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WhatsAppMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WhatsAppMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WhatsApp nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WhatsAppMutation) ResetField(name string) error {
	switch name {
	case whatsapp.FieldNumero:
		m.ResetNumero()
		return nil
	case whatsapp.FieldPrincipal:
		m.ResetPrincipal()
		return nil
	}
	return fmt.Errorf("unknown WhatsApp field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WhatsAppMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.profissional != nil {
		edges = append(edges, whatsapp.EdgeProfissional)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WhatsAppMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case whatsapp.EdgeProfissional:
		if id := m.profissional; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WhatsAppMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WhatsAppMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WhatsAppMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprofissional {
		edges = append(edges, whatsapp.EdgeProfissional)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WhatsAppMutation) EdgeCleared(name string) bool {
	switch name {
	case whatsapp.EdgeProfissional:
		return m.clearedprofissional
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WhatsAppMutation) ClearEdge(name string) error {
	switch name {
	case whatsapp.EdgeProfissional:
		m.ClearProfissional()
		return nil
	}
	return fmt.Errorf("unknown WhatsApp unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WhatsAppMutation) ResetEdge(name string) error {
	switch name {
	case whatsapp.EdgeProfissional:
		m.ResetProfissional()
		return nil
	}
	return fmt.Errorf("unknown WhatsApp edge %s", name)
}
