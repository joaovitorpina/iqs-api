// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"profissional/ent/foto"
	"profissional/ent/profissional"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Foto is the model entity for the Foto schema.
type Foto struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Titulo holds the value of the "titulo" field.
	Titulo string `json:"titulo,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FotoQuery when eager-loading is set.
	Edges              FotoEdges `json:"edges"`
	profissional_fotos *int
}

// FotoEdges holds the relations/edges for other nodes in the graph.
type FotoEdges struct {
	// Profissional holds the value of the profissional edge.
	Profissional *Profissional `json:"profissional,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProfissionalOrErr returns the Profissional value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FotoEdges) ProfissionalOrErr() (*Profissional, error) {
	if e.loadedTypes[0] {
		if e.Profissional == nil {
			// The edge profissional was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: profissional.Label}
		}
		return e.Profissional, nil
	}
	return nil, &NotLoadedError{edge: "profissional"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Foto) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case foto.FieldID:
			values[i] = new(sql.NullInt64)
		case foto.FieldTitulo, foto.FieldURL:
			values[i] = new(sql.NullString)
		case foto.ForeignKeys[0]: // profissional_fotos
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Foto", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Foto fields.
func (f *Foto) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case foto.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case foto.FieldTitulo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field titulo", values[i])
			} else if value.Valid {
				f.Titulo = value.String
			}
		case foto.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				f.URL = value.String
			}
		case foto.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field profissional_fotos", value)
			} else if value.Valid {
				f.profissional_fotos = new(int)
				*f.profissional_fotos = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProfissional queries the "profissional" edge of the Foto entity.
func (f *Foto) QueryProfissional() *ProfissionalQuery {
	return (&FotoClient{config: f.config}).QueryProfissional(f)
}

// Update returns a builder for updating this Foto.
// Note that you need to call Foto.Unwrap() before calling this method if this Foto
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Foto) Update() *FotoUpdateOne {
	return (&FotoClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Foto entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Foto) Unwrap() *Foto {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Foto is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Foto) String() string {
	var builder strings.Builder
	builder.WriteString("Foto(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", titulo=")
	builder.WriteString(f.Titulo)
	builder.WriteString(", url=")
	builder.WriteString(f.URL)
	builder.WriteByte(')')
	return builder.String()
}

// Fotos is a parsable slice of Foto.
type Fotos []*Foto

func (f Fotos) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
