// Code generated by entc, DO NOT EDIT.

package profissional

import (
	"profissional/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Nome applies equality check predicate on the "nome" field. It's identical to NomeEQ.
func Nome(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNome), v))
	})
}

// URLAmigavel applies equality check predicate on the "url_amigavel" field. It's identical to URLAmigavelEQ.
func URLAmigavel(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURLAmigavel), v))
	})
}

// Recomendado applies equality check predicate on the "recomendado" field. It's identical to RecomendadoEQ.
func Recomendado(v bool) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecomendado), v))
	})
}

// Ativo applies equality check predicate on the "ativo" field. It's identical to AtivoEQ.
func Ativo(v bool) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAtivo), v))
	})
}

// Sobre applies equality check predicate on the "sobre" field. It's identical to SobreEQ.
func Sobre(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSobre), v))
	})
}

// Conselho applies equality check predicate on the "conselho" field. It's identical to ConselhoEQ.
func Conselho(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConselho), v))
	})
}

// NumeroIdentificacao applies equality check predicate on the "numero_identificacao" field. It's identical to NumeroIdentificacaoEQ.
func NumeroIdentificacao(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumeroIdentificacao), v))
	})
}

// Telefone applies equality check predicate on the "telefone" field. It's identical to TelefoneEQ.
func Telefone(v int64) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTelefone), v))
	})
}

// Celular applies equality check predicate on the "celular" field. It's identical to CelularEQ.
func Celular(v int64) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCelular), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// Site applies equality check predicate on the "site" field. It's identical to SiteEQ.
func Site(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSite), v))
	})
}

// Facebook applies equality check predicate on the "facebook" field. It's identical to FacebookEQ.
func Facebook(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacebook), v))
	})
}

// Instagram applies equality check predicate on the "instagram" field. It's identical to InstagramEQ.
func Instagram(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstagram), v))
	})
}

// Youtube applies equality check predicate on the "youtube" field. It's identical to YoutubeEQ.
func Youtube(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYoutube), v))
	})
}

// Linkedin applies equality check predicate on the "linkedin" field. It's identical to LinkedinEQ.
func Linkedin(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLinkedin), v))
	})
}

// UnidadeID applies equality check predicate on the "unidade_id" field. It's identical to UnidadeIDEQ.
func UnidadeID(v int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnidadeID), v))
	})
}

// EnderecoID applies equality check predicate on the "endereco_id" field. It's identical to EnderecoIDEQ.
func EnderecoID(v int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnderecoID), v))
	})
}

// ImagemPerfilURL applies equality check predicate on the "imagem_perfil_url" field. It's identical to ImagemPerfilURLEQ.
func ImagemPerfilURL(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImagemPerfilURL), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// NomeEQ applies the EQ predicate on the "nome" field.
func NomeEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNome), v))
	})
}

// NomeNEQ applies the NEQ predicate on the "nome" field.
func NomeNEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNome), v))
	})
}

// NomeIn applies the In predicate on the "nome" field.
func NomeIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNome), v...))
	})
}

// NomeNotIn applies the NotIn predicate on the "nome" field.
func NomeNotIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNome), v...))
	})
}

// NomeGT applies the GT predicate on the "nome" field.
func NomeGT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNome), v))
	})
}

// NomeGTE applies the GTE predicate on the "nome" field.
func NomeGTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNome), v))
	})
}

// NomeLT applies the LT predicate on the "nome" field.
func NomeLT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNome), v))
	})
}

// NomeLTE applies the LTE predicate on the "nome" field.
func NomeLTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNome), v))
	})
}

// NomeContains applies the Contains predicate on the "nome" field.
func NomeContains(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNome), v))
	})
}

// NomeHasPrefix applies the HasPrefix predicate on the "nome" field.
func NomeHasPrefix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNome), v))
	})
}

// NomeHasSuffix applies the HasSuffix predicate on the "nome" field.
func NomeHasSuffix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNome), v))
	})
}

// NomeEqualFold applies the EqualFold predicate on the "nome" field.
func NomeEqualFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNome), v))
	})
}

// NomeContainsFold applies the ContainsFold predicate on the "nome" field.
func NomeContainsFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNome), v))
	})
}

// URLAmigavelEQ applies the EQ predicate on the "url_amigavel" field.
func URLAmigavelEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelNEQ applies the NEQ predicate on the "url_amigavel" field.
func URLAmigavelNEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelIn applies the In predicate on the "url_amigavel" field.
func URLAmigavelIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldURLAmigavel), v...))
	})
}

// URLAmigavelNotIn applies the NotIn predicate on the "url_amigavel" field.
func URLAmigavelNotIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldURLAmigavel), v...))
	})
}

// URLAmigavelGT applies the GT predicate on the "url_amigavel" field.
func URLAmigavelGT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelGTE applies the GTE predicate on the "url_amigavel" field.
func URLAmigavelGTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelLT applies the LT predicate on the "url_amigavel" field.
func URLAmigavelLT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelLTE applies the LTE predicate on the "url_amigavel" field.
func URLAmigavelLTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelContains applies the Contains predicate on the "url_amigavel" field.
func URLAmigavelContains(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelHasPrefix applies the HasPrefix predicate on the "url_amigavel" field.
func URLAmigavelHasPrefix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelHasSuffix applies the HasSuffix predicate on the "url_amigavel" field.
func URLAmigavelHasSuffix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelEqualFold applies the EqualFold predicate on the "url_amigavel" field.
func URLAmigavelEqualFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURLAmigavel), v))
	})
}

// URLAmigavelContainsFold applies the ContainsFold predicate on the "url_amigavel" field.
func URLAmigavelContainsFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURLAmigavel), v))
	})
}

// RecomendadoEQ applies the EQ predicate on the "recomendado" field.
func RecomendadoEQ(v bool) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecomendado), v))
	})
}

// RecomendadoNEQ applies the NEQ predicate on the "recomendado" field.
func RecomendadoNEQ(v bool) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecomendado), v))
	})
}

// AtivoEQ applies the EQ predicate on the "ativo" field.
func AtivoEQ(v bool) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAtivo), v))
	})
}

// AtivoNEQ applies the NEQ predicate on the "ativo" field.
func AtivoNEQ(v bool) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAtivo), v))
	})
}

// SobreEQ applies the EQ predicate on the "sobre" field.
func SobreEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSobre), v))
	})
}

// SobreNEQ applies the NEQ predicate on the "sobre" field.
func SobreNEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSobre), v))
	})
}

// SobreIn applies the In predicate on the "sobre" field.
func SobreIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSobre), v...))
	})
}

// SobreNotIn applies the NotIn predicate on the "sobre" field.
func SobreNotIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSobre), v...))
	})
}

// SobreGT applies the GT predicate on the "sobre" field.
func SobreGT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSobre), v))
	})
}

// SobreGTE applies the GTE predicate on the "sobre" field.
func SobreGTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSobre), v))
	})
}

// SobreLT applies the LT predicate on the "sobre" field.
func SobreLT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSobre), v))
	})
}

// SobreLTE applies the LTE predicate on the "sobre" field.
func SobreLTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSobre), v))
	})
}

// SobreContains applies the Contains predicate on the "sobre" field.
func SobreContains(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSobre), v))
	})
}

// SobreHasPrefix applies the HasPrefix predicate on the "sobre" field.
func SobreHasPrefix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSobre), v))
	})
}

// SobreHasSuffix applies the HasSuffix predicate on the "sobre" field.
func SobreHasSuffix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSobre), v))
	})
}

// SobreIsNil applies the IsNil predicate on the "sobre" field.
func SobreIsNil() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSobre)))
	})
}

// SobreNotNil applies the NotNil predicate on the "sobre" field.
func SobreNotNil() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSobre)))
	})
}

// SobreEqualFold applies the EqualFold predicate on the "sobre" field.
func SobreEqualFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSobre), v))
	})
}

// SobreContainsFold applies the ContainsFold predicate on the "sobre" field.
func SobreContainsFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSobre), v))
	})
}

// ConselhoEQ applies the EQ predicate on the "conselho" field.
func ConselhoEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConselho), v))
	})
}

// ConselhoNEQ applies the NEQ predicate on the "conselho" field.
func ConselhoNEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConselho), v))
	})
}

// ConselhoIn applies the In predicate on the "conselho" field.
func ConselhoIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConselho), v...))
	})
}

// ConselhoNotIn applies the NotIn predicate on the "conselho" field.
func ConselhoNotIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConselho), v...))
	})
}

// ConselhoGT applies the GT predicate on the "conselho" field.
func ConselhoGT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConselho), v))
	})
}

// ConselhoGTE applies the GTE predicate on the "conselho" field.
func ConselhoGTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConselho), v))
	})
}

// ConselhoLT applies the LT predicate on the "conselho" field.
func ConselhoLT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConselho), v))
	})
}

// ConselhoLTE applies the LTE predicate on the "conselho" field.
func ConselhoLTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConselho), v))
	})
}

// ConselhoContains applies the Contains predicate on the "conselho" field.
func ConselhoContains(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConselho), v))
	})
}

// ConselhoHasPrefix applies the HasPrefix predicate on the "conselho" field.
func ConselhoHasPrefix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConselho), v))
	})
}

// ConselhoHasSuffix applies the HasSuffix predicate on the "conselho" field.
func ConselhoHasSuffix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConselho), v))
	})
}

// ConselhoIsNil applies the IsNil predicate on the "conselho" field.
func ConselhoIsNil() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConselho)))
	})
}

// ConselhoNotNil applies the NotNil predicate on the "conselho" field.
func ConselhoNotNil() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConselho)))
	})
}

// ConselhoEqualFold applies the EqualFold predicate on the "conselho" field.
func ConselhoEqualFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConselho), v))
	})
}

// ConselhoContainsFold applies the ContainsFold predicate on the "conselho" field.
func ConselhoContainsFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConselho), v))
	})
}

// NumeroIdentificacaoEQ applies the EQ predicate on the "numero_identificacao" field.
func NumeroIdentificacaoEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumeroIdentificacao), v))
	})
}

// NumeroIdentificacaoNEQ applies the NEQ predicate on the "numero_identificacao" field.
func NumeroIdentificacaoNEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumeroIdentificacao), v))
	})
}

// NumeroIdentificacaoIn applies the In predicate on the "numero_identificacao" field.
func NumeroIdentificacaoIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumeroIdentificacao), v...))
	})
}

// NumeroIdentificacaoNotIn applies the NotIn predicate on the "numero_identificacao" field.
func NumeroIdentificacaoNotIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumeroIdentificacao), v...))
	})
}

// NumeroIdentificacaoGT applies the GT predicate on the "numero_identificacao" field.
func NumeroIdentificacaoGT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumeroIdentificacao), v))
	})
}

// NumeroIdentificacaoGTE applies the GTE predicate on the "numero_identificacao" field.
func NumeroIdentificacaoGTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumeroIdentificacao), v))
	})
}

// NumeroIdentificacaoLT applies the LT predicate on the "numero_identificacao" field.
func NumeroIdentificacaoLT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumeroIdentificacao), v))
	})
}

// NumeroIdentificacaoLTE applies the LTE predicate on the "numero_identificacao" field.
func NumeroIdentificacaoLTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumeroIdentificacao), v))
	})
}

// NumeroIdentificacaoContains applies the Contains predicate on the "numero_identificacao" field.
func NumeroIdentificacaoContains(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNumeroIdentificacao), v))
	})
}

// NumeroIdentificacaoHasPrefix applies the HasPrefix predicate on the "numero_identificacao" field.
func NumeroIdentificacaoHasPrefix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNumeroIdentificacao), v))
	})
}

// NumeroIdentificacaoHasSuffix applies the HasSuffix predicate on the "numero_identificacao" field.
func NumeroIdentificacaoHasSuffix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNumeroIdentificacao), v))
	})
}

// NumeroIdentificacaoIsNil applies the IsNil predicate on the "numero_identificacao" field.
func NumeroIdentificacaoIsNil() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNumeroIdentificacao)))
	})
}

// NumeroIdentificacaoNotNil applies the NotNil predicate on the "numero_identificacao" field.
func NumeroIdentificacaoNotNil() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNumeroIdentificacao)))
	})
}

// NumeroIdentificacaoEqualFold applies the EqualFold predicate on the "numero_identificacao" field.
func NumeroIdentificacaoEqualFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNumeroIdentificacao), v))
	})
}

// NumeroIdentificacaoContainsFold applies the ContainsFold predicate on the "numero_identificacao" field.
func NumeroIdentificacaoContainsFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNumeroIdentificacao), v))
	})
}

// TelefoneEQ applies the EQ predicate on the "telefone" field.
func TelefoneEQ(v int64) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTelefone), v))
	})
}

// TelefoneNEQ applies the NEQ predicate on the "telefone" field.
func TelefoneNEQ(v int64) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTelefone), v))
	})
}

// TelefoneIn applies the In predicate on the "telefone" field.
func TelefoneIn(vs ...int64) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTelefone), v...))
	})
}

// TelefoneNotIn applies the NotIn predicate on the "telefone" field.
func TelefoneNotIn(vs ...int64) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTelefone), v...))
	})
}

// TelefoneGT applies the GT predicate on the "telefone" field.
func TelefoneGT(v int64) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTelefone), v))
	})
}

// TelefoneGTE applies the GTE predicate on the "telefone" field.
func TelefoneGTE(v int64) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTelefone), v))
	})
}

// TelefoneLT applies the LT predicate on the "telefone" field.
func TelefoneLT(v int64) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTelefone), v))
	})
}

// TelefoneLTE applies the LTE predicate on the "telefone" field.
func TelefoneLTE(v int64) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTelefone), v))
	})
}

// CelularEQ applies the EQ predicate on the "celular" field.
func CelularEQ(v int64) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCelular), v))
	})
}

// CelularNEQ applies the NEQ predicate on the "celular" field.
func CelularNEQ(v int64) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCelular), v))
	})
}

// CelularIn applies the In predicate on the "celular" field.
func CelularIn(vs ...int64) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCelular), v...))
	})
}

// CelularNotIn applies the NotIn predicate on the "celular" field.
func CelularNotIn(vs ...int64) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCelular), v...))
	})
}

// CelularGT applies the GT predicate on the "celular" field.
func CelularGT(v int64) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCelular), v))
	})
}

// CelularGTE applies the GTE predicate on the "celular" field.
func CelularGTE(v int64) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCelular), v))
	})
}

// CelularLT applies the LT predicate on the "celular" field.
func CelularLT(v int64) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCelular), v))
	})
}

// CelularLTE applies the LTE predicate on the "celular" field.
func CelularLTE(v int64) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCelular), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// SiteEQ applies the EQ predicate on the "site" field.
func SiteEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSite), v))
	})
}

// SiteNEQ applies the NEQ predicate on the "site" field.
func SiteNEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSite), v))
	})
}

// SiteIn applies the In predicate on the "site" field.
func SiteIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSite), v...))
	})
}

// SiteNotIn applies the NotIn predicate on the "site" field.
func SiteNotIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSite), v...))
	})
}

// SiteGT applies the GT predicate on the "site" field.
func SiteGT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSite), v))
	})
}

// SiteGTE applies the GTE predicate on the "site" field.
func SiteGTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSite), v))
	})
}

// SiteLT applies the LT predicate on the "site" field.
func SiteLT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSite), v))
	})
}

// SiteLTE applies the LTE predicate on the "site" field.
func SiteLTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSite), v))
	})
}

// SiteContains applies the Contains predicate on the "site" field.
func SiteContains(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSite), v))
	})
}

// SiteHasPrefix applies the HasPrefix predicate on the "site" field.
func SiteHasPrefix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSite), v))
	})
}

// SiteHasSuffix applies the HasSuffix predicate on the "site" field.
func SiteHasSuffix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSite), v))
	})
}

// SiteEqualFold applies the EqualFold predicate on the "site" field.
func SiteEqualFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSite), v))
	})
}

// SiteContainsFold applies the ContainsFold predicate on the "site" field.
func SiteContainsFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSite), v))
	})
}

// FacebookEQ applies the EQ predicate on the "facebook" field.
func FacebookEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacebook), v))
	})
}

// FacebookNEQ applies the NEQ predicate on the "facebook" field.
func FacebookNEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFacebook), v))
	})
}

// FacebookIn applies the In predicate on the "facebook" field.
func FacebookIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFacebook), v...))
	})
}

// FacebookNotIn applies the NotIn predicate on the "facebook" field.
func FacebookNotIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFacebook), v...))
	})
}

// FacebookGT applies the GT predicate on the "facebook" field.
func FacebookGT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFacebook), v))
	})
}

// FacebookGTE applies the GTE predicate on the "facebook" field.
func FacebookGTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFacebook), v))
	})
}

// FacebookLT applies the LT predicate on the "facebook" field.
func FacebookLT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFacebook), v))
	})
}

// FacebookLTE applies the LTE predicate on the "facebook" field.
func FacebookLTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFacebook), v))
	})
}

// FacebookContains applies the Contains predicate on the "facebook" field.
func FacebookContains(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFacebook), v))
	})
}

// FacebookHasPrefix applies the HasPrefix predicate on the "facebook" field.
func FacebookHasPrefix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFacebook), v))
	})
}

// FacebookHasSuffix applies the HasSuffix predicate on the "facebook" field.
func FacebookHasSuffix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFacebook), v))
	})
}

// FacebookIsNil applies the IsNil predicate on the "facebook" field.
func FacebookIsNil() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFacebook)))
	})
}

// FacebookNotNil applies the NotNil predicate on the "facebook" field.
func FacebookNotNil() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFacebook)))
	})
}

// FacebookEqualFold applies the EqualFold predicate on the "facebook" field.
func FacebookEqualFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFacebook), v))
	})
}

// FacebookContainsFold applies the ContainsFold predicate on the "facebook" field.
func FacebookContainsFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFacebook), v))
	})
}

// InstagramEQ applies the EQ predicate on the "instagram" field.
func InstagramEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstagram), v))
	})
}

// InstagramNEQ applies the NEQ predicate on the "instagram" field.
func InstagramNEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstagram), v))
	})
}

// InstagramIn applies the In predicate on the "instagram" field.
func InstagramIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstagram), v...))
	})
}

// InstagramNotIn applies the NotIn predicate on the "instagram" field.
func InstagramNotIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstagram), v...))
	})
}

// InstagramGT applies the GT predicate on the "instagram" field.
func InstagramGT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstagram), v))
	})
}

// InstagramGTE applies the GTE predicate on the "instagram" field.
func InstagramGTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstagram), v))
	})
}

// InstagramLT applies the LT predicate on the "instagram" field.
func InstagramLT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstagram), v))
	})
}

// InstagramLTE applies the LTE predicate on the "instagram" field.
func InstagramLTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstagram), v))
	})
}

// InstagramContains applies the Contains predicate on the "instagram" field.
func InstagramContains(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstagram), v))
	})
}

// InstagramHasPrefix applies the HasPrefix predicate on the "instagram" field.
func InstagramHasPrefix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstagram), v))
	})
}

// InstagramHasSuffix applies the HasSuffix predicate on the "instagram" field.
func InstagramHasSuffix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstagram), v))
	})
}

// InstagramIsNil applies the IsNil predicate on the "instagram" field.
func InstagramIsNil() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInstagram)))
	})
}

// InstagramNotNil applies the NotNil predicate on the "instagram" field.
func InstagramNotNil() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInstagram)))
	})
}

// InstagramEqualFold applies the EqualFold predicate on the "instagram" field.
func InstagramEqualFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstagram), v))
	})
}

// InstagramContainsFold applies the ContainsFold predicate on the "instagram" field.
func InstagramContainsFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstagram), v))
	})
}

// YoutubeEQ applies the EQ predicate on the "youtube" field.
func YoutubeEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYoutube), v))
	})
}

// YoutubeNEQ applies the NEQ predicate on the "youtube" field.
func YoutubeNEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYoutube), v))
	})
}

// YoutubeIn applies the In predicate on the "youtube" field.
func YoutubeIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldYoutube), v...))
	})
}

// YoutubeNotIn applies the NotIn predicate on the "youtube" field.
func YoutubeNotIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldYoutube), v...))
	})
}

// YoutubeGT applies the GT predicate on the "youtube" field.
func YoutubeGT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYoutube), v))
	})
}

// YoutubeGTE applies the GTE predicate on the "youtube" field.
func YoutubeGTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYoutube), v))
	})
}

// YoutubeLT applies the LT predicate on the "youtube" field.
func YoutubeLT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYoutube), v))
	})
}

// YoutubeLTE applies the LTE predicate on the "youtube" field.
func YoutubeLTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYoutube), v))
	})
}

// YoutubeContains applies the Contains predicate on the "youtube" field.
func YoutubeContains(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldYoutube), v))
	})
}

// YoutubeHasPrefix applies the HasPrefix predicate on the "youtube" field.
func YoutubeHasPrefix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldYoutube), v))
	})
}

// YoutubeHasSuffix applies the HasSuffix predicate on the "youtube" field.
func YoutubeHasSuffix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldYoutube), v))
	})
}

// YoutubeIsNil applies the IsNil predicate on the "youtube" field.
func YoutubeIsNil() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldYoutube)))
	})
}

// YoutubeNotNil applies the NotNil predicate on the "youtube" field.
func YoutubeNotNil() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldYoutube)))
	})
}

// YoutubeEqualFold applies the EqualFold predicate on the "youtube" field.
func YoutubeEqualFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldYoutube), v))
	})
}

// YoutubeContainsFold applies the ContainsFold predicate on the "youtube" field.
func YoutubeContainsFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldYoutube), v))
	})
}

// LinkedinEQ applies the EQ predicate on the "linkedin" field.
func LinkedinEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLinkedin), v))
	})
}

// LinkedinNEQ applies the NEQ predicate on the "linkedin" field.
func LinkedinNEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLinkedin), v))
	})
}

// LinkedinIn applies the In predicate on the "linkedin" field.
func LinkedinIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLinkedin), v...))
	})
}

// LinkedinNotIn applies the NotIn predicate on the "linkedin" field.
func LinkedinNotIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLinkedin), v...))
	})
}

// LinkedinGT applies the GT predicate on the "linkedin" field.
func LinkedinGT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLinkedin), v))
	})
}

// LinkedinGTE applies the GTE predicate on the "linkedin" field.
func LinkedinGTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLinkedin), v))
	})
}

// LinkedinLT applies the LT predicate on the "linkedin" field.
func LinkedinLT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLinkedin), v))
	})
}

// LinkedinLTE applies the LTE predicate on the "linkedin" field.
func LinkedinLTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLinkedin), v))
	})
}

// LinkedinContains applies the Contains predicate on the "linkedin" field.
func LinkedinContains(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLinkedin), v))
	})
}

// LinkedinHasPrefix applies the HasPrefix predicate on the "linkedin" field.
func LinkedinHasPrefix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLinkedin), v))
	})
}

// LinkedinHasSuffix applies the HasSuffix predicate on the "linkedin" field.
func LinkedinHasSuffix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLinkedin), v))
	})
}

// LinkedinIsNil applies the IsNil predicate on the "linkedin" field.
func LinkedinIsNil() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLinkedin)))
	})
}

// LinkedinNotNil applies the NotNil predicate on the "linkedin" field.
func LinkedinNotNil() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLinkedin)))
	})
}

// LinkedinEqualFold applies the EqualFold predicate on the "linkedin" field.
func LinkedinEqualFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLinkedin), v))
	})
}

// LinkedinContainsFold applies the ContainsFold predicate on the "linkedin" field.
func LinkedinContainsFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLinkedin), v))
	})
}

// UnidadeIDEQ applies the EQ predicate on the "unidade_id" field.
func UnidadeIDEQ(v int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnidadeID), v))
	})
}

// UnidadeIDNEQ applies the NEQ predicate on the "unidade_id" field.
func UnidadeIDNEQ(v int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnidadeID), v))
	})
}

// UnidadeIDIn applies the In predicate on the "unidade_id" field.
func UnidadeIDIn(vs ...int) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnidadeID), v...))
	})
}

// UnidadeIDNotIn applies the NotIn predicate on the "unidade_id" field.
func UnidadeIDNotIn(vs ...int) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnidadeID), v...))
	})
}

// UnidadeIDGT applies the GT predicate on the "unidade_id" field.
func UnidadeIDGT(v int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnidadeID), v))
	})
}

// UnidadeIDGTE applies the GTE predicate on the "unidade_id" field.
func UnidadeIDGTE(v int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnidadeID), v))
	})
}

// UnidadeIDLT applies the LT predicate on the "unidade_id" field.
func UnidadeIDLT(v int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnidadeID), v))
	})
}

// UnidadeIDLTE applies the LTE predicate on the "unidade_id" field.
func UnidadeIDLTE(v int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnidadeID), v))
	})
}

// EnderecoIDEQ applies the EQ predicate on the "endereco_id" field.
func EnderecoIDEQ(v int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnderecoID), v))
	})
}

// EnderecoIDNEQ applies the NEQ predicate on the "endereco_id" field.
func EnderecoIDNEQ(v int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnderecoID), v))
	})
}

// EnderecoIDIn applies the In predicate on the "endereco_id" field.
func EnderecoIDIn(vs ...int) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEnderecoID), v...))
	})
}

// EnderecoIDNotIn applies the NotIn predicate on the "endereco_id" field.
func EnderecoIDNotIn(vs ...int) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEnderecoID), v...))
	})
}

// EnderecoIDGT applies the GT predicate on the "endereco_id" field.
func EnderecoIDGT(v int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnderecoID), v))
	})
}

// EnderecoIDGTE applies the GTE predicate on the "endereco_id" field.
func EnderecoIDGTE(v int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnderecoID), v))
	})
}

// EnderecoIDLT applies the LT predicate on the "endereco_id" field.
func EnderecoIDLT(v int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnderecoID), v))
	})
}

// EnderecoIDLTE applies the LTE predicate on the "endereco_id" field.
func EnderecoIDLTE(v int) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnderecoID), v))
	})
}

// ImagemPerfilURLEQ applies the EQ predicate on the "imagem_perfil_url" field.
func ImagemPerfilURLEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImagemPerfilURL), v))
	})
}

// ImagemPerfilURLNEQ applies the NEQ predicate on the "imagem_perfil_url" field.
func ImagemPerfilURLNEQ(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImagemPerfilURL), v))
	})
}

// ImagemPerfilURLIn applies the In predicate on the "imagem_perfil_url" field.
func ImagemPerfilURLIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImagemPerfilURL), v...))
	})
}

// ImagemPerfilURLNotIn applies the NotIn predicate on the "imagem_perfil_url" field.
func ImagemPerfilURLNotIn(vs ...string) predicate.Profissional {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profissional(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImagemPerfilURL), v...))
	})
}

// ImagemPerfilURLGT applies the GT predicate on the "imagem_perfil_url" field.
func ImagemPerfilURLGT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImagemPerfilURL), v))
	})
}

// ImagemPerfilURLGTE applies the GTE predicate on the "imagem_perfil_url" field.
func ImagemPerfilURLGTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImagemPerfilURL), v))
	})
}

// ImagemPerfilURLLT applies the LT predicate on the "imagem_perfil_url" field.
func ImagemPerfilURLLT(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImagemPerfilURL), v))
	})
}

// ImagemPerfilURLLTE applies the LTE predicate on the "imagem_perfil_url" field.
func ImagemPerfilURLLTE(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImagemPerfilURL), v))
	})
}

// ImagemPerfilURLContains applies the Contains predicate on the "imagem_perfil_url" field.
func ImagemPerfilURLContains(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImagemPerfilURL), v))
	})
}

// ImagemPerfilURLHasPrefix applies the HasPrefix predicate on the "imagem_perfil_url" field.
func ImagemPerfilURLHasPrefix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImagemPerfilURL), v))
	})
}

// ImagemPerfilURLHasSuffix applies the HasSuffix predicate on the "imagem_perfil_url" field.
func ImagemPerfilURLHasSuffix(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImagemPerfilURL), v))
	})
}

// ImagemPerfilURLEqualFold applies the EqualFold predicate on the "imagem_perfil_url" field.
func ImagemPerfilURLEqualFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImagemPerfilURL), v))
	})
}

// ImagemPerfilURLContainsFold applies the ContainsFold predicate on the "imagem_perfil_url" field.
func ImagemPerfilURLContainsFold(v string) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImagemPerfilURL), v))
	})
}

// HasWhatsapps applies the HasEdge predicate on the "whatsapps" edge.
func HasWhatsapps() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WhatsappsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WhatsappsTable, WhatsappsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWhatsappsWith applies the HasEdge predicate on the "whatsapps" edge with a given conditions (other predicates).
func HasWhatsappsWith(preds ...predicate.WhatsApp) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WhatsappsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WhatsappsTable, WhatsappsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVideos applies the HasEdge predicate on the "videos" edge.
func HasVideos() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VideosTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VideosTable, VideosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVideosWith applies the HasEdge predicate on the "videos" edge with a given conditions (other predicates).
func HasVideosWith(preds ...predicate.Video) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VideosInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VideosTable, VideosColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTratamentos applies the HasEdge predicate on the "tratamentos" edge.
func HasTratamentos() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TratamentosTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TratamentosTable, TratamentosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTratamentosWith applies the HasEdge predicate on the "tratamentos" edge with a given conditions (other predicates).
func HasTratamentosWith(preds ...predicate.Tratamento) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TratamentosInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TratamentosTable, TratamentosColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPodcasts applies the HasEdge predicate on the "podcasts" edge.
func HasPodcasts() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PodcastsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PodcastsTable, PodcastsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPodcastsWith applies the HasEdge predicate on the "podcasts" edge with a given conditions (other predicates).
func HasPodcastsWith(preds ...predicate.Podcast) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PodcastsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PodcastsTable, PodcastsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFotos applies the HasEdge predicate on the "fotos" edge.
func HasFotos() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FotosTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FotosTable, FotosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFotosWith applies the HasEdge predicate on the "fotos" edge with a given conditions (other predicates).
func HasFotosWith(preds ...predicate.Foto) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FotosInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FotosTable, FotosColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConvenios applies the HasEdge predicate on the "convenios" edge.
func HasConvenios() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConveniosTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ConveniosTable, ConveniosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConveniosWith applies the HasEdge predicate on the "convenios" edge with a given conditions (other predicates).
func HasConveniosWith(preds ...predicate.Convenio) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConveniosInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ConveniosTable, ConveniosColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEspecializacoes applies the HasEdge predicate on the "especializacoes" edge.
func HasEspecializacoes() predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EspecializacoesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, EspecializacoesTable, EspecializacoesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEspecializacoesWith applies the HasEdge predicate on the "especializacoes" edge with a given conditions (other predicates).
func HasEspecializacoesWith(preds ...predicate.Especializacao) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EspecializacoesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, EspecializacoesTable, EspecializacoesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Profissional) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Profissional) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Profissional) predicate.Profissional {
	return predicate.Profissional(func(s *sql.Selector) {
		p(s.Not())
	})
}
