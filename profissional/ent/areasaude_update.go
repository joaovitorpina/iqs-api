// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"profissional/ent/areasaude"
	"profissional/ent/especializacao"
	"profissional/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AreaSaudeUpdate is the builder for updating AreaSaude entities.
type AreaSaudeUpdate struct {
	config
	hooks    []Hook
	mutation *AreaSaudeMutation
}

// Where appends a list predicates to the AreaSaudeUpdate builder.
func (asu *AreaSaudeUpdate) Where(ps ...predicate.AreaSaude) *AreaSaudeUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetDescricao sets the "descricao" field.
func (asu *AreaSaudeUpdate) SetDescricao(s string) *AreaSaudeUpdate {
	asu.mutation.SetDescricao(s)
	return asu
}

// AddEspecializacoIDs adds the "especializacoes" edge to the Especializacao entity by IDs.
func (asu *AreaSaudeUpdate) AddEspecializacoIDs(ids ...int) *AreaSaudeUpdate {
	asu.mutation.AddEspecializacoIDs(ids...)
	return asu
}

// AddEspecializacoes adds the "especializacoes" edges to the Especializacao entity.
func (asu *AreaSaudeUpdate) AddEspecializacoes(e ...*Especializacao) *AreaSaudeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return asu.AddEspecializacoIDs(ids...)
}

// Mutation returns the AreaSaudeMutation object of the builder.
func (asu *AreaSaudeUpdate) Mutation() *AreaSaudeMutation {
	return asu.mutation
}

// ClearEspecializacoes clears all "especializacoes" edges to the Especializacao entity.
func (asu *AreaSaudeUpdate) ClearEspecializacoes() *AreaSaudeUpdate {
	asu.mutation.ClearEspecializacoes()
	return asu
}

// RemoveEspecializacoIDs removes the "especializacoes" edge to Especializacao entities by IDs.
func (asu *AreaSaudeUpdate) RemoveEspecializacoIDs(ids ...int) *AreaSaudeUpdate {
	asu.mutation.RemoveEspecializacoIDs(ids...)
	return asu
}

// RemoveEspecializacoes removes "especializacoes" edges to Especializacao entities.
func (asu *AreaSaudeUpdate) RemoveEspecializacoes(e ...*Especializacao) *AreaSaudeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return asu.RemoveEspecializacoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AreaSaudeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(asu.hooks) == 0 {
		affected, err = asu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AreaSaudeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asu.mutation = mutation
			affected, err = asu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(asu.hooks) - 1; i >= 0; i-- {
			if asu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AreaSaudeUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AreaSaudeUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AreaSaudeUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asu *AreaSaudeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   areasaude.Table,
			Columns: areasaude.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: areasaude.FieldID,
			},
		},
	}
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.Descricao(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: areasaude.FieldDescricao,
		})
	}
	if asu.mutation.EspecializacoesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   areasaude.EspecializacoesTable,
			Columns: []string{areasaude.EspecializacoesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: especializacao.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.RemovedEspecializacoesIDs(); len(nodes) > 0 && !asu.mutation.EspecializacoesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   areasaude.EspecializacoesTable,
			Columns: []string{areasaude.EspecializacoesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: especializacao.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.EspecializacoesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   areasaude.EspecializacoesTable,
			Columns: []string{areasaude.EspecializacoesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: especializacao.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{areasaude.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AreaSaudeUpdateOne is the builder for updating a single AreaSaude entity.
type AreaSaudeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AreaSaudeMutation
}

// SetDescricao sets the "descricao" field.
func (asuo *AreaSaudeUpdateOne) SetDescricao(s string) *AreaSaudeUpdateOne {
	asuo.mutation.SetDescricao(s)
	return asuo
}

// AddEspecializacoIDs adds the "especializacoes" edge to the Especializacao entity by IDs.
func (asuo *AreaSaudeUpdateOne) AddEspecializacoIDs(ids ...int) *AreaSaudeUpdateOne {
	asuo.mutation.AddEspecializacoIDs(ids...)
	return asuo
}

// AddEspecializacoes adds the "especializacoes" edges to the Especializacao entity.
func (asuo *AreaSaudeUpdateOne) AddEspecializacoes(e ...*Especializacao) *AreaSaudeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return asuo.AddEspecializacoIDs(ids...)
}

// Mutation returns the AreaSaudeMutation object of the builder.
func (asuo *AreaSaudeUpdateOne) Mutation() *AreaSaudeMutation {
	return asuo.mutation
}

// ClearEspecializacoes clears all "especializacoes" edges to the Especializacao entity.
func (asuo *AreaSaudeUpdateOne) ClearEspecializacoes() *AreaSaudeUpdateOne {
	asuo.mutation.ClearEspecializacoes()
	return asuo
}

// RemoveEspecializacoIDs removes the "especializacoes" edge to Especializacao entities by IDs.
func (asuo *AreaSaudeUpdateOne) RemoveEspecializacoIDs(ids ...int) *AreaSaudeUpdateOne {
	asuo.mutation.RemoveEspecializacoIDs(ids...)
	return asuo
}

// RemoveEspecializacoes removes "especializacoes" edges to Especializacao entities.
func (asuo *AreaSaudeUpdateOne) RemoveEspecializacoes(e ...*Especializacao) *AreaSaudeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return asuo.RemoveEspecializacoIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AreaSaudeUpdateOne) Select(field string, fields ...string) *AreaSaudeUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AreaSaude entity.
func (asuo *AreaSaudeUpdateOne) Save(ctx context.Context) (*AreaSaude, error) {
	var (
		err  error
		node *AreaSaude
	)
	if len(asuo.hooks) == 0 {
		node, err = asuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AreaSaudeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asuo.mutation = mutation
			node, err = asuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(asuo.hooks) - 1; i >= 0; i-- {
			if asuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AreaSaudeUpdateOne) SaveX(ctx context.Context) *AreaSaude {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AreaSaudeUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AreaSaudeUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asuo *AreaSaudeUpdateOne) sqlSave(ctx context.Context) (_node *AreaSaude, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   areasaude.Table,
			Columns: areasaude.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: areasaude.FieldID,
			},
		},
	}
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AreaSaude.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, areasaude.FieldID)
		for _, f := range fields {
			if !areasaude.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != areasaude.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.Descricao(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: areasaude.FieldDescricao,
		})
	}
	if asuo.mutation.EspecializacoesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   areasaude.EspecializacoesTable,
			Columns: []string{areasaude.EspecializacoesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: especializacao.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.RemovedEspecializacoesIDs(); len(nodes) > 0 && !asuo.mutation.EspecializacoesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   areasaude.EspecializacoesTable,
			Columns: []string{areasaude.EspecializacoesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: especializacao.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.EspecializacoesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   areasaude.EspecializacoesTable,
			Columns: []string{areasaude.EspecializacoesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: especializacao.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AreaSaude{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{areasaude.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
