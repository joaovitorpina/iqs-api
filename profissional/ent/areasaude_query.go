// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"profissional/ent/areasaude"
	"profissional/ent/especializacao"
	"profissional/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AreaSaudeQuery is the builder for querying AreaSaude entities.
type AreaSaudeQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AreaSaude
	// eager-loading edges.
	withEspecializacoes *EspecializacaoQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AreaSaudeQuery builder.
func (asq *AreaSaudeQuery) Where(ps ...predicate.AreaSaude) *AreaSaudeQuery {
	asq.predicates = append(asq.predicates, ps...)
	return asq
}

// Limit adds a limit step to the query.
func (asq *AreaSaudeQuery) Limit(limit int) *AreaSaudeQuery {
	asq.limit = &limit
	return asq
}

// Offset adds an offset step to the query.
func (asq *AreaSaudeQuery) Offset(offset int) *AreaSaudeQuery {
	asq.offset = &offset
	return asq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (asq *AreaSaudeQuery) Unique(unique bool) *AreaSaudeQuery {
	asq.unique = &unique
	return asq
}

// Order adds an order step to the query.
func (asq *AreaSaudeQuery) Order(o ...OrderFunc) *AreaSaudeQuery {
	asq.order = append(asq.order, o...)
	return asq
}

// QueryEspecializacoes chains the current query on the "especializacoes" edge.
func (asq *AreaSaudeQuery) QueryEspecializacoes() *EspecializacaoQuery {
	query := &EspecializacaoQuery{config: asq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := asq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := asq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(areasaude.Table, areasaude.FieldID, selector),
			sqlgraph.To(especializacao.Table, especializacao.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, areasaude.EspecializacoesTable, areasaude.EspecializacoesColumn),
		)
		fromU = sqlgraph.SetNeighbors(asq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AreaSaude entity from the query.
// Returns a *NotFoundError when no AreaSaude was found.
func (asq *AreaSaudeQuery) First(ctx context.Context) (*AreaSaude, error) {
	nodes, err := asq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{areasaude.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (asq *AreaSaudeQuery) FirstX(ctx context.Context) *AreaSaude {
	node, err := asq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AreaSaude ID from the query.
// Returns a *NotFoundError when no AreaSaude ID was found.
func (asq *AreaSaudeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = asq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{areasaude.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (asq *AreaSaudeQuery) FirstIDX(ctx context.Context) int {
	id, err := asq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AreaSaude entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one AreaSaude entity is not found.
// Returns a *NotFoundError when no AreaSaude entities are found.
func (asq *AreaSaudeQuery) Only(ctx context.Context) (*AreaSaude, error) {
	nodes, err := asq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{areasaude.Label}
	default:
		return nil, &NotSingularError{areasaude.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (asq *AreaSaudeQuery) OnlyX(ctx context.Context) *AreaSaude {
	node, err := asq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AreaSaude ID in the query.
// Returns a *NotSingularError when exactly one AreaSaude ID is not found.
// Returns a *NotFoundError when no entities are found.
func (asq *AreaSaudeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = asq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{areasaude.Label}
	default:
		err = &NotSingularError{areasaude.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (asq *AreaSaudeQuery) OnlyIDX(ctx context.Context) int {
	id, err := asq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AreaSaudes.
func (asq *AreaSaudeQuery) All(ctx context.Context) ([]*AreaSaude, error) {
	if err := asq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return asq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (asq *AreaSaudeQuery) AllX(ctx context.Context) []*AreaSaude {
	nodes, err := asq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AreaSaude IDs.
func (asq *AreaSaudeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := asq.Select(areasaude.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (asq *AreaSaudeQuery) IDsX(ctx context.Context) []int {
	ids, err := asq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (asq *AreaSaudeQuery) Count(ctx context.Context) (int, error) {
	if err := asq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return asq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (asq *AreaSaudeQuery) CountX(ctx context.Context) int {
	count, err := asq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (asq *AreaSaudeQuery) Exist(ctx context.Context) (bool, error) {
	if err := asq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return asq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (asq *AreaSaudeQuery) ExistX(ctx context.Context) bool {
	exist, err := asq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AreaSaudeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (asq *AreaSaudeQuery) Clone() *AreaSaudeQuery {
	if asq == nil {
		return nil
	}
	return &AreaSaudeQuery{
		config:              asq.config,
		limit:               asq.limit,
		offset:              asq.offset,
		order:               append([]OrderFunc{}, asq.order...),
		predicates:          append([]predicate.AreaSaude{}, asq.predicates...),
		withEspecializacoes: asq.withEspecializacoes.Clone(),
		// clone intermediate query.
		sql:  asq.sql.Clone(),
		path: asq.path,
	}
}

// WithEspecializacoes tells the query-builder to eager-load the nodes that are connected to
// the "especializacoes" edge. The optional arguments are used to configure the query builder of the edge.
func (asq *AreaSaudeQuery) WithEspecializacoes(opts ...func(*EspecializacaoQuery)) *AreaSaudeQuery {
	query := &EspecializacaoQuery{config: asq.config}
	for _, opt := range opts {
		opt(query)
	}
	asq.withEspecializacoes = query
	return asq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Descricao string `json:"descricao,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AreaSaude.Query().
//		GroupBy(areasaude.FieldDescricao).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (asq *AreaSaudeQuery) GroupBy(field string, fields ...string) *AreaSaudeGroupBy {
	group := &AreaSaudeGroupBy{config: asq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := asq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return asq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Descricao string `json:"descricao,omitempty"`
//	}
//
//	client.AreaSaude.Query().
//		Select(areasaude.FieldDescricao).
//		Scan(ctx, &v)
//
func (asq *AreaSaudeQuery) Select(fields ...string) *AreaSaudeSelect {
	asq.fields = append(asq.fields, fields...)
	return &AreaSaudeSelect{AreaSaudeQuery: asq}
}

func (asq *AreaSaudeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range asq.fields {
		if !areasaude.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if asq.path != nil {
		prev, err := asq.path(ctx)
		if err != nil {
			return err
		}
		asq.sql = prev
	}
	return nil
}

func (asq *AreaSaudeQuery) sqlAll(ctx context.Context) ([]*AreaSaude, error) {
	var (
		nodes       = []*AreaSaude{}
		_spec       = asq.querySpec()
		loadedTypes = [1]bool{
			asq.withEspecializacoes != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AreaSaude{config: asq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, asq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := asq.withEspecializacoes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*AreaSaude)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Especializacoes = []*Especializacao{}
		}
		query.withFKs = true
		query.Where(predicate.Especializacao(func(s *sql.Selector) {
			s.Where(sql.InValues(areasaude.EspecializacoesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.area_saude_especializacoes
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "area_saude_especializacoes" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "area_saude_especializacoes" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Especializacoes = append(node.Edges.Especializacoes, n)
		}
	}

	return nodes, nil
}

func (asq *AreaSaudeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := asq.querySpec()
	return sqlgraph.CountNodes(ctx, asq.driver, _spec)
}

func (asq *AreaSaudeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := asq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (asq *AreaSaudeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   areasaude.Table,
			Columns: areasaude.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: areasaude.FieldID,
			},
		},
		From:   asq.sql,
		Unique: true,
	}
	if unique := asq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := asq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, areasaude.FieldID)
		for i := range fields {
			if fields[i] != areasaude.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := asq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := asq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := asq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := asq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (asq *AreaSaudeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(asq.driver.Dialect())
	t1 := builder.Table(areasaude.Table)
	columns := asq.fields
	if len(columns) == 0 {
		columns = areasaude.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if asq.sql != nil {
		selector = asq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range asq.predicates {
		p(selector)
	}
	for _, p := range asq.order {
		p(selector)
	}
	if offset := asq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := asq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AreaSaudeGroupBy is the group-by builder for AreaSaude entities.
type AreaSaudeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (asgb *AreaSaudeGroupBy) Aggregate(fns ...AggregateFunc) *AreaSaudeGroupBy {
	asgb.fns = append(asgb.fns, fns...)
	return asgb
}

// Scan applies the group-by query and scans the result into the given value.
func (asgb *AreaSaudeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := asgb.path(ctx)
	if err != nil {
		return err
	}
	asgb.sql = query
	return asgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (asgb *AreaSaudeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := asgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (asgb *AreaSaudeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(asgb.fields) > 1 {
		return nil, errors.New("ent: AreaSaudeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := asgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (asgb *AreaSaudeGroupBy) StringsX(ctx context.Context) []string {
	v, err := asgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (asgb *AreaSaudeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = asgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{areasaude.Label}
	default:
		err = fmt.Errorf("ent: AreaSaudeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (asgb *AreaSaudeGroupBy) StringX(ctx context.Context) string {
	v, err := asgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (asgb *AreaSaudeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(asgb.fields) > 1 {
		return nil, errors.New("ent: AreaSaudeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := asgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (asgb *AreaSaudeGroupBy) IntsX(ctx context.Context) []int {
	v, err := asgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (asgb *AreaSaudeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = asgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{areasaude.Label}
	default:
		err = fmt.Errorf("ent: AreaSaudeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (asgb *AreaSaudeGroupBy) IntX(ctx context.Context) int {
	v, err := asgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (asgb *AreaSaudeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(asgb.fields) > 1 {
		return nil, errors.New("ent: AreaSaudeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := asgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (asgb *AreaSaudeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := asgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (asgb *AreaSaudeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = asgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{areasaude.Label}
	default:
		err = fmt.Errorf("ent: AreaSaudeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (asgb *AreaSaudeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := asgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (asgb *AreaSaudeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(asgb.fields) > 1 {
		return nil, errors.New("ent: AreaSaudeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := asgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (asgb *AreaSaudeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := asgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (asgb *AreaSaudeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = asgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{areasaude.Label}
	default:
		err = fmt.Errorf("ent: AreaSaudeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (asgb *AreaSaudeGroupBy) BoolX(ctx context.Context) bool {
	v, err := asgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (asgb *AreaSaudeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range asgb.fields {
		if !areasaude.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := asgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := asgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (asgb *AreaSaudeGroupBy) sqlQuery() *sql.Selector {
	selector := asgb.sql.Select()
	aggregation := make([]string, 0, len(asgb.fns))
	for _, fn := range asgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(asgb.fields)+len(asgb.fns))
		for _, f := range asgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(asgb.fields...)...)
}

// AreaSaudeSelect is the builder for selecting fields of AreaSaude entities.
type AreaSaudeSelect struct {
	*AreaSaudeQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ass *AreaSaudeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ass.prepareQuery(ctx); err != nil {
		return err
	}
	ass.sql = ass.AreaSaudeQuery.sqlQuery(ctx)
	return ass.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ass *AreaSaudeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ass.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ass *AreaSaudeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ass.fields) > 1 {
		return nil, errors.New("ent: AreaSaudeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ass.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ass *AreaSaudeSelect) StringsX(ctx context.Context) []string {
	v, err := ass.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ass *AreaSaudeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ass.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{areasaude.Label}
	default:
		err = fmt.Errorf("ent: AreaSaudeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ass *AreaSaudeSelect) StringX(ctx context.Context) string {
	v, err := ass.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ass *AreaSaudeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ass.fields) > 1 {
		return nil, errors.New("ent: AreaSaudeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ass.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ass *AreaSaudeSelect) IntsX(ctx context.Context) []int {
	v, err := ass.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ass *AreaSaudeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ass.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{areasaude.Label}
	default:
		err = fmt.Errorf("ent: AreaSaudeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ass *AreaSaudeSelect) IntX(ctx context.Context) int {
	v, err := ass.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ass *AreaSaudeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ass.fields) > 1 {
		return nil, errors.New("ent: AreaSaudeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ass.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ass *AreaSaudeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ass.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ass *AreaSaudeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ass.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{areasaude.Label}
	default:
		err = fmt.Errorf("ent: AreaSaudeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ass *AreaSaudeSelect) Float64X(ctx context.Context) float64 {
	v, err := ass.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ass *AreaSaudeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ass.fields) > 1 {
		return nil, errors.New("ent: AreaSaudeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ass.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ass *AreaSaudeSelect) BoolsX(ctx context.Context) []bool {
	v, err := ass.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ass *AreaSaudeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ass.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{areasaude.Label}
	default:
		err = fmt.Errorf("ent: AreaSaudeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ass *AreaSaudeSelect) BoolX(ctx context.Context) bool {
	v, err := ass.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ass *AreaSaudeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ass.sql.Query()
	if err := ass.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
