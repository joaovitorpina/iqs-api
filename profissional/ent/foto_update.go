// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"profissional/ent/foto"
	"profissional/ent/predicate"
	"profissional/ent/profissional"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FotoUpdate is the builder for updating Foto entities.
type FotoUpdate struct {
	config
	hooks    []Hook
	mutation *FotoMutation
}

// Where appends a list predicates to the FotoUpdate builder.
func (fu *FotoUpdate) Where(ps ...predicate.Foto) *FotoUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetTitulo sets the "titulo" field.
func (fu *FotoUpdate) SetTitulo(s string) *FotoUpdate {
	fu.mutation.SetTitulo(s)
	return fu
}

// SetURL sets the "url" field.
func (fu *FotoUpdate) SetURL(s string) *FotoUpdate {
	fu.mutation.SetURL(s)
	return fu
}

// SetProfissionalID sets the "profissional" edge to the Profissional entity by ID.
func (fu *FotoUpdate) SetProfissionalID(id int) *FotoUpdate {
	fu.mutation.SetProfissionalID(id)
	return fu
}

// SetProfissional sets the "profissional" edge to the Profissional entity.
func (fu *FotoUpdate) SetProfissional(p *Profissional) *FotoUpdate {
	return fu.SetProfissionalID(p.ID)
}

// Mutation returns the FotoMutation object of the builder.
func (fu *FotoUpdate) Mutation() *FotoMutation {
	return fu.mutation
}

// ClearProfissional clears the "profissional" edge to the Profissional entity.
func (fu *FotoUpdate) ClearProfissional() *FotoUpdate {
	fu.mutation.ClearProfissional()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FotoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		if err = fu.check(); err != nil {
			return 0, err
		}
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FotoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fu.check(); err != nil {
				return 0, err
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FotoUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FotoUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FotoUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FotoUpdate) check() error {
	if _, ok := fu.mutation.ProfissionalID(); fu.mutation.ProfissionalCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Foto.profissional"`)
	}
	return nil
}

func (fu *FotoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   foto.Table,
			Columns: foto.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: foto.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Titulo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foto.FieldTitulo,
		})
	}
	if value, ok := fu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foto.FieldURL,
		})
	}
	if fu.mutation.ProfissionalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foto.ProfissionalTable,
			Columns: []string{foto.ProfissionalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profissional.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ProfissionalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foto.ProfissionalTable,
			Columns: []string{foto.ProfissionalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profissional.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{foto.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FotoUpdateOne is the builder for updating a single Foto entity.
type FotoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FotoMutation
}

// SetTitulo sets the "titulo" field.
func (fuo *FotoUpdateOne) SetTitulo(s string) *FotoUpdateOne {
	fuo.mutation.SetTitulo(s)
	return fuo
}

// SetURL sets the "url" field.
func (fuo *FotoUpdateOne) SetURL(s string) *FotoUpdateOne {
	fuo.mutation.SetURL(s)
	return fuo
}

// SetProfissionalID sets the "profissional" edge to the Profissional entity by ID.
func (fuo *FotoUpdateOne) SetProfissionalID(id int) *FotoUpdateOne {
	fuo.mutation.SetProfissionalID(id)
	return fuo
}

// SetProfissional sets the "profissional" edge to the Profissional entity.
func (fuo *FotoUpdateOne) SetProfissional(p *Profissional) *FotoUpdateOne {
	return fuo.SetProfissionalID(p.ID)
}

// Mutation returns the FotoMutation object of the builder.
func (fuo *FotoUpdateOne) Mutation() *FotoMutation {
	return fuo.mutation
}

// ClearProfissional clears the "profissional" edge to the Profissional entity.
func (fuo *FotoUpdateOne) ClearProfissional() *FotoUpdateOne {
	fuo.mutation.ClearProfissional()
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FotoUpdateOne) Select(field string, fields ...string) *FotoUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Foto entity.
func (fuo *FotoUpdateOne) Save(ctx context.Context) (*Foto, error) {
	var (
		err  error
		node *Foto
	)
	if len(fuo.hooks) == 0 {
		if err = fuo.check(); err != nil {
			return nil, err
		}
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FotoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuo.check(); err != nil {
				return nil, err
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FotoUpdateOne) SaveX(ctx context.Context) *Foto {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FotoUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FotoUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FotoUpdateOne) check() error {
	if _, ok := fuo.mutation.ProfissionalID(); fuo.mutation.ProfissionalCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Foto.profissional"`)
	}
	return nil
}

func (fuo *FotoUpdateOne) sqlSave(ctx context.Context) (_node *Foto, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   foto.Table,
			Columns: foto.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: foto.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Foto.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, foto.FieldID)
		for _, f := range fields {
			if !foto.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != foto.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Titulo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foto.FieldTitulo,
		})
	}
	if value, ok := fuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foto.FieldURL,
		})
	}
	if fuo.mutation.ProfissionalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foto.ProfissionalTable,
			Columns: []string{foto.ProfissionalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profissional.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ProfissionalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foto.ProfissionalTable,
			Columns: []string{foto.ProfissionalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profissional.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Foto{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{foto.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
